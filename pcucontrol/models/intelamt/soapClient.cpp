/* soapClient.cpp
   Generated by gSOAP 2.7.8c from ../../Samples/gSoapGeneratedCode/AmtWsdlInterface.h
   Copyright (C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.8c 2007-06-07 16:01:49 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___apl__AgentWatchdogShutdown(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apl__AgentWatchdogShutdown *apl__AgentWatchdogShutdown, _apl__AgentWatchdogShutdownResponse *apl__AgentWatchdogShutdownResponse)
{	struct __apl__AgentWatchdogShutdown soap_tmp___apl__AgentWatchdogShutdown;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogLocalService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogLocal/AgentWatchdogShutdown";
	soap->encodingStyle = NULL;
	soap_tmp___apl__AgentWatchdogShutdown.apl__AgentWatchdogShutdown = apl__AgentWatchdogShutdown;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apl__AgentWatchdogShutdown(soap, &soap_tmp___apl__AgentWatchdogShutdown);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apl__AgentWatchdogShutdown(soap, &soap_tmp___apl__AgentWatchdogShutdown, "-apl:AgentWatchdogShutdown", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apl__AgentWatchdogShutdown(soap, &soap_tmp___apl__AgentWatchdogShutdown, "-apl:AgentWatchdogShutdown", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apl__AgentWatchdogShutdownResponse)
		return soap_closesock(soap);
	apl__AgentWatchdogShutdownResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apl__AgentWatchdogShutdownResponse->soap_get(soap, "apl:AgentWatchdogShutdownResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apl__AgentWatchdogHeartbeat(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apl__AgentWatchdogHeartbeat *apl__AgentWatchdogHeartbeat, _apl__AgentWatchdogHeartbeatResponse *apl__AgentWatchdogHeartbeatResponse)
{	struct __apl__AgentWatchdogHeartbeat soap_tmp___apl__AgentWatchdogHeartbeat;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogLocalService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogLocal/AgentWatchdogHeartbeat";
	soap->encodingStyle = NULL;
	soap_tmp___apl__AgentWatchdogHeartbeat.apl__AgentWatchdogHeartbeat = apl__AgentWatchdogHeartbeat;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apl__AgentWatchdogHeartbeat(soap, &soap_tmp___apl__AgentWatchdogHeartbeat);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apl__AgentWatchdogHeartbeat(soap, &soap_tmp___apl__AgentWatchdogHeartbeat, "-apl:AgentWatchdogHeartbeat", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apl__AgentWatchdogHeartbeat(soap, &soap_tmp___apl__AgentWatchdogHeartbeat, "-apl:AgentWatchdogHeartbeat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apl__AgentWatchdogHeartbeatResponse)
		return soap_closesock(soap);
	apl__AgentWatchdogHeartbeatResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apl__AgentWatchdogHeartbeatResponse->soap_get(soap, "apl:AgentWatchdogHeartbeatResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apl__AgentWatchdogRegister(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apl__AgentWatchdogRegister *apl__AgentWatchdogRegister, _apl__AgentWatchdogRegisterResponse *apl__AgentWatchdogRegisterResponse)
{	struct __apl__AgentWatchdogRegister soap_tmp___apl__AgentWatchdogRegister;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogLocalService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogLocal/AgentWatchdogRegister";
	soap->encodingStyle = NULL;
	soap_tmp___apl__AgentWatchdogRegister.apl__AgentWatchdogRegister = apl__AgentWatchdogRegister;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apl__AgentWatchdogRegister(soap, &soap_tmp___apl__AgentWatchdogRegister);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apl__AgentWatchdogRegister(soap, &soap_tmp___apl__AgentWatchdogRegister, "-apl:AgentWatchdogRegister", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apl__AgentWatchdogRegister(soap, &soap_tmp___apl__AgentWatchdogRegister, "-apl:AgentWatchdogRegister", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apl__AgentWatchdogRegisterResponse)
		return soap_closesock(soap);
	apl__AgentWatchdogRegisterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apl__AgentWatchdogRegisterResponse->soap_get(soap, "apl:AgentWatchdogRegisterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogCreate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogCreate *apr__ConsoleWatchdogCreate, _apr__ConsoleWatchdogCreateResponse *apr__ConsoleWatchdogCreateResponse)
{	struct __apr__ConsoleWatchdogCreate soap_tmp___apr__ConsoleWatchdogCreate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogCreate";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogCreate.apr__ConsoleWatchdogCreate = apr__ConsoleWatchdogCreate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogCreate(soap, &soap_tmp___apr__ConsoleWatchdogCreate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogCreate(soap, &soap_tmp___apr__ConsoleWatchdogCreate, "-apr:ConsoleWatchdogCreate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogCreate(soap, &soap_tmp___apr__ConsoleWatchdogCreate, "-apr:ConsoleWatchdogCreate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogCreateResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogCreateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogCreateResponse->soap_get(soap, "apr:ConsoleWatchdogCreateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogDelete(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogDelete *apr__ConsoleWatchdogDelete, _apr__ConsoleWatchdogDeleteResponse *apr__ConsoleWatchdogDeleteResponse)
{	struct __apr__ConsoleWatchdogDelete soap_tmp___apr__ConsoleWatchdogDelete;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogDelete";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogDelete.apr__ConsoleWatchdogDelete = apr__ConsoleWatchdogDelete;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogDelete(soap, &soap_tmp___apr__ConsoleWatchdogDelete);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogDelete(soap, &soap_tmp___apr__ConsoleWatchdogDelete, "-apr:ConsoleWatchdogDelete", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogDelete(soap, &soap_tmp___apr__ConsoleWatchdogDelete, "-apr:ConsoleWatchdogDelete", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogDeleteResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogDeleteResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogDeleteResponse->soap_get(soap, "apr:ConsoleWatchdogDeleteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogEnumerate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogEnumerate *apr__ConsoleWatchdogEnumerate, _apr__ConsoleWatchdogEnumerateResponse *apr__ConsoleWatchdogEnumerateResponse)
{	struct __apr__ConsoleWatchdogEnumerate soap_tmp___apr__ConsoleWatchdogEnumerate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogEnumerate";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogEnumerate.apr__ConsoleWatchdogEnumerate = apr__ConsoleWatchdogEnumerate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogEnumerate(soap, &soap_tmp___apr__ConsoleWatchdogEnumerate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogEnumerate(soap, &soap_tmp___apr__ConsoleWatchdogEnumerate, "-apr:ConsoleWatchdogEnumerate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogEnumerate(soap, &soap_tmp___apr__ConsoleWatchdogEnumerate, "-apr:ConsoleWatchdogEnumerate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogEnumerateResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogEnumerateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogEnumerateResponse->soap_get(soap, "apr:ConsoleWatchdogEnumerateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogSetActions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogSetActions *apr__ConsoleWatchdogSetActions, _apr__ConsoleWatchdogSetActionsResponse *apr__ConsoleWatchdogSetActionsResponse)
{	struct __apr__ConsoleWatchdogSetActions soap_tmp___apr__ConsoleWatchdogSetActions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogSetActions";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogSetActions.apr__ConsoleWatchdogSetActions = apr__ConsoleWatchdogSetActions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogSetActions(soap, &soap_tmp___apr__ConsoleWatchdogSetActions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogSetActions(soap, &soap_tmp___apr__ConsoleWatchdogSetActions, "-apr:ConsoleWatchdogSetActions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogSetActions(soap, &soap_tmp___apr__ConsoleWatchdogSetActions, "-apr:ConsoleWatchdogSetActions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogSetActionsResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogSetActionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogSetActionsResponse->soap_get(soap, "apr:ConsoleWatchdogSetActionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogGetActions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogGetActions *apr__ConsoleWatchdogGetActions, _apr__ConsoleWatchdogGetActionsResponse *apr__ConsoleWatchdogGetActionsResponse)
{	struct __apr__ConsoleWatchdogGetActions soap_tmp___apr__ConsoleWatchdogGetActions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogGetActions";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogGetActions.apr__ConsoleWatchdogGetActions = apr__ConsoleWatchdogGetActions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogGetActions(soap, &soap_tmp___apr__ConsoleWatchdogGetActions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogGetActions(soap, &soap_tmp___apr__ConsoleWatchdogGetActions, "-apr:ConsoleWatchdogGetActions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogGetActions(soap, &soap_tmp___apr__ConsoleWatchdogGetActions, "-apr:ConsoleWatchdogGetActions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogGetActionsResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogGetActionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogGetActionsResponse->soap_get(soap, "apr:ConsoleWatchdogGetActionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogSetCbPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogSetCbPolicy *apr__ConsoleWatchdogSetCbPolicy, _apr__ConsoleWatchdogSetCbPolicyResponse *apr__ConsoleWatchdogSetCbPolicyResponse)
{	struct __apr__ConsoleWatchdogSetCbPolicy soap_tmp___apr__ConsoleWatchdogSetCbPolicy;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogSetCbPolicy";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogSetCbPolicy.apr__ConsoleWatchdogSetCbPolicy = apr__ConsoleWatchdogSetCbPolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogSetCbPolicy(soap, &soap_tmp___apr__ConsoleWatchdogSetCbPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogSetCbPolicy(soap, &soap_tmp___apr__ConsoleWatchdogSetCbPolicy, "-apr:ConsoleWatchdogSetCbPolicy", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogSetCbPolicy(soap, &soap_tmp___apr__ConsoleWatchdogSetCbPolicy, "-apr:ConsoleWatchdogSetCbPolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogSetCbPolicyResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogSetCbPolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogSetCbPolicyResponse->soap_get(soap, "apr:ConsoleWatchdogSetCbPolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogGetCbPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogGetCbPolicy *apr__ConsoleWatchdogGetCbPolicy, _apr__ConsoleWatchdogGetCbPolicyResponse *apr__ConsoleWatchdogGetCbPolicyResponse)
{	struct __apr__ConsoleWatchdogGetCbPolicy soap_tmp___apr__ConsoleWatchdogGetCbPolicy;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogGetCbPolicy";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogGetCbPolicy.apr__ConsoleWatchdogGetCbPolicy = apr__ConsoleWatchdogGetCbPolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogGetCbPolicy(soap, &soap_tmp___apr__ConsoleWatchdogGetCbPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogGetCbPolicy(soap, &soap_tmp___apr__ConsoleWatchdogGetCbPolicy, "-apr:ConsoleWatchdogGetCbPolicy", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogGetCbPolicy(soap, &soap_tmp___apr__ConsoleWatchdogGetCbPolicy, "-apr:ConsoleWatchdogGetCbPolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogGetCbPolicyResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogGetCbPolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogGetCbPolicyResponse->soap_get(soap, "apr:ConsoleWatchdogGetCbPolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogQueryCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogQueryCapabilities *apr__ConsoleWatchdogQueryCapabilities, _apr__ConsoleWatchdogQueryCapabilitiesResponse *apr__ConsoleWatchdogQueryCapabilitiesResponse)
{	struct __apr__ConsoleWatchdogQueryCapabilities soap_tmp___apr__ConsoleWatchdogQueryCapabilities;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/AgentWatchdogRemoteService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/AgentWatchdogRemote/ConsoleWatchdogQueryCapabilities";
	soap->encodingStyle = NULL;
	soap_tmp___apr__ConsoleWatchdogQueryCapabilities.apr__ConsoleWatchdogQueryCapabilities = apr__ConsoleWatchdogQueryCapabilities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___apr__ConsoleWatchdogQueryCapabilities(soap, &soap_tmp___apr__ConsoleWatchdogQueryCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___apr__ConsoleWatchdogQueryCapabilities(soap, &soap_tmp___apr__ConsoleWatchdogQueryCapabilities, "-apr:ConsoleWatchdogQueryCapabilities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___apr__ConsoleWatchdogQueryCapabilities(soap, &soap_tmp___apr__ConsoleWatchdogQueryCapabilities, "-apr:ConsoleWatchdogQueryCapabilities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!apr__ConsoleWatchdogQueryCapabilitiesResponse)
		return soap_closesock(soap);
	apr__ConsoleWatchdogQueryCapabilitiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	apr__ConsoleWatchdogQueryCapabilitiesResponse->soap_get(soap, "apr:ConsoleWatchdogQueryCapabilitiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyCreate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyCreate *cb__CbPolicyCreate, _cb__CbPolicyCreateResponse *cb__CbPolicyCreateResponse)
{	struct __cb__CbPolicyCreate soap_tmp___cb__CbPolicyCreate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyCreate";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyCreate.cb__CbPolicyCreate = cb__CbPolicyCreate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyCreate(soap, &soap_tmp___cb__CbPolicyCreate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyCreate(soap, &soap_tmp___cb__CbPolicyCreate, "-cb:CbPolicyCreate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyCreate(soap, &soap_tmp___cb__CbPolicyCreate, "-cb:CbPolicyCreate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyCreateResponse)
		return soap_closesock(soap);
	cb__CbPolicyCreateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyCreateResponse->soap_get(soap, "cb:CbPolicyCreateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyGet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyGet *cb__CbPolicyGet, _cb__CbPolicyGetResponse *cb__CbPolicyGetResponse)
{	struct __cb__CbPolicyGet soap_tmp___cb__CbPolicyGet;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyGet";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyGet.cb__CbPolicyGet = cb__CbPolicyGet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyGet(soap, &soap_tmp___cb__CbPolicyGet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyGet(soap, &soap_tmp___cb__CbPolicyGet, "-cb:CbPolicyGet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyGet(soap, &soap_tmp___cb__CbPolicyGet, "-cb:CbPolicyGet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyGetResponse)
		return soap_closesock(soap);
	cb__CbPolicyGetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyGetResponse->soap_get(soap, "cb:CbPolicyGetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyDelete(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyDelete *cb__CbPolicyDelete, _cb__CbPolicyDeleteResponse *cb__CbPolicyDeleteResponse)
{	struct __cb__CbPolicyDelete soap_tmp___cb__CbPolicyDelete;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyDelete";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyDelete.cb__CbPolicyDelete = cb__CbPolicyDelete;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyDelete(soap, &soap_tmp___cb__CbPolicyDelete);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyDelete(soap, &soap_tmp___cb__CbPolicyDelete, "-cb:CbPolicyDelete", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyDelete(soap, &soap_tmp___cb__CbPolicyDelete, "-cb:CbPolicyDelete", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyDeleteResponse)
		return soap_closesock(soap);
	cb__CbPolicyDeleteResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyDeleteResponse->soap_get(soap, "cb:CbPolicyDeleteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyEnumerate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyEnumerate *cb__CbPolicyEnumerate, _cb__CbPolicyEnumerateResponse *cb__CbPolicyEnumerateResponse)
{	struct __cb__CbPolicyEnumerate soap_tmp___cb__CbPolicyEnumerate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyEnumerate";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyEnumerate.cb__CbPolicyEnumerate = cb__CbPolicyEnumerate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyEnumerate(soap, &soap_tmp___cb__CbPolicyEnumerate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyEnumerate(soap, &soap_tmp___cb__CbPolicyEnumerate, "-cb:CbPolicyEnumerate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyEnumerate(soap, &soap_tmp___cb__CbPolicyEnumerate, "-cb:CbPolicyEnumerate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyEnumerateResponse)
		return soap_closesock(soap);
	cb__CbPolicyEnumerateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyEnumerateResponse->soap_get(soap, "cb:CbPolicyEnumerateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyEnable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyEnable *cb__CbPolicyEnable, _cb__CbPolicyEnableResponse *cb__CbPolicyEnableResponse)
{	struct __cb__CbPolicyEnable soap_tmp___cb__CbPolicyEnable;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyEnable";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyEnable.cb__CbPolicyEnable = cb__CbPolicyEnable;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyEnable(soap, &soap_tmp___cb__CbPolicyEnable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyEnable(soap, &soap_tmp___cb__CbPolicyEnable, "-cb:CbPolicyEnable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyEnable(soap, &soap_tmp___cb__CbPolicyEnable, "-cb:CbPolicyEnable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyEnableResponse)
		return soap_closesock(soap);
	cb__CbPolicyEnableResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyEnableResponse->soap_get(soap, "cb:CbPolicyEnableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyDisable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyDisable *cb__CbPolicyDisable, _cb__CbPolicyDisableResponse *cb__CbPolicyDisableResponse)
{	struct __cb__CbPolicyDisable soap_tmp___cb__CbPolicyDisable;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyDisable";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyDisable.cb__CbPolicyDisable = cb__CbPolicyDisable;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyDisable(soap, &soap_tmp___cb__CbPolicyDisable);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyDisable(soap, &soap_tmp___cb__CbPolicyDisable, "-cb:CbPolicyDisable", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyDisable(soap, &soap_tmp___cb__CbPolicyDisable, "-cb:CbPolicyDisable", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyDisableResponse)
		return soap_closesock(soap);
	cb__CbPolicyDisableResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyDisableResponse->soap_get(soap, "cb:CbPolicyDisableResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyGetEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyGetEnabled *cb__CbPolicyGetEnabled, _cb__CbPolicyGetEnabledResponse *cb__CbPolicyGetEnabledResponse)
{	struct __cb__CbPolicyGetEnabled soap_tmp___cb__CbPolicyGetEnabled;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyGetEnabled";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyGetEnabled.cb__CbPolicyGetEnabled = cb__CbPolicyGetEnabled;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyGetEnabled(soap, &soap_tmp___cb__CbPolicyGetEnabled);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyGetEnabled(soap, &soap_tmp___cb__CbPolicyGetEnabled, "-cb:CbPolicyGetEnabled", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyGetEnabled(soap, &soap_tmp___cb__CbPolicyGetEnabled, "-cb:CbPolicyGetEnabled", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyGetEnabledResponse)
		return soap_closesock(soap);
	cb__CbPolicyGetEnabledResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyGetEnabledResponse->soap_get(soap, "cb:CbPolicyGetEnabledResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyGetActiveStatistics(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyGetActiveStatistics *cb__CbPolicyGetActiveStatistics, _cb__CbPolicyGetActiveStatisticsResponse *cb__CbPolicyGetActiveStatisticsResponse)
{	struct __cb__CbPolicyGetActiveStatistics soap_tmp___cb__CbPolicyGetActiveStatistics;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbPolicyGetActiveStatistics";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbPolicyGetActiveStatistics.cb__CbPolicyGetActiveStatistics = cb__CbPolicyGetActiveStatistics;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbPolicyGetActiveStatistics(soap, &soap_tmp___cb__CbPolicyGetActiveStatistics);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbPolicyGetActiveStatistics(soap, &soap_tmp___cb__CbPolicyGetActiveStatistics, "-cb:CbPolicyGetActiveStatistics", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbPolicyGetActiveStatistics(soap, &soap_tmp___cb__CbPolicyGetActiveStatistics, "-cb:CbPolicyGetActiveStatistics", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbPolicyGetActiveStatisticsResponse)
		return soap_closesock(soap);
	cb__CbPolicyGetActiveStatisticsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbPolicyGetActiveStatisticsResponse->soap_get(soap, "cb:CbPolicyGetActiveStatisticsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterCreate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterCreate *cb__CbFilterCreate, _cb__CbFilterCreateResponse *cb__CbFilterCreateResponse)
{	struct __cb__CbFilterCreate soap_tmp___cb__CbFilterCreate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbFilterCreate";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbFilterCreate.cb__CbFilterCreate = cb__CbFilterCreate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbFilterCreate(soap, &soap_tmp___cb__CbFilterCreate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbFilterCreate(soap, &soap_tmp___cb__CbFilterCreate, "-cb:CbFilterCreate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbFilterCreate(soap, &soap_tmp___cb__CbFilterCreate, "-cb:CbFilterCreate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbFilterCreateResponse)
		return soap_closesock(soap);
	cb__CbFilterCreateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbFilterCreateResponse->soap_get(soap, "cb:CbFilterCreateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterGet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterGet *cb__CbFilterGet, _cb__CbFilterGetResponse *cb__CbFilterGetResponse)
{	struct __cb__CbFilterGet soap_tmp___cb__CbFilterGet;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbFilterGet";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbFilterGet.cb__CbFilterGet = cb__CbFilterGet;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbFilterGet(soap, &soap_tmp___cb__CbFilterGet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbFilterGet(soap, &soap_tmp___cb__CbFilterGet, "-cb:CbFilterGet", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbFilterGet(soap, &soap_tmp___cb__CbFilterGet, "-cb:CbFilterGet", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbFilterGetResponse)
		return soap_closesock(soap);
	cb__CbFilterGetResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbFilterGetResponse->soap_get(soap, "cb:CbFilterGetResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterDelete(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterDelete *cb__CbFilterDelete, _cb__CbFilterDeleteResponse *cb__CbFilterDeleteResponse)
{	struct __cb__CbFilterDelete soap_tmp___cb__CbFilterDelete;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbFilterDelete";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbFilterDelete.cb__CbFilterDelete = cb__CbFilterDelete;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbFilterDelete(soap, &soap_tmp___cb__CbFilterDelete);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbFilterDelete(soap, &soap_tmp___cb__CbFilterDelete, "-cb:CbFilterDelete", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbFilterDelete(soap, &soap_tmp___cb__CbFilterDelete, "-cb:CbFilterDelete", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbFilterDeleteResponse)
		return soap_closesock(soap);
	cb__CbFilterDeleteResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbFilterDeleteResponse->soap_get(soap, "cb:CbFilterDeleteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterEnumerate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterEnumerate *cb__CbFilterEnumerate, _cb__CbFilterEnumerateResponse *cb__CbFilterEnumerateResponse)
{	struct __cb__CbFilterEnumerate soap_tmp___cb__CbFilterEnumerate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbFilterEnumerate";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbFilterEnumerate.cb__CbFilterEnumerate = cb__CbFilterEnumerate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbFilterEnumerate(soap, &soap_tmp___cb__CbFilterEnumerate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbFilterEnumerate(soap, &soap_tmp___cb__CbFilterEnumerate, "-cb:CbFilterEnumerate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbFilterEnumerate(soap, &soap_tmp___cb__CbFilterEnumerate, "-cb:CbFilterEnumerate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbFilterEnumerateResponse)
		return soap_closesock(soap);
	cb__CbFilterEnumerateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbFilterEnumerateResponse->soap_get(soap, "cb:CbFilterEnumerateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbQueryCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbQueryCapabilities *cb__CbQueryCapabilities, _cb__CbQueryCapabilitiesResponse *cb__CbQueryCapabilitiesResponse)
{	struct __cb__CbQueryCapabilities soap_tmp___cb__CbQueryCapabilities;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2004/12/management/PC/CircuitBreaker/CbQueryCapabilities";
	soap->encodingStyle = NULL;
	soap_tmp___cb__CbQueryCapabilities.cb__CbQueryCapabilities = cb__CbQueryCapabilities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__CbQueryCapabilities(soap, &soap_tmp___cb__CbQueryCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__CbQueryCapabilities(soap, &soap_tmp___cb__CbQueryCapabilities, "-cb:CbQueryCapabilities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__CbQueryCapabilities(soap, &soap_tmp___cb__CbQueryCapabilities, "-cb:CbQueryCapabilities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__CbQueryCapabilitiesResponse)
		return soap_closesock(soap);
	cb__CbQueryCapabilitiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__CbQueryCapabilitiesResponse->soap_get(soap, "cb:CbQueryCapabilitiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__SetHcbOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__SetHcbOptions *cb__SetHcbOptions, _cb__SetHcbOptionsResponse *cb__SetHcbOptionsResponse)
{	struct __cb__SetHcbOptions soap_tmp___cb__SetHcbOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2006/01/management/PC/CircuitBreaker/SetHcbOptions";
	soap->encodingStyle = NULL;
	soap_tmp___cb__SetHcbOptions.cb__SetHcbOptions = cb__SetHcbOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__SetHcbOptions(soap, &soap_tmp___cb__SetHcbOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__SetHcbOptions(soap, &soap_tmp___cb__SetHcbOptions, "-cb:SetHcbOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__SetHcbOptions(soap, &soap_tmp___cb__SetHcbOptions, "-cb:SetHcbOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__SetHcbOptionsResponse)
		return soap_closesock(soap);
	cb__SetHcbOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__SetHcbOptionsResponse->soap_get(soap, "cb:SetHcbOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__GetHcbOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__GetHcbOptions *cb__GetHcbOptions, _cb__GetHcbOptionsResponse *cb__GetHcbOptionsResponse)
{	struct __cb__GetHcbOptions soap_tmp___cb__GetHcbOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2006/01/management/PC/CircuitBreaker/GetHcbOptions";
	soap->encodingStyle = NULL;
	soap_tmp___cb__GetHcbOptions.cb__GetHcbOptions = cb__GetHcbOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__GetHcbOptions(soap, &soap_tmp___cb__GetHcbOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__GetHcbOptions(soap, &soap_tmp___cb__GetHcbOptions, "-cb:GetHcbOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__GetHcbOptions(soap, &soap_tmp___cb__GetHcbOptions, "-cb:GetHcbOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__GetHcbOptionsResponse)
		return soap_closesock(soap);
	cb__GetHcbOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__GetHcbOptionsResponse->soap_get(soap, "cb:GetHcbOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__ClearHcbState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__ClearHcbState *cb__ClearHcbState, _cb__ClearHcbStateResponse *cb__ClearHcbStateResponse)
{	struct __cb__ClearHcbState soap_tmp___cb__ClearHcbState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2006/01/management/PC/CircuitBreaker/ClearHcbState";
	soap->encodingStyle = NULL;
	soap_tmp___cb__ClearHcbState.cb__ClearHcbState = cb__ClearHcbState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__ClearHcbState(soap, &soap_tmp___cb__ClearHcbState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__ClearHcbState(soap, &soap_tmp___cb__ClearHcbState, "-cb:ClearHcbState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__ClearHcbState(soap, &soap_tmp___cb__ClearHcbState, "-cb:ClearHcbState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__ClearHcbStateResponse)
		return soap_closesock(soap);
	cb__ClearHcbStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__ClearHcbStateResponse->soap_get(soap, "cb:ClearHcbStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__GetHcbState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__GetHcbState *cb__GetHcbState, _cb__GetHcbStateResponse *cb__GetHcbStateResponse)
{	struct __cb__GetHcbState soap_tmp___cb__GetHcbState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/CircuitBreakerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/2006/01/management/PC/CircuitBreaker/GetHcbState";
	soap->encodingStyle = NULL;
	soap_tmp___cb__GetHcbState.cb__GetHcbState = cb__GetHcbState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___cb__GetHcbState(soap, &soap_tmp___cb__GetHcbState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___cb__GetHcbState(soap, &soap_tmp___cb__GetHcbState, "-cb:GetHcbState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___cb__GetHcbState(soap, &soap_tmp___cb__GetHcbState, "-cb:GetHcbState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!cb__GetHcbStateResponse)
		return soap_closesock(soap);
	cb__GetHcbStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	cb__GetHcbStateResponse->soap_get(soap, "cb:GetHcbStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateEventFilters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateEventFilters *emi__EnumerateEventFilters, _emi__EnumerateEventFiltersResponse *emi__EnumerateEventFiltersResponse)
{	struct __emi__EnumerateEventFilters soap_tmp___emi__EnumerateEventFilters;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/EnumerateEventFilters";
	soap->encodingStyle = NULL;
	soap_tmp___emi__EnumerateEventFilters.emi__EnumerateEventFilters = emi__EnumerateEventFilters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__EnumerateEventFilters(soap, &soap_tmp___emi__EnumerateEventFilters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__EnumerateEventFilters(soap, &soap_tmp___emi__EnumerateEventFilters, "-emi:EnumerateEventFilters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__EnumerateEventFilters(soap, &soap_tmp___emi__EnumerateEventFilters, "-emi:EnumerateEventFilters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__EnumerateEventFiltersResponse)
		return soap_closesock(soap);
	emi__EnumerateEventFiltersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__EnumerateEventFiltersResponse->soap_get(soap, "emi:EnumerateEventFiltersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetAlertSubscription(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetAlertSubscription *emi__GetAlertSubscription, _emi__GetAlertSubscriptionResponse *emi__GetAlertSubscriptionResponse)
{	struct __emi__GetAlertSubscription soap_tmp___emi__GetAlertSubscription;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/GetAlertSubscription";
	soap->encodingStyle = NULL;
	soap_tmp___emi__GetAlertSubscription.emi__GetAlertSubscription = emi__GetAlertSubscription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__GetAlertSubscription(soap, &soap_tmp___emi__GetAlertSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__GetAlertSubscription(soap, &soap_tmp___emi__GetAlertSubscription, "-emi:GetAlertSubscription", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__GetAlertSubscription(soap, &soap_tmp___emi__GetAlertSubscription, "-emi:GetAlertSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__GetAlertSubscriptionResponse)
		return soap_closesock(soap);
	emi__GetAlertSubscriptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__GetAlertSubscriptionResponse->soap_get(soap, "emi:GetAlertSubscriptionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SetAlertCommunityString(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SetAlertCommunityString *emi__SetAlertCommunityString, _emi__SetAlertCommunityStringResponse *emi__SetAlertCommunityStringResponse)
{	struct __emi__SetAlertCommunityString soap_tmp___emi__SetAlertCommunityString;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/SetAlertCommunityString";
	soap->encodingStyle = NULL;
	soap_tmp___emi__SetAlertCommunityString.emi__SetAlertCommunityString = emi__SetAlertCommunityString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__SetAlertCommunityString(soap, &soap_tmp___emi__SetAlertCommunityString);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__SetAlertCommunityString(soap, &soap_tmp___emi__SetAlertCommunityString, "-emi:SetAlertCommunityString", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__SetAlertCommunityString(soap, &soap_tmp___emi__SetAlertCommunityString, "-emi:SetAlertCommunityString", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__SetAlertCommunityStringResponse)
		return soap_closesock(soap);
	emi__SetAlertCommunityStringResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__SetAlertCommunityStringResponse->soap_get(soap, "emi:SetAlertCommunityStringResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetAlertCommunityString(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetAlertCommunityString *emi__GetAlertCommunityString, _emi__GetAlertCommunityStringResponse *emi__GetAlertCommunityStringResponse)
{	struct __emi__GetAlertCommunityString soap_tmp___emi__GetAlertCommunityString;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/GetAlertCommunityString";
	soap->encodingStyle = NULL;
	soap_tmp___emi__GetAlertCommunityString.emi__GetAlertCommunityString = emi__GetAlertCommunityString;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__GetAlertCommunityString(soap, &soap_tmp___emi__GetAlertCommunityString);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__GetAlertCommunityString(soap, &soap_tmp___emi__GetAlertCommunityString, "-emi:GetAlertCommunityString", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__GetAlertCommunityString(soap, &soap_tmp___emi__GetAlertCommunityString, "-emi:GetAlertCommunityString", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__GetAlertCommunityStringResponse)
		return soap_closesock(soap);
	emi__GetAlertCommunityStringResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__GetAlertCommunityStringResponse->soap_get(soap, "emi:GetAlertCommunityStringResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__AddEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__AddEventFilter *emi__AddEventFilter, _emi__AddEventFilterResponse *emi__AddEventFilterResponse)
{	struct __emi__AddEventFilter soap_tmp___emi__AddEventFilter;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/AddEventFilter";
	soap->encodingStyle = NULL;
	soap_tmp___emi__AddEventFilter.emi__AddEventFilter = emi__AddEventFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__AddEventFilter(soap, &soap_tmp___emi__AddEventFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__AddEventFilter(soap, &soap_tmp___emi__AddEventFilter, "-emi:AddEventFilter", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__AddEventFilter(soap, &soap_tmp___emi__AddEventFilter, "-emi:AddEventFilter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__AddEventFilterResponse)
		return soap_closesock(soap);
	emi__AddEventFilterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__AddEventFilterResponse->soap_get(soap, "emi:AddEventFilterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SubscribeForAlert(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SubscribeForAlert *emi__SubscribeForAlert, _emi__SubscribeForAlertResponse *emi__SubscribeForAlertResponse)
{	struct __emi__SubscribeForAlert soap_tmp___emi__SubscribeForAlert;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/SubscribeForAlert";
	soap->encodingStyle = NULL;
	soap_tmp___emi__SubscribeForAlert.emi__SubscribeForAlert = emi__SubscribeForAlert;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__SubscribeForAlert(soap, &soap_tmp___emi__SubscribeForAlert);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__SubscribeForAlert(soap, &soap_tmp___emi__SubscribeForAlert, "-emi:SubscribeForAlert", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__SubscribeForAlert(soap, &soap_tmp___emi__SubscribeForAlert, "-emi:SubscribeForAlert", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__SubscribeForAlertResponse)
		return soap_closesock(soap);
	emi__SubscribeForAlertResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__SubscribeForAlertResponse->soap_get(soap, "emi:SubscribeForAlertResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateAlertSubscriptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateAlertSubscriptions *emi__EnumerateAlertSubscriptions, _emi__EnumerateAlertSubscriptionsResponse *emi__EnumerateAlertSubscriptionsResponse)
{	struct __emi__EnumerateAlertSubscriptions soap_tmp___emi__EnumerateAlertSubscriptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/EnumerateAlertSubscriptions";
	soap->encodingStyle = NULL;
	soap_tmp___emi__EnumerateAlertSubscriptions.emi__EnumerateAlertSubscriptions = emi__EnumerateAlertSubscriptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__EnumerateAlertSubscriptions(soap, &soap_tmp___emi__EnumerateAlertSubscriptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__EnumerateAlertSubscriptions(soap, &soap_tmp___emi__EnumerateAlertSubscriptions, "-emi:EnumerateAlertSubscriptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__EnumerateAlertSubscriptions(soap, &soap_tmp___emi__EnumerateAlertSubscriptions, "-emi:EnumerateAlertSubscriptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__EnumerateAlertSubscriptionsResponse)
		return soap_closesock(soap);
	emi__EnumerateAlertSubscriptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__EnumerateAlertSubscriptionsResponse->soap_get(soap, "emi:EnumerateAlertSubscriptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateAlertPolicies(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateAlertPolicies *emi__EnumerateAlertPolicies, _emi__EnumerateAlertPoliciesResponse *emi__EnumerateAlertPoliciesResponse)
{	struct __emi__EnumerateAlertPolicies soap_tmp___emi__EnumerateAlertPolicies;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/EnumerateAlertPolicies";
	soap->encodingStyle = NULL;
	soap_tmp___emi__EnumerateAlertPolicies.emi__EnumerateAlertPolicies = emi__EnumerateAlertPolicies;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__EnumerateAlertPolicies(soap, &soap_tmp___emi__EnumerateAlertPolicies);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__EnumerateAlertPolicies(soap, &soap_tmp___emi__EnumerateAlertPolicies, "-emi:EnumerateAlertPolicies", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__EnumerateAlertPolicies(soap, &soap_tmp___emi__EnumerateAlertPolicies, "-emi:EnumerateAlertPolicies", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__EnumerateAlertPoliciesResponse)
		return soap_closesock(soap);
	emi__EnumerateAlertPoliciesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__EnumerateAlertPoliciesResponse->soap_get(soap, "emi:EnumerateAlertPoliciesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__CancelAlertSubscription(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__CancelAlertSubscription *emi__CancelAlertSubscription, _emi__CancelAlertSubscriptionResponse *emi__CancelAlertSubscriptionResponse)
{	struct __emi__CancelAlertSubscription soap_tmp___emi__CancelAlertSubscription;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/CancelAlertSubscription";
	soap->encodingStyle = NULL;
	soap_tmp___emi__CancelAlertSubscription.emi__CancelAlertSubscription = emi__CancelAlertSubscription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__CancelAlertSubscription(soap, &soap_tmp___emi__CancelAlertSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__CancelAlertSubscription(soap, &soap_tmp___emi__CancelAlertSubscription, "-emi:CancelAlertSubscription", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__CancelAlertSubscription(soap, &soap_tmp___emi__CancelAlertSubscription, "-emi:CancelAlertSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__CancelAlertSubscriptionResponse)
		return soap_closesock(soap);
	emi__CancelAlertSubscriptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__CancelAlertSubscriptionResponse->soap_get(soap, "emi:CancelAlertSubscriptionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetEventFilter *emi__GetEventFilter, _emi__GetEventFilterResponse *emi__GetEventFilterResponse)
{	struct __emi__GetEventFilter soap_tmp___emi__GetEventFilter;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/GetEventFilter";
	soap->encodingStyle = NULL;
	soap_tmp___emi__GetEventFilter.emi__GetEventFilter = emi__GetEventFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__GetEventFilter(soap, &soap_tmp___emi__GetEventFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__GetEventFilter(soap, &soap_tmp___emi__GetEventFilter, "-emi:GetEventFilter", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__GetEventFilter(soap, &soap_tmp___emi__GetEventFilter, "-emi:GetEventFilter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__GetEventFilterResponse)
		return soap_closesock(soap);
	emi__GetEventFilterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__GetEventFilterResponse->soap_get(soap, "emi:GetEventFilterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__UpdateEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__UpdateEventFilter *emi__UpdateEventFilter, _emi__UpdateEventFilterResponse *emi__UpdateEventFilterResponse)
{	struct __emi__UpdateEventFilter soap_tmp___emi__UpdateEventFilter;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/UpdateEventFilter";
	soap->encodingStyle = NULL;
	soap_tmp___emi__UpdateEventFilter.emi__UpdateEventFilter = emi__UpdateEventFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__UpdateEventFilter(soap, &soap_tmp___emi__UpdateEventFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__UpdateEventFilter(soap, &soap_tmp___emi__UpdateEventFilter, "-emi:UpdateEventFilter", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__UpdateEventFilter(soap, &soap_tmp___emi__UpdateEventFilter, "-emi:UpdateEventFilter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__UpdateEventFilterResponse)
		return soap_closesock(soap);
	emi__UpdateEventFilterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__UpdateEventFilterResponse->soap_get(soap, "emi:UpdateEventFilterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__RemoveEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__RemoveEventFilter *emi__RemoveEventFilter, _emi__RemoveEventFilterResponse *emi__RemoveEventFilterResponse)
{	struct __emi__RemoveEventFilter soap_tmp___emi__RemoveEventFilter;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/RemoveEventFilter";
	soap->encodingStyle = NULL;
	soap_tmp___emi__RemoveEventFilter.emi__RemoveEventFilter = emi__RemoveEventFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__RemoveEventFilter(soap, &soap_tmp___emi__RemoveEventFilter);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__RemoveEventFilter(soap, &soap_tmp___emi__RemoveEventFilter, "-emi:RemoveEventFilter", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__RemoveEventFilter(soap, &soap_tmp___emi__RemoveEventFilter, "-emi:RemoveEventFilter", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__RemoveEventFilterResponse)
		return soap_closesock(soap);
	emi__RemoveEventFilterResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__RemoveEventFilterResponse->soap_get(soap, "emi:RemoveEventFilterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetEventLogStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetEventLogStatus *emi__GetEventLogStatus, _emi__GetEventLogStatusResponse *emi__GetEventLogStatusResponse)
{	struct __emi__GetEventLogStatus soap_tmp___emi__GetEventLogStatus;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/GetEventLogStatus";
	soap->encodingStyle = NULL;
	soap_tmp___emi__GetEventLogStatus.emi__GetEventLogStatus = emi__GetEventLogStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__GetEventLogStatus(soap, &soap_tmp___emi__GetEventLogStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__GetEventLogStatus(soap, &soap_tmp___emi__GetEventLogStatus, "-emi:GetEventLogStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__GetEventLogStatus(soap, &soap_tmp___emi__GetEventLogStatus, "-emi:GetEventLogStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__GetEventLogStatusResponse)
		return soap_closesock(soap);
	emi__GetEventLogStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__GetEventLogStatusResponse->soap_get(soap, "emi:GetEventLogStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__ReadEventLogRecords(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__ReadEventLogRecords *emi__ReadEventLogRecords, _emi__ReadEventLogRecordsResponse *emi__ReadEventLogRecordsResponse)
{	struct __emi__ReadEventLogRecords soap_tmp___emi__ReadEventLogRecords;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/ReadEventLogRecords";
	soap->encodingStyle = NULL;
	soap_tmp___emi__ReadEventLogRecords.emi__ReadEventLogRecords = emi__ReadEventLogRecords;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__ReadEventLogRecords(soap, &soap_tmp___emi__ReadEventLogRecords);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__ReadEventLogRecords(soap, &soap_tmp___emi__ReadEventLogRecords, "-emi:ReadEventLogRecords", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__ReadEventLogRecords(soap, &soap_tmp___emi__ReadEventLogRecords, "-emi:ReadEventLogRecords", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__ReadEventLogRecordsResponse)
		return soap_closesock(soap);
	emi__ReadEventLogRecordsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__ReadEventLogRecordsResponse->soap_get(soap, "emi:ReadEventLogRecordsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__ClearEventLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__ClearEventLog *emi__ClearEventLog, _emi__ClearEventLogResponse *emi__ClearEventLogResponse)
{	struct __emi__ClearEventLog soap_tmp___emi__ClearEventLog;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/ClearEventLog";
	soap->encodingStyle = NULL;
	soap_tmp___emi__ClearEventLog.emi__ClearEventLog = emi__ClearEventLog;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__ClearEventLog(soap, &soap_tmp___emi__ClearEventLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__ClearEventLog(soap, &soap_tmp___emi__ClearEventLog, "-emi:ClearEventLog", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__ClearEventLog(soap, &soap_tmp___emi__ClearEventLog, "-emi:ClearEventLog", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__ClearEventLogResponse)
		return soap_closesock(soap);
	emi__ClearEventLogResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__ClearEventLogResponse->soap_get(soap, "emi:ClearEventLogResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__FreezeEventLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__FreezeEventLog *emi__FreezeEventLog, _emi__FreezeEventLogResponse *emi__FreezeEventLogResponse)
{	struct __emi__FreezeEventLog soap_tmp___emi__FreezeEventLog;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2004/01/FreezeEventLog";
	soap->encodingStyle = NULL;
	soap_tmp___emi__FreezeEventLog.emi__FreezeEventLog = emi__FreezeEventLog;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__FreezeEventLog(soap, &soap_tmp___emi__FreezeEventLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__FreezeEventLog(soap, &soap_tmp___emi__FreezeEventLog, "-emi:FreezeEventLog", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__FreezeEventLog(soap, &soap_tmp___emi__FreezeEventLog, "-emi:FreezeEventLog", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__FreezeEventLogResponse)
		return soap_closesock(soap);
	emi__FreezeEventLogResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__FreezeEventLogResponse->soap_get(soap, "emi:FreezeEventLogResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SetEventLogTimestampClock(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SetEventLogTimestampClock *emi__SetEventLogTimestampClock, _emi__SetEventLogTimestampClockResponse *emi__SetEventLogTimestampClockResponse)
{	struct __emi__SetEventLogTimestampClock soap_tmp___emi__SetEventLogTimestampClock;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/ptai/2004/01/SetEventLogTimestampClock";
	soap->encodingStyle = NULL;
	soap_tmp___emi__SetEventLogTimestampClock.emi__SetEventLogTimestampClock = emi__SetEventLogTimestampClock;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__SetEventLogTimestampClock(soap, &soap_tmp___emi__SetEventLogTimestampClock);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__SetEventLogTimestampClock(soap, &soap_tmp___emi__SetEventLogTimestampClock, "-emi:SetEventLogTimestampClock", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__SetEventLogTimestampClock(soap, &soap_tmp___emi__SetEventLogTimestampClock, "-emi:SetEventLogTimestampClock", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__SetEventLogTimestampClockResponse)
		return soap_closesock(soap);
	emi__SetEventLogTimestampClockResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__SetEventLogTimestampClockResponse->soap_get(soap, "emi:SetEventLogTimestampClockResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetEventLogTimestampClock(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetEventLogTimestampClock *emi__GetEventLogTimestampClock, _emi__GetEventLogTimestampClockResponse *emi__GetEventLogTimestampClockResponse)
{	struct __emi__GetEventLogTimestampClock soap_tmp___emi__GetEventLogTimestampClock;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/ptai/2004/01/GetEventLogTimestampClock";
	soap->encodingStyle = NULL;
	soap_tmp___emi__GetEventLogTimestampClock.emi__GetEventLogTimestampClock = emi__GetEventLogTimestampClock;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__GetEventLogTimestampClock(soap, &soap_tmp___emi__GetEventLogTimestampClock);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__GetEventLogTimestampClock(soap, &soap_tmp___emi__GetEventLogTimestampClock, "-emi:GetEventLogTimestampClock", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__GetEventLogTimestampClock(soap, &soap_tmp___emi__GetEventLogTimestampClock, "-emi:GetEventLogTimestampClock", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__GetEventLogTimestampClockResponse)
		return soap_closesock(soap);
	emi__GetEventLogTimestampClockResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__GetEventLogTimestampClockResponse->soap_get(soap, "emi:GetEventLogTimestampClockResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateSensors(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateSensors *emi__EnumerateSensors, _emi__EnumerateSensorsResponse *emi__EnumerateSensorsResponse)
{	struct __emi__EnumerateSensors soap_tmp___emi__EnumerateSensors;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/ptai/2004/01/EnumerateSensors";
	soap->encodingStyle = NULL;
	soap_tmp___emi__EnumerateSensors.emi__EnumerateSensors = emi__EnumerateSensors;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__EnumerateSensors(soap, &soap_tmp___emi__EnumerateSensors);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__EnumerateSensors(soap, &soap_tmp___emi__EnumerateSensors, "-emi:EnumerateSensors", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__EnumerateSensors(soap, &soap_tmp___emi__EnumerateSensors, "-emi:EnumerateSensors", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__EnumerateSensorsResponse)
		return soap_closesock(soap);
	emi__EnumerateSensorsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__EnumerateSensorsResponse->soap_get(soap, "emi:EnumerateSensorsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetSensorAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetSensorAttributes *emi__GetSensorAttributes, _emi__GetSensorAttributesResponse *emi__GetSensorAttributesResponse)
{	struct __emi__GetSensorAttributes soap_tmp___emi__GetSensorAttributes;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/ptai/2004/01/GetSensorAttributes";
	soap->encodingStyle = NULL;
	soap_tmp___emi__GetSensorAttributes.emi__GetSensorAttributes = emi__GetSensorAttributes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__GetSensorAttributes(soap, &soap_tmp___emi__GetSensorAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__GetSensorAttributes(soap, &soap_tmp___emi__GetSensorAttributes, "-emi:GetSensorAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__GetSensorAttributes(soap, &soap_tmp___emi__GetSensorAttributes, "-emi:GetSensorAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__GetSensorAttributesResponse)
		return soap_closesock(soap);
	emi__GetSensorAttributesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__GetSensorAttributesResponse->soap_get(soap, "emi:GetSensorAttributesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SubscribeForGeneralAlert(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SubscribeForGeneralAlert *emi__SubscribeForGeneralAlert, _emi__SubscribeForGeneralAlertResponse *emi__SubscribeForGeneralAlertResponse)
{	struct __emi__SubscribeForGeneralAlert soap_tmp___emi__SubscribeForGeneralAlert;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2006/01/SubscribeForGeneralAlert";
	soap->encodingStyle = NULL;
	soap_tmp___emi__SubscribeForGeneralAlert.emi__SubscribeForGeneralAlert = emi__SubscribeForGeneralAlert;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__SubscribeForGeneralAlert(soap, &soap_tmp___emi__SubscribeForGeneralAlert);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__SubscribeForGeneralAlert(soap, &soap_tmp___emi__SubscribeForGeneralAlert, "-emi:SubscribeForGeneralAlert", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__SubscribeForGeneralAlert(soap, &soap_tmp___emi__SubscribeForGeneralAlert, "-emi:SubscribeForGeneralAlert", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__SubscribeForGeneralAlertResponse)
		return soap_closesock(soap);
	emi__SubscribeForGeneralAlertResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__SubscribeForGeneralAlertResponse->soap_get(soap, "emi:SubscribeForGeneralAlertResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateGeneralAlertSubscriptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateGeneralAlertSubscriptions *emi__EnumerateGeneralAlertSubscriptions, _emi__EnumerateGeneralAlertSubscriptionsResponse *emi__EnumerateGeneralAlertSubscriptionsResponse)
{	struct __emi__EnumerateGeneralAlertSubscriptions soap_tmp___emi__EnumerateGeneralAlertSubscriptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2006/01/EnumerateGeneralAlertSubscriptions";
	soap->encodingStyle = NULL;
	soap_tmp___emi__EnumerateGeneralAlertSubscriptions.emi__EnumerateGeneralAlertSubscriptions = emi__EnumerateGeneralAlertSubscriptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__EnumerateGeneralAlertSubscriptions(soap, &soap_tmp___emi__EnumerateGeneralAlertSubscriptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__EnumerateGeneralAlertSubscriptions(soap, &soap_tmp___emi__EnumerateGeneralAlertSubscriptions, "-emi:EnumerateGeneralAlertSubscriptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__EnumerateGeneralAlertSubscriptions(soap, &soap_tmp___emi__EnumerateGeneralAlertSubscriptions, "-emi:EnumerateGeneralAlertSubscriptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__EnumerateGeneralAlertSubscriptionsResponse)
		return soap_closesock(soap);
	emi__EnumerateGeneralAlertSubscriptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__EnumerateGeneralAlertSubscriptionsResponse->soap_get(soap, "emi:EnumerateGeneralAlertSubscriptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetGeneralAlertSubscription(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetGeneralAlertSubscription *emi__GetGeneralAlertSubscription, _emi__GetGeneralAlertSubscriptionResponse *emi__GetGeneralAlertSubscriptionResponse)
{	struct __emi__GetGeneralAlertSubscription soap_tmp___emi__GetGeneralAlertSubscription;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/EventManagerService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/EventManager/2006/01/GetGeneralAlertSubscription";
	soap->encodingStyle = NULL;
	soap_tmp___emi__GetGeneralAlertSubscription.emi__GetGeneralAlertSubscription = emi__GetGeneralAlertSubscription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___emi__GetGeneralAlertSubscription(soap, &soap_tmp___emi__GetGeneralAlertSubscription);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___emi__GetGeneralAlertSubscription(soap, &soap_tmp___emi__GetGeneralAlertSubscription, "-emi:GetGeneralAlertSubscription", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___emi__GetGeneralAlertSubscription(soap, &soap_tmp___emi__GetGeneralAlertSubscription, "-emi:GetGeneralAlertSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!emi__GetGeneralAlertSubscriptionResponse)
		return soap_closesock(soap);
	emi__GetGeneralAlertSubscriptionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	emi__GetGeneralAlertSubscriptionResponse->soap_get(soap, "emi:GetGeneralAlertSubscriptionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___hwa__EnumerateAssetTypes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _hwa__EnumerateAssetTypes *hwa__EnumerateAssetTypes, _hwa__EnumerateAssetTypesResponse *hwa__EnumerateAssetTypesResponse)
{	struct __hwa__EnumerateAssetTypes soap_tmp___hwa__EnumerateAssetTypes;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/HardwareAssetService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/HardwareAsset/2004/01/EnumerateAssetTypes";
	soap->encodingStyle = NULL;
	soap_tmp___hwa__EnumerateAssetTypes.hwa__EnumerateAssetTypes = hwa__EnumerateAssetTypes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___hwa__EnumerateAssetTypes(soap, &soap_tmp___hwa__EnumerateAssetTypes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___hwa__EnumerateAssetTypes(soap, &soap_tmp___hwa__EnumerateAssetTypes, "-hwa:EnumerateAssetTypes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___hwa__EnumerateAssetTypes(soap, &soap_tmp___hwa__EnumerateAssetTypes, "-hwa:EnumerateAssetTypes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!hwa__EnumerateAssetTypesResponse)
		return soap_closesock(soap);
	hwa__EnumerateAssetTypesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	hwa__EnumerateAssetTypesResponse->soap_get(soap, "hwa:EnumerateAssetTypesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___hwa__GetAssetData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _hwa__GetAssetData *hwa__GetAssetData, _hwa__GetAssetDataResponse *hwa__GetAssetDataResponse)
{	struct __hwa__GetAssetData soap_tmp___hwa__GetAssetData;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/HardwareAssetService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/HardwareAsset/2004/01/GetAssetData";
	soap->encodingStyle = NULL;
	soap_tmp___hwa__GetAssetData.hwa__GetAssetData = hwa__GetAssetData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___hwa__GetAssetData(soap, &soap_tmp___hwa__GetAssetData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___hwa__GetAssetData(soap, &soap_tmp___hwa__GetAssetData, "-hwa:GetAssetData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___hwa__GetAssetData(soap, &soap_tmp___hwa__GetAssetData, "-hwa:GetAssetData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!hwa__GetAssetDataResponse)
		return soap_closesock(soap);
	hwa__GetAssetDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	hwa__GetAssetDataResponse->soap_get(soap, "hwa:GetAssetDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___idr__SetRedirectionListenerState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _idr__SetRedirectionListenerState *idr__SetRedirectionListenerState, _idr__SetRedirectionListenerStateResponse *idr__SetRedirectionListenerStateResponse)
{	struct __idr__SetRedirectionListenerState soap_tmp___idr__SetRedirectionListenerState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/RedirectionService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/Redirection/2004/01/SetRedirectionListenerState";
	soap->encodingStyle = NULL;
	soap_tmp___idr__SetRedirectionListenerState.idr__SetRedirectionListenerState = idr__SetRedirectionListenerState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___idr__SetRedirectionListenerState(soap, &soap_tmp___idr__SetRedirectionListenerState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___idr__SetRedirectionListenerState(soap, &soap_tmp___idr__SetRedirectionListenerState, "-idr:SetRedirectionListenerState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___idr__SetRedirectionListenerState(soap, &soap_tmp___idr__SetRedirectionListenerState, "-idr:SetRedirectionListenerState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!idr__SetRedirectionListenerStateResponse)
		return soap_closesock(soap);
	idr__SetRedirectionListenerStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	idr__SetRedirectionListenerStateResponse->soap_get(soap, "idr:SetRedirectionListenerStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___idr__GetRedirectionListenerState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _idr__GetRedirectionListenerState *idr__GetRedirectionListenerState, _idr__GetRedirectionListenerStateResponse *idr__GetRedirectionListenerStateResponse)
{	struct __idr__GetRedirectionListenerState soap_tmp___idr__GetRedirectionListenerState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/RedirectionService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/Redirection/2004/01/GetRedirectionListenerState";
	soap->encodingStyle = NULL;
	soap_tmp___idr__GetRedirectionListenerState.idr__GetRedirectionListenerState = idr__GetRedirectionListenerState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___idr__GetRedirectionListenerState(soap, &soap_tmp___idr__GetRedirectionListenerState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___idr__GetRedirectionListenerState(soap, &soap_tmp___idr__GetRedirectionListenerState, "-idr:GetRedirectionListenerState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___idr__GetRedirectionListenerState(soap, &soap_tmp___idr__GetRedirectionListenerState, "-idr:GetRedirectionListenerState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!idr__GetRedirectionListenerStateResponse)
		return soap_closesock(soap);
	idr__GetRedirectionListenerStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	idr__GetRedirectionListenerStateResponse->soap_get(soap, "idr:GetRedirectionListenerStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___idr__GetIderSessionLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _idr__GetIderSessionLog *idr__GetIderSessionLog, _idr__GetIderSessionLogResponse *idr__GetIderSessionLogResponse)
{	struct __idr__GetIderSessionLog soap_tmp___idr__GetIderSessionLog;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/RedirectionService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/Redirection/2004/01/GetIderSessionLog";
	soap->encodingStyle = NULL;
	soap_tmp___idr__GetIderSessionLog.idr__GetIderSessionLog = idr__GetIderSessionLog;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___idr__GetIderSessionLog(soap, &soap_tmp___idr__GetIderSessionLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___idr__GetIderSessionLog(soap, &soap_tmp___idr__GetIderSessionLog, "-idr:GetIderSessionLog", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___idr__GetIderSessionLog(soap, &soap_tmp___idr__GetIderSessionLog, "-idr:GetIderSessionLog", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!idr__GetIderSessionLogResponse)
		return soap_closesock(soap);
	idr__GetIderSessionLogResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	idr__GetIderSessionLogResponse->soap_get(soap, "idr:GetIderSessionLogResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetCoreVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetCoreVersion *inf__GetCoreVersion, _inf__GetCoreVersionResponse *inf__GetCoreVersionResponse)
{	struct __inf__GetCoreVersion soap_tmp___inf__GetCoreVersion;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetCoreVersion";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetCoreVersion.inf__GetCoreVersion = inf__GetCoreVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetCoreVersion(soap, &soap_tmp___inf__GetCoreVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetCoreVersion(soap, &soap_tmp___inf__GetCoreVersion, "-inf:GetCoreVersion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetCoreVersion(soap, &soap_tmp___inf__GetCoreVersion, "-inf:GetCoreVersion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetCoreVersionResponse)
		return soap_closesock(soap);
	inf__GetCoreVersionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetCoreVersionResponse->soap_get(soap, "inf:GetCoreVersionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetCodeVersions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetCodeVersions *inf__GetCodeVersions, _inf__GetCodeVersionsResponse *inf__GetCodeVersionsResponse)
{	struct __inf__GetCodeVersions soap_tmp___inf__GetCodeVersions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetCodeVersions";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetCodeVersions.inf__GetCodeVersions = inf__GetCodeVersions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetCodeVersions(soap, &soap_tmp___inf__GetCodeVersions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetCodeVersions(soap, &soap_tmp___inf__GetCodeVersions, "-inf:GetCodeVersions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetCodeVersions(soap, &soap_tmp___inf__GetCodeVersions, "-inf:GetCodeVersions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetCodeVersionsResponse)
		return soap_closesock(soap);
	inf__GetCodeVersionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetCodeVersionsResponse->soap_get(soap, "inf:GetCodeVersionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetProvisioningMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetProvisioningMode *inf__GetProvisioningMode, _inf__GetProvisioningModeResponse *inf__GetProvisioningModeResponse)
{	struct __inf__GetProvisioningMode soap_tmp___inf__GetProvisioningMode;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetProvisioningMode";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetProvisioningMode.inf__GetProvisioningMode = inf__GetProvisioningMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetProvisioningMode(soap, &soap_tmp___inf__GetProvisioningMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetProvisioningMode(soap, &soap_tmp___inf__GetProvisioningMode, "-inf:GetProvisioningMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetProvisioningMode(soap, &soap_tmp___inf__GetProvisioningMode, "-inf:GetProvisioningMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetProvisioningModeResponse)
		return soap_closesock(soap);
	inf__GetProvisioningModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetProvisioningModeResponse->soap_get(soap, "inf:GetProvisioningModeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetProvisioningState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetProvisioningState *inf__GetProvisioningState, _inf__GetProvisioningStateResponse *inf__GetProvisioningStateResponse)
{	struct __inf__GetProvisioningState soap_tmp___inf__GetProvisioningState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetProvisioningState";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetProvisioningState.inf__GetProvisioningState = inf__GetProvisioningState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetProvisioningState(soap, &soap_tmp___inf__GetProvisioningState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetProvisioningState(soap, &soap_tmp___inf__GetProvisioningState, "-inf:GetProvisioningState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetProvisioningState(soap, &soap_tmp___inf__GetProvisioningState, "-inf:GetProvisioningState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetProvisioningStateResponse)
		return soap_closesock(soap);
	inf__GetProvisioningStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetProvisioningStateResponse->soap_get(soap, "inf:GetProvisioningStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetVlanParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetVlanParameters *inf__GetVlanParameters, _inf__GetVlanParametersResponse *inf__GetVlanParametersResponse)
{	struct __inf__GetVlanParameters soap_tmp___inf__GetVlanParameters;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetVlanParameters";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetVlanParameters.inf__GetVlanParameters = inf__GetVlanParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetVlanParameters(soap, &soap_tmp___inf__GetVlanParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetVlanParameters(soap, &soap_tmp___inf__GetVlanParameters, "-inf:GetVlanParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetVlanParameters(soap, &soap_tmp___inf__GetVlanParameters, "-inf:GetVlanParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetVlanParametersResponse)
		return soap_closesock(soap);
	inf__GetVlanParametersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetVlanParametersResponse->soap_get(soap, "inf:GetVlanParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetHostName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetHostName *inf__GetHostName, _inf__GetHostNameResponse *inf__GetHostNameResponse)
{	struct __inf__GetHostName soap_tmp___inf__GetHostName;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetHostName";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetHostName.inf__GetHostName = inf__GetHostName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetHostName(soap, &soap_tmp___inf__GetHostName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetHostName(soap, &soap_tmp___inf__GetHostName, "-inf:GetHostName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetHostName(soap, &soap_tmp___inf__GetHostName, "-inf:GetHostName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetHostNameResponse)
		return soap_closesock(soap);
	inf__GetHostNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetHostNameResponse->soap_get(soap, "inf:GetHostNameResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetConfigServerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetConfigServerInfo *inf__GetConfigServerInfo, _inf__GetConfigServerInfoResponse *inf__GetConfigServerInfoResponse)
{	struct __inf__GetConfigServerInfo soap_tmp___inf__GetConfigServerInfo;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetConfigServerInfo";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetConfigServerInfo.inf__GetConfigServerInfo = inf__GetConfigServerInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetConfigServerInfo(soap, &soap_tmp___inf__GetConfigServerInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetConfigServerInfo(soap, &soap_tmp___inf__GetConfigServerInfo, "-inf:GetConfigServerInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetConfigServerInfo(soap, &soap_tmp___inf__GetConfigServerInfo, "-inf:GetConfigServerInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetConfigServerInfoResponse)
		return soap_closesock(soap);
	inf__GetConfigServerInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetConfigServerInfoResponse->soap_get(soap, "inf:GetConfigServerInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetAdminAclEntryStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetAdminAclEntryStatus *inf__GetAdminAclEntryStatus, _inf__GetAdminAclEntryStatusResponse *inf__GetAdminAclEntryStatusResponse)
{	struct __inf__GetAdminAclEntryStatus soap_tmp___inf__GetAdminAclEntryStatus;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetAdminAclEntryStatus";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetAdminAclEntryStatus.inf__GetAdminAclEntryStatus = inf__GetAdminAclEntryStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetAdminAclEntryStatus(soap, &soap_tmp___inf__GetAdminAclEntryStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetAdminAclEntryStatus(soap, &soap_tmp___inf__GetAdminAclEntryStatus, "-inf:GetAdminAclEntryStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetAdminAclEntryStatus(soap, &soap_tmp___inf__GetAdminAclEntryStatus, "-inf:GetAdminAclEntryStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetAdminAclEntryStatusResponse)
		return soap_closesock(soap);
	inf__GetAdminAclEntryStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetAdminAclEntryStatusResponse->soap_get(soap, "inf:GetAdminAclEntryStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetAdminNetAclEntryStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetAdminNetAclEntryStatus *inf__GetAdminNetAclEntryStatus, _inf__GetAdminNetAclEntryStatusResponse *inf__GetAdminNetAclEntryStatusResponse)
{	struct __inf__GetAdminNetAclEntryStatus soap_tmp___inf__GetAdminNetAclEntryStatus;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetAdminNetAclEntryStatus";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetAdminNetAclEntryStatus.inf__GetAdminNetAclEntryStatus = inf__GetAdminNetAclEntryStatus;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetAdminNetAclEntryStatus(soap, &soap_tmp___inf__GetAdminNetAclEntryStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetAdminNetAclEntryStatus(soap, &soap_tmp___inf__GetAdminNetAclEntryStatus, "-inf:GetAdminNetAclEntryStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetAdminNetAclEntryStatus(soap, &soap_tmp___inf__GetAdminNetAclEntryStatus, "-inf:GetAdminNetAclEntryStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetAdminNetAclEntryStatusResponse)
		return soap_closesock(soap);
	inf__GetAdminNetAclEntryStatusResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetAdminNetAclEntryStatusResponse->soap_get(soap, "inf:GetAdminNetAclEntryStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetPasswordModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetPasswordModel *inf__GetPasswordModel, _inf__GetPasswordModelResponse *inf__GetPasswordModelResponse)
{	struct __inf__GetPasswordModel soap_tmp___inf__GetPasswordModel;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetPasswordModel";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetPasswordModel.inf__GetPasswordModel = inf__GetPasswordModel;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetPasswordModel(soap, &soap_tmp___inf__GetPasswordModel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetPasswordModel(soap, &soap_tmp___inf__GetPasswordModel, "-inf:GetPasswordModel", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetPasswordModel(soap, &soap_tmp___inf__GetPasswordModel, "-inf:GetPasswordModel", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetPasswordModelResponse)
		return soap_closesock(soap);
	inf__GetPasswordModelResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetPasswordModelResponse->soap_get(soap, "inf:GetPasswordModelResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetEnabledInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetEnabledInterfaces *inf__GetEnabledInterfaces, _inf__GetEnabledInterfacesResponse *inf__GetEnabledInterfacesResponse)
{	struct __inf__GetEnabledInterfaces soap_tmp___inf__GetEnabledInterfaces;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetEnabledInterfaces";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetEnabledInterfaces.inf__GetEnabledInterfaces = inf__GetEnabledInterfaces;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetEnabledInterfaces(soap, &soap_tmp___inf__GetEnabledInterfaces);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetEnabledInterfaces(soap, &soap_tmp___inf__GetEnabledInterfaces, "-inf:GetEnabledInterfaces", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetEnabledInterfaces(soap, &soap_tmp___inf__GetEnabledInterfaces, "-inf:GetEnabledInterfaces", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetEnabledInterfacesResponse)
		return soap_closesock(soap);
	inf__GetEnabledInterfacesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetEnabledInterfacesResponse->soap_get(soap, "inf:GetEnabledInterfacesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetNetworkState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetNetworkState *inf__GetNetworkState, _inf__GetNetworkStateResponse *inf__GetNetworkStateResponse)
{	struct __inf__GetNetworkState soap_tmp___inf__GetNetworkState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetNetworkState";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetNetworkState.inf__GetNetworkState = inf__GetNetworkState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetNetworkState(soap, &soap_tmp___inf__GetNetworkState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetNetworkState(soap, &soap_tmp___inf__GetNetworkState, "-inf:GetNetworkState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetNetworkState(soap, &soap_tmp___inf__GetNetworkState, "-inf:GetNetworkState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetNetworkStateResponse)
		return soap_closesock(soap);
	inf__GetNetworkStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetNetworkStateResponse->soap_get(soap, "inf:GetNetworkStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetSecurityParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetSecurityParameters *inf__GetSecurityParameters, _inf__GetSecurityParametersResponse *inf__GetSecurityParametersResponse)
{	struct __inf__GetSecurityParameters soap_tmp___inf__GetSecurityParameters;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetSecurityParameters";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetSecurityParameters.inf__GetSecurityParameters = inf__GetSecurityParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetSecurityParameters(soap, &soap_tmp___inf__GetSecurityParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetSecurityParameters(soap, &soap_tmp___inf__GetSecurityParameters, "-inf:GetSecurityParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetSecurityParameters(soap, &soap_tmp___inf__GetSecurityParameters, "-inf:GetSecurityParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetSecurityParametersResponse)
		return soap_closesock(soap);
	inf__GetSecurityParametersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetSecurityParametersResponse->soap_get(soap, "inf:GetSecurityParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetIderSessionLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetIderSessionLog *inf__GetIderSessionLog, _inf__GetIderSessionLogResponse *inf__GetIderSessionLogResponse)
{	struct __inf__GetIderSessionLog soap_tmp___inf__GetIderSessionLog;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/GeneralInfoService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/GeneralInfo/2004/01/GetIderSessionLog";
	soap->encodingStyle = NULL;
	soap_tmp___inf__GetIderSessionLog.inf__GetIderSessionLog = inf__GetIderSessionLog;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___inf__GetIderSessionLog(soap, &soap_tmp___inf__GetIderSessionLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___inf__GetIderSessionLog(soap, &soap_tmp___inf__GetIderSessionLog, "-inf:GetIderSessionLog", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___inf__GetIderSessionLog(soap, &soap_tmp___inf__GetIderSessionLog, "-inf:GetIderSessionLog", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!inf__GetIderSessionLogResponse)
		return soap_closesock(soap);
	inf__GetIderSessionLogResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	inf__GetIderSessionLogResponse->soap_get(soap, "inf:GetIderSessionLogResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetHostName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetHostName *net__SetHostName, _net__SetHostNameResponse *net__SetHostNameResponse)
{	struct __net__SetHostName soap_tmp___net__SetHostName;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/SetHostName";
	soap->encodingStyle = NULL;
	soap_tmp___net__SetHostName.net__SetHostName = net__SetHostName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__SetHostName(soap, &soap_tmp___net__SetHostName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__SetHostName(soap, &soap_tmp___net__SetHostName, "-net:SetHostName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__SetHostName(soap, &soap_tmp___net__SetHostName, "-net:SetHostName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__SetHostNameResponse)
		return soap_closesock(soap);
	net__SetHostNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__SetHostNameResponse->soap_get(soap, "net:SetHostNameResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetHostName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetHostName *net__GetHostName, _net__GetHostNameResponse *net__GetHostNameResponse)
{	struct __net__GetHostName soap_tmp___net__GetHostName;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/GetHostName";
	soap->encodingStyle = NULL;
	soap_tmp___net__GetHostName.net__GetHostName = net__GetHostName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__GetHostName(soap, &soap_tmp___net__GetHostName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__GetHostName(soap, &soap_tmp___net__GetHostName, "-net:GetHostName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__GetHostName(soap, &soap_tmp___net__GetHostName, "-net:GetHostName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__GetHostNameResponse)
		return soap_closesock(soap);
	net__GetHostNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__GetHostNameResponse->soap_get(soap, "net:GetHostNameResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetDomainName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetDomainName *net__SetDomainName, _net__SetDomainNameResponse *net__SetDomainNameResponse)
{	struct __net__SetDomainName soap_tmp___net__SetDomainName;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/SetDomainName";
	soap->encodingStyle = NULL;
	soap_tmp___net__SetDomainName.net__SetDomainName = net__SetDomainName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__SetDomainName(soap, &soap_tmp___net__SetDomainName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__SetDomainName(soap, &soap_tmp___net__SetDomainName, "-net:SetDomainName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__SetDomainName(soap, &soap_tmp___net__SetDomainName, "-net:SetDomainName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__SetDomainNameResponse)
		return soap_closesock(soap);
	net__SetDomainNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__SetDomainNameResponse->soap_get(soap, "net:SetDomainNameResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetDomainName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetDomainName *net__GetDomainName, _net__GetDomainNameResponse *net__GetDomainNameResponse)
{	struct __net__GetDomainName soap_tmp___net__GetDomainName;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/GetDomainName";
	soap->encodingStyle = NULL;
	soap_tmp___net__GetDomainName.net__GetDomainName = net__GetDomainName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__GetDomainName(soap, &soap_tmp___net__GetDomainName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__GetDomainName(soap, &soap_tmp___net__GetDomainName, "-net:GetDomainName", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__GetDomainName(soap, &soap_tmp___net__GetDomainName, "-net:GetDomainName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__GetDomainNameResponse)
		return soap_closesock(soap);
	net__GetDomainNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__GetDomainNameResponse->soap_get(soap, "net:GetDomainNameResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetTcpIpParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetTcpIpParameters *net__SetTcpIpParameters, _net__SetTcpIpParametersResponse *net__SetTcpIpParametersResponse)
{	struct __net__SetTcpIpParameters soap_tmp___net__SetTcpIpParameters;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/SetTcpIpParameters";
	soap->encodingStyle = NULL;
	soap_tmp___net__SetTcpIpParameters.net__SetTcpIpParameters = net__SetTcpIpParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__SetTcpIpParameters(soap, &soap_tmp___net__SetTcpIpParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__SetTcpIpParameters(soap, &soap_tmp___net__SetTcpIpParameters, "-net:SetTcpIpParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__SetTcpIpParameters(soap, &soap_tmp___net__SetTcpIpParameters, "-net:SetTcpIpParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__SetTcpIpParametersResponse)
		return soap_closesock(soap);
	net__SetTcpIpParametersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__SetTcpIpParametersResponse->soap_get(soap, "net:SetTcpIpParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetTcpIpParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetTcpIpParameters *net__GetTcpIpParameters, _net__GetTcpIpParametersResponse *net__GetTcpIpParametersResponse)
{	struct __net__GetTcpIpParameters soap_tmp___net__GetTcpIpParameters;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/GetTcpIpParameters";
	soap->encodingStyle = NULL;
	soap_tmp___net__GetTcpIpParameters.net__GetTcpIpParameters = net__GetTcpIpParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__GetTcpIpParameters(soap, &soap_tmp___net__GetTcpIpParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__GetTcpIpParameters(soap, &soap_tmp___net__GetTcpIpParameters, "-net:GetTcpIpParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__GetTcpIpParameters(soap, &soap_tmp___net__GetTcpIpParameters, "-net:GetTcpIpParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__GetTcpIpParametersResponse)
		return soap_closesock(soap);
	net__GetTcpIpParametersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__GetTcpIpParametersResponse->soap_get(soap, "net:GetTcpIpParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetVlanParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetVlanParameters *net__SetVlanParameters, _net__SetVlanParametersResponse *net__SetVlanParametersResponse)
{	struct __net__SetVlanParameters soap_tmp___net__SetVlanParameters;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/SetVlanParameters";
	soap->encodingStyle = NULL;
	soap_tmp___net__SetVlanParameters.net__SetVlanParameters = net__SetVlanParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__SetVlanParameters(soap, &soap_tmp___net__SetVlanParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__SetVlanParameters(soap, &soap_tmp___net__SetVlanParameters, "-net:SetVlanParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__SetVlanParameters(soap, &soap_tmp___net__SetVlanParameters, "-net:SetVlanParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__SetVlanParametersResponse)
		return soap_closesock(soap);
	net__SetVlanParametersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__SetVlanParametersResponse->soap_get(soap, "net:SetVlanParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetVlanParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetVlanParameters *net__GetVlanParameters, _net__GetVlanParametersResponse *net__GetVlanParametersResponse)
{	struct __net__GetVlanParameters soap_tmp___net__GetVlanParameters;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/GetVlanParameters";
	soap->encodingStyle = NULL;
	soap_tmp___net__GetVlanParameters.net__GetVlanParameters = net__GetVlanParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__GetVlanParameters(soap, &soap_tmp___net__GetVlanParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__GetVlanParameters(soap, &soap_tmp___net__GetVlanParameters, "-net:GetVlanParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__GetVlanParameters(soap, &soap_tmp___net__GetVlanParameters, "-net:GetVlanParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__GetVlanParametersResponse)
		return soap_closesock(soap);
	net__GetVlanParametersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__GetVlanParametersResponse->soap_get(soap, "net:GetVlanParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetPingResponse(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetPingResponse *net__SetPingResponse, _net__SetPingResponseResponse *net__SetPingResponseResponse)
{	struct __net__SetPingResponse soap_tmp___net__SetPingResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/SetPingResponse";
	soap->encodingStyle = NULL;
	soap_tmp___net__SetPingResponse.net__SetPingResponse = net__SetPingResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__SetPingResponse(soap, &soap_tmp___net__SetPingResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__SetPingResponse(soap, &soap_tmp___net__SetPingResponse, "-net:SetPingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__SetPingResponse(soap, &soap_tmp___net__SetPingResponse, "-net:SetPingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__SetPingResponseResponse)
		return soap_closesock(soap);
	net__SetPingResponseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__SetPingResponseResponse->soap_get(soap, "net:SetPingResponseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetPingResponse(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetPingResponse *net__GetPingResponse, _net__GetPingResponseResponse *net__GetPingResponseResponse)
{	struct __net__GetPingResponse soap_tmp___net__GetPingResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2004/01/GetPingResponse";
	soap->encodingStyle = NULL;
	soap_tmp___net__GetPingResponse.net__GetPingResponse = net__GetPingResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__GetPingResponse(soap, &soap_tmp___net__GetPingResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__GetPingResponse(soap, &soap_tmp___net__GetPingResponse, "-net:GetPingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__GetPingResponse(soap, &soap_tmp___net__GetPingResponse, "-net:GetPingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__GetPingResponseResponse)
		return soap_closesock(soap);
	net__GetPingResponseResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__GetPingResponseResponse->soap_get(soap, "net:GetPingResponseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__EnumerateInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__EnumerateInterfaces *net__EnumerateInterfaces, _net__EnumerateInterfacesResponse *net__EnumerateInterfacesResponse)
{	struct __net__EnumerateInterfaces soap_tmp___net__EnumerateInterfaces;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/EnumerateInterfaces";
	soap->encodingStyle = NULL;
	soap_tmp___net__EnumerateInterfaces.net__EnumerateInterfaces = net__EnumerateInterfaces;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__EnumerateInterfaces(soap, &soap_tmp___net__EnumerateInterfaces);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__EnumerateInterfaces(soap, &soap_tmp___net__EnumerateInterfaces, "-net:EnumerateInterfaces", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__EnumerateInterfaces(soap, &soap_tmp___net__EnumerateInterfaces, "-net:EnumerateInterfaces", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__EnumerateInterfacesResponse)
		return soap_closesock(soap);
	net__EnumerateInterfacesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__EnumerateInterfacesResponse->soap_get(soap, "net:EnumerateInterfacesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetInterfaceSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetInterfaceSettings *net__GetInterfaceSettings, _net__GetInterfaceSettingsResponse *net__GetInterfaceSettingsResponse)
{	struct __net__GetInterfaceSettings soap_tmp___net__GetInterfaceSettings;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/GetInterfaceSettings";
	soap->encodingStyle = NULL;
	soap_tmp___net__GetInterfaceSettings.net__GetInterfaceSettings = net__GetInterfaceSettings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__GetInterfaceSettings(soap, &soap_tmp___net__GetInterfaceSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__GetInterfaceSettings(soap, &soap_tmp___net__GetInterfaceSettings, "-net:GetInterfaceSettings", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__GetInterfaceSettings(soap, &soap_tmp___net__GetInterfaceSettings, "-net:GetInterfaceSettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__GetInterfaceSettingsResponse)
		return soap_closesock(soap);
	net__GetInterfaceSettingsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__GetInterfaceSettingsResponse->soap_get(soap, "net:GetInterfaceSettingsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetInterfaceSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetInterfaceSettings *net__SetInterfaceSettings, _net__SetInterfaceSettingsResponse *net__SetInterfaceSettingsResponse)
{	struct __net__SetInterfaceSettings soap_tmp___net__SetInterfaceSettings;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/SetInterfaceSettings";
	soap->encodingStyle = NULL;
	soap_tmp___net__SetInterfaceSettings.net__SetInterfaceSettings = net__SetInterfaceSettings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__SetInterfaceSettings(soap, &soap_tmp___net__SetInterfaceSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__SetInterfaceSettings(soap, &soap_tmp___net__SetInterfaceSettings, "-net:SetInterfaceSettings", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__SetInterfaceSettings(soap, &soap_tmp___net__SetInterfaceSettings, "-net:SetInterfaceSettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__SetInterfaceSettingsResponse)
		return soap_closesock(soap);
	net__SetInterfaceSettingsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__SetInterfaceSettingsResponse->soap_get(soap, "net:SetInterfaceSettingsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Set8021XWiredProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Set8021XWiredProfile *net__Set8021XWiredProfile, _net__Set8021XWiredProfileResponse *net__Set8021XWiredProfileResponse)
{	struct __net__Set8021XWiredProfile soap_tmp___net__Set8021XWiredProfile;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/Set8021XWiredProfile";
	soap->encodingStyle = NULL;
	soap_tmp___net__Set8021XWiredProfile.net__Set8021XWiredProfile = net__Set8021XWiredProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__Set8021XWiredProfile(soap, &soap_tmp___net__Set8021XWiredProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__Set8021XWiredProfile(soap, &soap_tmp___net__Set8021XWiredProfile, "-net:Set8021XWiredProfile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__Set8021XWiredProfile(soap, &soap_tmp___net__Set8021XWiredProfile, "-net:Set8021XWiredProfile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__Set8021XWiredProfileResponse)
		return soap_closesock(soap);
	net__Set8021XWiredProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__Set8021XWiredProfileResponse->soap_get(soap, "net:Set8021XWiredProfileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Get8021XWiredProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Get8021XWiredProfile *net__Get8021XWiredProfile, _net__Get8021XWiredProfileResponse *net__Get8021XWiredProfileResponse)
{	struct __net__Get8021XWiredProfile soap_tmp___net__Get8021XWiredProfile;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/Get8021XWiredProfile";
	soap->encodingStyle = NULL;
	soap_tmp___net__Get8021XWiredProfile.net__Get8021XWiredProfile = net__Get8021XWiredProfile;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__Get8021XWiredProfile(soap, &soap_tmp___net__Get8021XWiredProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__Get8021XWiredProfile(soap, &soap_tmp___net__Get8021XWiredProfile, "-net:Get8021XWiredProfile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__Get8021XWiredProfile(soap, &soap_tmp___net__Get8021XWiredProfile, "-net:Get8021XWiredProfile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__Get8021XWiredProfileResponse)
		return soap_closesock(soap);
	net__Get8021XWiredProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__Get8021XWiredProfileResponse->soap_get(soap, "net:Get8021XWiredProfileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Set8021XActiveS0(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Set8021XActiveS0 *net__Set8021XActiveS0, _net__Set8021XActiveS0Response *net__Set8021XActiveS0Response)
{	struct __net__Set8021XActiveS0 soap_tmp___net__Set8021XActiveS0;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/Set8021XActiveS0";
	soap->encodingStyle = NULL;
	soap_tmp___net__Set8021XActiveS0.net__Set8021XActiveS0 = net__Set8021XActiveS0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__Set8021XActiveS0(soap, &soap_tmp___net__Set8021XActiveS0);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__Set8021XActiveS0(soap, &soap_tmp___net__Set8021XActiveS0, "-net:Set8021XActiveS0", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__Set8021XActiveS0(soap, &soap_tmp___net__Set8021XActiveS0, "-net:Set8021XActiveS0", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__Set8021XActiveS0Response)
		return soap_closesock(soap);
	net__Set8021XActiveS0Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__Set8021XActiveS0Response->soap_get(soap, "net:Set8021XActiveS0Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Get8021XActiveS0(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Get8021XActiveS0 *net__Get8021XActiveS0, _net__Get8021XActiveS0Response *net__Get8021XActiveS0Response)
{	struct __net__Get8021XActiveS0 soap_tmp___net__Get8021XActiveS0;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/Get8021XActiveS0";
	soap->encodingStyle = NULL;
	soap_tmp___net__Get8021XActiveS0.net__Get8021XActiveS0 = net__Get8021XActiveS0;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__Get8021XActiveS0(soap, &soap_tmp___net__Get8021XActiveS0);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__Get8021XActiveS0(soap, &soap_tmp___net__Get8021XActiveS0, "-net:Get8021XActiveS0", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__Get8021XActiveS0(soap, &soap_tmp___net__Get8021XActiveS0, "-net:Get8021XActiveS0", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__Get8021XActiveS0Response)
		return soap_closesock(soap);
	net__Get8021XActiveS0Response->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__Get8021XActiveS0Response->soap_get(soap, "net:Get8021XActiveS0Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Set8021XPxeTimeout(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Set8021XPxeTimeout *net__Set8021XPxeTimeout, _net__Set8021XPxeTimeoutResponse *net__Set8021XPxeTimeoutResponse)
{	struct __net__Set8021XPxeTimeout soap_tmp___net__Set8021XPxeTimeout;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/Set8021XPxeTimeout";
	soap->encodingStyle = NULL;
	soap_tmp___net__Set8021XPxeTimeout.net__Set8021XPxeTimeout = net__Set8021XPxeTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__Set8021XPxeTimeout(soap, &soap_tmp___net__Set8021XPxeTimeout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__Set8021XPxeTimeout(soap, &soap_tmp___net__Set8021XPxeTimeout, "-net:Set8021XPxeTimeout", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__Set8021XPxeTimeout(soap, &soap_tmp___net__Set8021XPxeTimeout, "-net:Set8021XPxeTimeout", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__Set8021XPxeTimeoutResponse)
		return soap_closesock(soap);
	net__Set8021XPxeTimeoutResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__Set8021XPxeTimeoutResponse->soap_get(soap, "net:Set8021XPxeTimeoutResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Get8021XPxeTimeout(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Get8021XPxeTimeout *net__Get8021XPxeTimeout, _net__Get8021XPxeTimeoutResponse *net__Get8021XPxeTimeoutResponse)
{	struct __net__Get8021XPxeTimeout soap_tmp___net__Get8021XPxeTimeout;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkAdministration/2006/01/Get8021XPxeTimeout";
	soap->encodingStyle = NULL;
	soap_tmp___net__Get8021XPxeTimeout.net__Get8021XPxeTimeout = net__Get8021XPxeTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___net__Get8021XPxeTimeout(soap, &soap_tmp___net__Get8021XPxeTimeout);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___net__Get8021XPxeTimeout(soap, &soap_tmp___net__Get8021XPxeTimeout, "-net:Get8021XPxeTimeout", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___net__Get8021XPxeTimeout(soap, &soap_tmp___net__Get8021XPxeTimeout, "-net:Get8021XPxeTimeout", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!net__Get8021XPxeTimeoutResponse)
		return soap_closesock(soap);
	net__Get8021XPxeTimeoutResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	net__Get8021XPxeTimeoutResponse->soap_get(soap, "net:Get8021XPxeTimeoutResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___rci__GetRemoteControlCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _rci__GetRemoteControlCapabilities *rci__GetRemoteControlCapabilities, _rci__GetRemoteControlCapabilitiesResponse *rci__GetRemoteControlCapabilitiesResponse)
{	struct __rci__GetRemoteControlCapabilities soap_tmp___rci__GetRemoteControlCapabilities;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/RemoteControlService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/RemoteControl/2004/01/GetRemoteControlCapabilities";
	soap->encodingStyle = NULL;
	soap_tmp___rci__GetRemoteControlCapabilities.rci__GetRemoteControlCapabilities = rci__GetRemoteControlCapabilities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___rci__GetRemoteControlCapabilities(soap, &soap_tmp___rci__GetRemoteControlCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___rci__GetRemoteControlCapabilities(soap, &soap_tmp___rci__GetRemoteControlCapabilities, "-rci:GetRemoteControlCapabilities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___rci__GetRemoteControlCapabilities(soap, &soap_tmp___rci__GetRemoteControlCapabilities, "-rci:GetRemoteControlCapabilities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rci__GetRemoteControlCapabilitiesResponse)
		return soap_closesock(soap);
	rci__GetRemoteControlCapabilitiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	rci__GetRemoteControlCapabilitiesResponse->soap_get(soap, "rci:GetRemoteControlCapabilitiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___rci__RemoteControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _rci__RemoteControl *rci__RemoteControl, _rci__RemoteControlResponse *rci__RemoteControlResponse)
{	struct __rci__RemoteControl soap_tmp___rci__RemoteControl;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/RemoteControlService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/RemoteControl/2004/01/RemoteControl";
	soap->encodingStyle = NULL;
	soap_tmp___rci__RemoteControl.rci__RemoteControl = rci__RemoteControl;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___rci__RemoteControl(soap, &soap_tmp___rci__RemoteControl);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___rci__RemoteControl(soap, &soap_tmp___rci__RemoteControl, "-rci:RemoteControl", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___rci__RemoteControl(soap, &soap_tmp___rci__RemoteControl, "-rci:RemoteControl", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rci__RemoteControlResponse)
		return soap_closesock(soap);
	rci__RemoteControlResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	rci__RemoteControlResponse->soap_get(soap, "rci:RemoteControlResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___rci__GetSystemPowerState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _rci__GetSystemPowerState *rci__GetSystemPowerState, _rci__GetSystemPowerStateResponse *rci__GetSystemPowerStateResponse)
{	struct __rci__GetSystemPowerState soap_tmp___rci__GetSystemPowerState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/RemoteControlService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/RemoteControl/2004/01/GetSystemPowerState";
	soap->encodingStyle = NULL;
	soap_tmp___rci__GetSystemPowerState.rci__GetSystemPowerState = rci__GetSystemPowerState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___rci__GetSystemPowerState(soap, &soap_tmp___rci__GetSystemPowerState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___rci__GetSystemPowerState(soap, &soap_tmp___rci__GetSystemPowerState, "-rci:GetSystemPowerState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___rci__GetSystemPowerState(soap, &soap_tmp___rci__GetSystemPowerState, "-rci:GetSystemPowerState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!rci__GetSystemPowerStateResponse)
		return soap_closesock(soap);
	rci__GetSystemPowerStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	rci__GetSystemPowerStateResponse->soap_get(soap, "rci:GetSystemPowerStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__ResetFlashWearOutProtection(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__ResetFlashWearOutProtection *sai__ResetFlashWearOutProtection, _sai__ResetFlashWearOutProtectionResponse *sai__ResetFlashWearOutProtectionResponse)
{	struct __sai__ResetFlashWearOutProtection soap_tmp___sai__ResetFlashWearOutProtection;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/ResetFlashWearOutProtection";
	soap->encodingStyle = NULL;
	soap_tmp___sai__ResetFlashWearOutProtection.sai__ResetFlashWearOutProtection = sai__ResetFlashWearOutProtection;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__ResetFlashWearOutProtection(soap, &soap_tmp___sai__ResetFlashWearOutProtection);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__ResetFlashWearOutProtection(soap, &soap_tmp___sai__ResetFlashWearOutProtection, "-sai:ResetFlashWearOutProtection", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__ResetFlashWearOutProtection(soap, &soap_tmp___sai__ResetFlashWearOutProtection, "-sai:ResetFlashWearOutProtection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__ResetFlashWearOutProtectionResponse)
		return soap_closesock(soap);
	sai__ResetFlashWearOutProtectionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__ResetFlashWearOutProtectionResponse->soap_get(soap, "sai:ResetFlashWearOutProtectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetAdminAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetAdminAclEntry *sai__GetAdminAclEntry, _sai__GetAdminAclEntryResponse *sai__GetAdminAclEntryResponse)
{	struct __sai__GetAdminAclEntry soap_tmp___sai__GetAdminAclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetAdminAclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetAdminAclEntry.sai__GetAdminAclEntry = sai__GetAdminAclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetAdminAclEntry(soap, &soap_tmp___sai__GetAdminAclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetAdminAclEntry(soap, &soap_tmp___sai__GetAdminAclEntry, "-sai:GetAdminAclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetAdminAclEntry(soap, &soap_tmp___sai__GetAdminAclEntry, "-sai:GetAdminAclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetAdminAclEntryResponse)
		return soap_closesock(soap);
	sai__GetAdminAclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetAdminAclEntryResponse->soap_get(soap, "sai:GetAdminAclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetAdminAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetAdminAclEntry *sai__SetAdminAclEntry, _sai__SetAdminAclEntryResponse *sai__SetAdminAclEntryResponse)
{	struct __sai__SetAdminAclEntry soap_tmp___sai__SetAdminAclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetAdminAclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetAdminAclEntry.sai__SetAdminAclEntry = sai__SetAdminAclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetAdminAclEntry(soap, &soap_tmp___sai__SetAdminAclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetAdminAclEntry(soap, &soap_tmp___sai__SetAdminAclEntry, "-sai:SetAdminAclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetAdminAclEntry(soap, &soap_tmp___sai__SetAdminAclEntry, "-sai:SetAdminAclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetAdminAclEntryResponse)
		return soap_closesock(soap);
	sai__SetAdminAclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetAdminAclEntryResponse->soap_get(soap, "sai:SetAdminAclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddUserAclEntry *sai__AddUserAclEntry, _sai__AddUserAclEntryResponse *sai__AddUserAclEntryResponse)
{	struct __sai__AddUserAclEntry soap_tmp___sai__AddUserAclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/AddUserAclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__AddUserAclEntry.sai__AddUserAclEntry = sai__AddUserAclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__AddUserAclEntry(soap, &soap_tmp___sai__AddUserAclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__AddUserAclEntry(soap, &soap_tmp___sai__AddUserAclEntry, "-sai:AddUserAclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__AddUserAclEntry(soap, &soap_tmp___sai__AddUserAclEntry, "-sai:AddUserAclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__AddUserAclEntryResponse)
		return soap_closesock(soap);
	sai__AddUserAclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__AddUserAclEntryResponse->soap_get(soap, "sai:AddUserAclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumerateUserAclEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumerateUserAclEntries *sai__EnumerateUserAclEntries, _sai__EnumerateUserAclEntriesResponse *sai__EnumerateUserAclEntriesResponse)
{	struct __sai__EnumerateUserAclEntries soap_tmp___sai__EnumerateUserAclEntries;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/EnumerateUserAclEntries";
	soap->encodingStyle = NULL;
	soap_tmp___sai__EnumerateUserAclEntries.sai__EnumerateUserAclEntries = sai__EnumerateUserAclEntries;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__EnumerateUserAclEntries(soap, &soap_tmp___sai__EnumerateUserAclEntries);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__EnumerateUserAclEntries(soap, &soap_tmp___sai__EnumerateUserAclEntries, "-sai:EnumerateUserAclEntries", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__EnumerateUserAclEntries(soap, &soap_tmp___sai__EnumerateUserAclEntries, "-sai:EnumerateUserAclEntries", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__EnumerateUserAclEntriesResponse)
		return soap_closesock(soap);
	sai__EnumerateUserAclEntriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__EnumerateUserAclEntriesResponse->soap_get(soap, "sai:EnumerateUserAclEntriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetUserAclEntry *sai__GetUserAclEntry, _sai__GetUserAclEntryResponse *sai__GetUserAclEntryResponse)
{	struct __sai__GetUserAclEntry soap_tmp___sai__GetUserAclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetUserAclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetUserAclEntry.sai__GetUserAclEntry = sai__GetUserAclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetUserAclEntry(soap, &soap_tmp___sai__GetUserAclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetUserAclEntry(soap, &soap_tmp___sai__GetUserAclEntry, "-sai:GetUserAclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetUserAclEntry(soap, &soap_tmp___sai__GetUserAclEntry, "-sai:GetUserAclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetUserAclEntryResponse)
		return soap_closesock(soap);
	sai__GetUserAclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetUserAclEntryResponse->soap_get(soap, "sai:GetUserAclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__UpdateUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__UpdateUserAclEntry *sai__UpdateUserAclEntry, _sai__UpdateUserAclEntryResponse *sai__UpdateUserAclEntryResponse)
{	struct __sai__UpdateUserAclEntry soap_tmp___sai__UpdateUserAclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/UpdateUserAclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__UpdateUserAclEntry.sai__UpdateUserAclEntry = sai__UpdateUserAclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__UpdateUserAclEntry(soap, &soap_tmp___sai__UpdateUserAclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__UpdateUserAclEntry(soap, &soap_tmp___sai__UpdateUserAclEntry, "-sai:UpdateUserAclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__UpdateUserAclEntry(soap, &soap_tmp___sai__UpdateUserAclEntry, "-sai:UpdateUserAclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__UpdateUserAclEntryResponse)
		return soap_closesock(soap);
	sai__UpdateUserAclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__UpdateUserAclEntryResponse->soap_get(soap, "sai:UpdateUserAclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__RemoveUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__RemoveUserAclEntry *sai__RemoveUserAclEntry, _sai__RemoveUserAclEntryResponse *sai__RemoveUserAclEntryResponse)
{	struct __sai__RemoveUserAclEntry soap_tmp___sai__RemoveUserAclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/RemoveUserAclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__RemoveUserAclEntry.sai__RemoveUserAclEntry = sai__RemoveUserAclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__RemoveUserAclEntry(soap, &soap_tmp___sai__RemoveUserAclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__RemoveUserAclEntry(soap, &soap_tmp___sai__RemoveUserAclEntry, "-sai:RemoveUserAclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__RemoveUserAclEntry(soap, &soap_tmp___sai__RemoveUserAclEntry, "-sai:RemoveUserAclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__RemoveUserAclEntryResponse)
		return soap_closesock(soap);
	sai__RemoveUserAclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__RemoveUserAclEntryResponse->soap_get(soap, "sai:RemoveUserAclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTlsEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTlsEnabled *sai__SetTlsEnabled, _sai__SetTlsEnabledResponse *sai__SetTlsEnabledResponse)
{	struct __sai__SetTlsEnabled soap_tmp___sai__SetTlsEnabled;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetTlsEnabled";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetTlsEnabled.sai__SetTlsEnabled = sai__SetTlsEnabled;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetTlsEnabled(soap, &soap_tmp___sai__SetTlsEnabled);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetTlsEnabled(soap, &soap_tmp___sai__SetTlsEnabled, "-sai:SetTlsEnabled", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetTlsEnabled(soap, &soap_tmp___sai__SetTlsEnabled, "-sai:SetTlsEnabled", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetTlsEnabledResponse)
		return soap_closesock(soap);
	sai__SetTlsEnabledResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetTlsEnabledResponse->soap_get(soap, "sai:SetTlsEnabledResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetRngKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetRngKey *sai__SetRngKey, _sai__SetRngKeyResponse *sai__SetRngKeyResponse)
{	struct __sai__SetRngKey soap_tmp___sai__SetRngKey;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetRngKey";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetRngKey.sai__SetRngKey = sai__SetRngKey;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetRngKey(soap, &soap_tmp___sai__SetRngKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetRngKey(soap, &soap_tmp___sai__SetRngKey, "-sai:SetRngKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetRngKey(soap, &soap_tmp___sai__SetRngKey, "-sai:SetRngKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetRngKeyResponse)
		return soap_closesock(soap);
	sai__SetRngKeyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetRngKeyResponse->soap_get(soap, "sai:SetRngKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSKeyAndCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSKeyAndCertificate *sai__SetTLSKeyAndCertificate, _sai__SetTLSKeyAndCertificateResponse *sai__SetTLSKeyAndCertificateResponse)
{	struct __sai__SetTLSKeyAndCertificate soap_tmp___sai__SetTLSKeyAndCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetTLSKeyAndCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetTLSKeyAndCertificate.sai__SetTLSKeyAndCertificate = sai__SetTLSKeyAndCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetTLSKeyAndCertificate(soap, &soap_tmp___sai__SetTLSKeyAndCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetTLSKeyAndCertificate(soap, &soap_tmp___sai__SetTLSKeyAndCertificate, "-sai:SetTLSKeyAndCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetTLSKeyAndCertificate(soap, &soap_tmp___sai__SetTLSKeyAndCertificate, "-sai:SetTLSKeyAndCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetTLSKeyAndCertificateResponse)
		return soap_closesock(soap);
	sai__SetTLSKeyAndCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetTLSKeyAndCertificateResponse->soap_get(soap, "sai:SetTLSKeyAndCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSCertificate *sai__SetTLSCertificate, _sai__SetTLSCertificateResponse *sai__SetTLSCertificateResponse)
{	struct __sai__SetTLSCertificate soap_tmp___sai__SetTLSCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetTLSCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetTLSCertificate.sai__SetTLSCertificate = sai__SetTLSCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetTLSCertificate(soap, &soap_tmp___sai__SetTLSCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetTLSCertificate(soap, &soap_tmp___sai__SetTLSCertificate, "-sai:SetTLSCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetTLSCertificate(soap, &soap_tmp___sai__SetTLSCertificate, "-sai:SetTLSCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetTLSCertificateResponse)
		return soap_closesock(soap);
	sai__SetTLSCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetTLSCertificateResponse->soap_get(soap, "sai:SetTLSCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTLSCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTLSCertificate *sai__GetTLSCertificate, _sai__GetTLSCertificateResponse *sai__GetTLSCertificateResponse)
{	struct __sai__GetTLSCertificate soap_tmp___sai__GetTLSCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetTLSCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetTLSCertificate.sai__GetTLSCertificate = sai__GetTLSCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetTLSCertificate(soap, &soap_tmp___sai__GetTLSCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetTLSCertificate(soap, &soap_tmp___sai__GetTLSCertificate, "-sai:GetTLSCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetTLSCertificate(soap, &soap_tmp___sai__GetTLSCertificate, "-sai:GetTLSCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetTLSCertificateResponse)
		return soap_closesock(soap);
	sai__GetTLSCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetTLSCertificateResponse->soap_get(soap, "sai:GetTLSCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__UpdateCoreFromUrl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__UpdateCoreFromUrl *sai__UpdateCoreFromUrl, _sai__UpdateCoreFromUrlResponse *sai__UpdateCoreFromUrlResponse)
{	struct __sai__UpdateCoreFromUrl soap_tmp___sai__UpdateCoreFromUrl;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/UpdateCoreFromUrl";
	soap->encodingStyle = NULL;
	soap_tmp___sai__UpdateCoreFromUrl.sai__UpdateCoreFromUrl = sai__UpdateCoreFromUrl;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__UpdateCoreFromUrl(soap, &soap_tmp___sai__UpdateCoreFromUrl);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__UpdateCoreFromUrl(soap, &soap_tmp___sai__UpdateCoreFromUrl, "-sai:UpdateCoreFromUrl", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__UpdateCoreFromUrl(soap, &soap_tmp___sai__UpdateCoreFromUrl, "-sai:UpdateCoreFromUrl", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__UpdateCoreFromUrlResponse)
		return soap_closesock(soap);
	sai__UpdateCoreFromUrlResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__UpdateCoreFromUrlResponse->soap_get(soap, "sai:UpdateCoreFromUrlResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningMode *sai__GetProvisioningMode, _sai__GetProvisioningModeResponse *sai__GetProvisioningModeResponse)
{	struct __sai__GetProvisioningMode soap_tmp___sai__GetProvisioningMode;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetProvisioningMode";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetProvisioningMode.sai__GetProvisioningMode = sai__GetProvisioningMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetProvisioningMode(soap, &soap_tmp___sai__GetProvisioningMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetProvisioningMode(soap, &soap_tmp___sai__GetProvisioningMode, "-sai:GetProvisioningMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetProvisioningMode(soap, &soap_tmp___sai__GetProvisioningMode, "-sai:GetProvisioningMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetProvisioningModeResponse)
		return soap_closesock(soap);
	sai__GetProvisioningModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetProvisioningModeResponse->soap_get(soap, "sai:GetProvisioningModeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetProvisioningMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetProvisioningMode *sai__SetProvisioningMode, _sai__SetProvisioningModeResponse *sai__SetProvisioningModeResponse)
{	struct __sai__SetProvisioningMode soap_tmp___sai__SetProvisioningMode;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetProvisioningMode";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetProvisioningMode.sai__SetProvisioningMode = sai__SetProvisioningMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetProvisioningMode(soap, &soap_tmp___sai__SetProvisioningMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetProvisioningMode(soap, &soap_tmp___sai__SetProvisioningMode, "-sai:SetProvisioningMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetProvisioningMode(soap, &soap_tmp___sai__SetProvisioningMode, "-sai:SetProvisioningMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetProvisioningModeResponse)
		return soap_closesock(soap);
	sai__SetProvisioningModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetProvisioningModeResponse->soap_get(soap, "sai:SetProvisioningModeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__Unprovision(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__Unprovision *sai__Unprovision, _sai__UnprovisionResponse *sai__UnprovisionResponse)
{	struct __sai__Unprovision soap_tmp___sai__Unprovision;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/Unprovision";
	soap->encodingStyle = NULL;
	soap_tmp___sai__Unprovision.sai__Unprovision = sai__Unprovision;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__Unprovision(soap, &soap_tmp___sai__Unprovision);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__Unprovision(soap, &soap_tmp___sai__Unprovision, "-sai:Unprovision", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__Unprovision(soap, &soap_tmp___sai__Unprovision, "-sai:Unprovision", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__UnprovisionResponse)
		return soap_closesock(soap);
	sai__UnprovisionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__UnprovisionResponse->soap_get(soap, "sai:UnprovisionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CommitChanges(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CommitChanges *sai__CommitChanges, _sai__CommitChangesResponse *sai__CommitChangesResponse)
{	struct __sai__CommitChanges soap_tmp___sai__CommitChanges;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/CommitChanges";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CommitChanges.sai__CommitChanges = sai__CommitChanges;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CommitChanges(soap, &soap_tmp___sai__CommitChanges);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CommitChanges(soap, &soap_tmp___sai__CommitChanges, "-sai:CommitChanges", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CommitChanges(soap, &soap_tmp___sai__CommitChanges, "-sai:CommitChanges", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CommitChangesResponse)
		return soap_closesock(soap);
	sai__CommitChangesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CommitChangesResponse->soap_get(soap, "sai:CommitChangesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetCoreVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetCoreVersion *sai__GetCoreVersion, _sai__GetCoreVersionResponse *sai__GetCoreVersionResponse)
{	struct __sai__GetCoreVersion soap_tmp___sai__GetCoreVersion;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetCoreVersion";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetCoreVersion.sai__GetCoreVersion = sai__GetCoreVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetCoreVersion(soap, &soap_tmp___sai__GetCoreVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetCoreVersion(soap, &soap_tmp___sai__GetCoreVersion, "-sai:GetCoreVersion", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetCoreVersion(soap, &soap_tmp___sai__GetCoreVersion, "-sai:GetCoreVersion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetCoreVersionResponse)
		return soap_closesock(soap);
	sai__GetCoreVersionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetCoreVersionResponse->soap_get(soap, "sai:GetCoreVersionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddUserAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddUserAclEntryEx *sai__AddUserAclEntryEx, _sai__AddUserAclEntryExResponse *sai__AddUserAclEntryExResponse)
{	struct __sai__AddUserAclEntryEx soap_tmp___sai__AddUserAclEntryEx;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/AddUserAclEntryEx";
	soap->encodingStyle = NULL;
	soap_tmp___sai__AddUserAclEntryEx.sai__AddUserAclEntryEx = sai__AddUserAclEntryEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__AddUserAclEntryEx(soap, &soap_tmp___sai__AddUserAclEntryEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__AddUserAclEntryEx(soap, &soap_tmp___sai__AddUserAclEntryEx, "-sai:AddUserAclEntryEx", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__AddUserAclEntryEx(soap, &soap_tmp___sai__AddUserAclEntryEx, "-sai:AddUserAclEntryEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__AddUserAclEntryExResponse)
		return soap_closesock(soap);
	sai__AddUserAclEntryExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__AddUserAclEntryExResponse->soap_get(soap, "sai:AddUserAclEntryExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetUserAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetUserAclEntryEx *sai__GetUserAclEntryEx, _sai__GetUserAclEntryExResponse *sai__GetUserAclEntryExResponse)
{	struct __sai__GetUserAclEntryEx soap_tmp___sai__GetUserAclEntryEx;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetUserAclEntryEx";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetUserAclEntryEx.sai__GetUserAclEntryEx = sai__GetUserAclEntryEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetUserAclEntryEx(soap, &soap_tmp___sai__GetUserAclEntryEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetUserAclEntryEx(soap, &soap_tmp___sai__GetUserAclEntryEx, "-sai:GetUserAclEntryEx", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetUserAclEntryEx(soap, &soap_tmp___sai__GetUserAclEntryEx, "-sai:GetUserAclEntryEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetUserAclEntryExResponse)
		return soap_closesock(soap);
	sai__GetUserAclEntryExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetUserAclEntryExResponse->soap_get(soap, "sai:GetUserAclEntryExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__UpdateUserAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__UpdateUserAclEntryEx *sai__UpdateUserAclEntryEx, _sai__UpdateUserAclEntryExResponse *sai__UpdateUserAclEntryExResponse)
{	struct __sai__UpdateUserAclEntryEx soap_tmp___sai__UpdateUserAclEntryEx;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/UpdateUserAclEntryEx";
	soap->encodingStyle = NULL;
	soap_tmp___sai__UpdateUserAclEntryEx.sai__UpdateUserAclEntryEx = sai__UpdateUserAclEntryEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__UpdateUserAclEntryEx(soap, &soap_tmp___sai__UpdateUserAclEntryEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__UpdateUserAclEntryEx(soap, &soap_tmp___sai__UpdateUserAclEntryEx, "-sai:UpdateUserAclEntryEx", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__UpdateUserAclEntryEx(soap, &soap_tmp___sai__UpdateUserAclEntryEx, "-sai:UpdateUserAclEntryEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__UpdateUserAclEntryExResponse)
		return soap_closesock(soap);
	sai__UpdateUserAclEntryExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__UpdateUserAclEntryExResponse->soap_get(soap, "sai:UpdateUserAclEntryExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetAdminAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetAdminAclEntryEx *sai__SetAdminAclEntryEx, _sai__SetAdminAclEntryExResponse *sai__SetAdminAclEntryExResponse)
{	struct __sai__SetAdminAclEntryEx soap_tmp___sai__SetAdminAclEntryEx;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetAdminAclEntryEx";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetAdminAclEntryEx.sai__SetAdminAclEntryEx = sai__SetAdminAclEntryEx;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetAdminAclEntryEx(soap, &soap_tmp___sai__SetAdminAclEntryEx);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetAdminAclEntryEx(soap, &soap_tmp___sai__SetAdminAclEntryEx, "-sai:SetAdminAclEntryEx", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetAdminAclEntryEx(soap, &soap_tmp___sai__SetAdminAclEntryEx, "-sai:SetAdminAclEntryEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetAdminAclEntryExResponse)
		return soap_closesock(soap);
	sai__SetAdminAclEntryExResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetAdminAclEntryExResponse->soap_get(soap, "sai:SetAdminAclEntryExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetDigestRealm(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetDigestRealm *sai__GetDigestRealm, _sai__GetDigestRealmResponse *sai__GetDigestRealmResponse)
{	struct __sai__GetDigestRealm soap_tmp___sai__GetDigestRealm;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetDigestRealm";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetDigestRealm.sai__GetDigestRealm = sai__GetDigestRealm;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetDigestRealm(soap, &soap_tmp___sai__GetDigestRealm);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetDigestRealm(soap, &soap_tmp___sai__GetDigestRealm, "-sai:GetDigestRealm", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetDigestRealm(soap, &soap_tmp___sai__GetDigestRealm, "-sai:GetDigestRealm", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetDigestRealmResponse)
		return soap_closesock(soap);
	sai__GetDigestRealmResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetDigestRealmResponse->soap_get(soap, "sai:GetDigestRealmResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetKerberosOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetKerberosOptions *sai__SetKerberosOptions, _sai__SetKerberosOptionsResponse *sai__SetKerberosOptionsResponse)
{	struct __sai__SetKerberosOptions soap_tmp___sai__SetKerberosOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetKerberosOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetKerberosOptions.sai__SetKerberosOptions = sai__SetKerberosOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetKerberosOptions(soap, &soap_tmp___sai__SetKerberosOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetKerberosOptions(soap, &soap_tmp___sai__SetKerberosOptions, "-sai:SetKerberosOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetKerberosOptions(soap, &soap_tmp___sai__SetKerberosOptions, "-sai:SetKerberosOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetKerberosOptionsResponse)
		return soap_closesock(soap);
	sai__SetKerberosOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetKerberosOptionsResponse->soap_get(soap, "sai:SetKerberosOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetKerberosOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetKerberosOptions *sai__GetKerberosOptions, _sai__GetKerberosOptionsResponse *sai__GetKerberosOptionsResponse)
{	struct __sai__GetKerberosOptions soap_tmp___sai__GetKerberosOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetKerberosOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetKerberosOptions.sai__GetKerberosOptions = sai__GetKerberosOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetKerberosOptions(soap, &soap_tmp___sai__GetKerberosOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetKerberosOptions(soap, &soap_tmp___sai__GetKerberosOptions, "-sai:GetKerberosOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetKerberosOptions(soap, &soap_tmp___sai__GetKerberosOptions, "-sai:GetKerberosOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetKerberosOptionsResponse)
		return soap_closesock(soap);
	sai__GetKerberosOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetKerberosOptionsResponse->soap_get(soap, "sai:GetKerberosOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetEnabledInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetEnabledInterfaces *sai__SetEnabledInterfaces, _sai__SetEnabledInterfacesResponse *sai__SetEnabledInterfacesResponse)
{	struct __sai__SetEnabledInterfaces soap_tmp___sai__SetEnabledInterfaces;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetEnabledInterfaces";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetEnabledInterfaces.sai__SetEnabledInterfaces = sai__SetEnabledInterfaces;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetEnabledInterfaces(soap, &soap_tmp___sai__SetEnabledInterfaces);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetEnabledInterfaces(soap, &soap_tmp___sai__SetEnabledInterfaces, "-sai:SetEnabledInterfaces", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetEnabledInterfaces(soap, &soap_tmp___sai__SetEnabledInterfaces, "-sai:SetEnabledInterfaces", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetEnabledInterfacesResponse)
		return soap_closesock(soap);
	sai__SetEnabledInterfacesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetEnabledInterfacesResponse->soap_get(soap, "sai:SetEnabledInterfacesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetEnabledInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetEnabledInterfaces *sai__GetEnabledInterfaces, _sai__GetEnabledInterfacesResponse *sai__GetEnabledInterfacesResponse)
{	struct __sai__GetEnabledInterfaces soap_tmp___sai__GetEnabledInterfaces;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetEnabledInterfaces";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetEnabledInterfaces.sai__GetEnabledInterfaces = sai__GetEnabledInterfaces;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetEnabledInterfaces(soap, &soap_tmp___sai__GetEnabledInterfaces);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetEnabledInterfaces(soap, &soap_tmp___sai__GetEnabledInterfaces, "-sai:GetEnabledInterfaces", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetEnabledInterfaces(soap, &soap_tmp___sai__GetEnabledInterfaces, "-sai:GetEnabledInterfaces", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetEnabledInterfacesResponse)
		return soap_closesock(soap);
	sai__GetEnabledInterfacesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetEnabledInterfacesResponse->soap_get(soap, "sai:GetEnabledInterfacesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTlsOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTlsOptions *sai__SetTlsOptions, _sai__SetTlsOptionsResponse *sai__SetTlsOptionsResponse)
{	struct __sai__SetTlsOptions soap_tmp___sai__SetTlsOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetTlsOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetTlsOptions.sai__SetTlsOptions = sai__SetTlsOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetTlsOptions(soap, &soap_tmp___sai__SetTlsOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetTlsOptions(soap, &soap_tmp___sai__SetTlsOptions, "-sai:SetTlsOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetTlsOptions(soap, &soap_tmp___sai__SetTlsOptions, "-sai:SetTlsOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetTlsOptionsResponse)
		return soap_closesock(soap);
	sai__SetTlsOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetTlsOptionsResponse->soap_get(soap, "sai:SetTlsOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTlsOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTlsOptions *sai__GetTlsOptions, _sai__GetTlsOptionsResponse *sai__GetTlsOptionsResponse)
{	struct __sai__GetTlsOptions soap_tmp___sai__GetTlsOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetTlsOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetTlsOptions.sai__GetTlsOptions = sai__GetTlsOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetTlsOptions(soap, &soap_tmp___sai__GetTlsOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetTlsOptions(soap, &soap_tmp___sai__GetTlsOptions, "-sai:GetTlsOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetTlsOptions(soap, &soap_tmp___sai__GetTlsOptions, "-sai:GetTlsOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetTlsOptionsResponse)
		return soap_closesock(soap);
	sai__GetTlsOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetTlsOptionsResponse->soap_get(soap, "sai:GetTlsOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddTrustedRootCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddTrustedRootCertificate *sai__AddTrustedRootCertificate, _sai__AddTrustedRootCertificateResponse *sai__AddTrustedRootCertificateResponse)
{	struct __sai__AddTrustedRootCertificate soap_tmp___sai__AddTrustedRootCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/AddTrustedRootCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__AddTrustedRootCertificate.sai__AddTrustedRootCertificate = sai__AddTrustedRootCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__AddTrustedRootCertificate(soap, &soap_tmp___sai__AddTrustedRootCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__AddTrustedRootCertificate(soap, &soap_tmp___sai__AddTrustedRootCertificate, "-sai:AddTrustedRootCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__AddTrustedRootCertificate(soap, &soap_tmp___sai__AddTrustedRootCertificate, "-sai:AddTrustedRootCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__AddTrustedRootCertificateResponse)
		return soap_closesock(soap);
	sai__AddTrustedRootCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__AddTrustedRootCertificateResponse->soap_get(soap, "sai:AddTrustedRootCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTrustedRootCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTrustedRootCertificate *sai__GetTrustedRootCertificate, _sai__GetTrustedRootCertificateResponse *sai__GetTrustedRootCertificateResponse)
{	struct __sai__GetTrustedRootCertificate soap_tmp___sai__GetTrustedRootCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetTrustedRootCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetTrustedRootCertificate.sai__GetTrustedRootCertificate = sai__GetTrustedRootCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetTrustedRootCertificate(soap, &soap_tmp___sai__GetTrustedRootCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetTrustedRootCertificate(soap, &soap_tmp___sai__GetTrustedRootCertificate, "-sai:GetTrustedRootCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetTrustedRootCertificate(soap, &soap_tmp___sai__GetTrustedRootCertificate, "-sai:GetTrustedRootCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetTrustedRootCertificateResponse)
		return soap_closesock(soap);
	sai__GetTrustedRootCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetTrustedRootCertificateResponse->soap_get(soap, "sai:GetTrustedRootCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__DeleteTrustedRootCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__DeleteTrustedRootCertificate *sai__DeleteTrustedRootCertificate, _sai__DeleteTrustedRootCertificateResponse *sai__DeleteTrustedRootCertificateResponse)
{	struct __sai__DeleteTrustedRootCertificate soap_tmp___sai__DeleteTrustedRootCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/DeleteTrustedRootCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__DeleteTrustedRootCertificate.sai__DeleteTrustedRootCertificate = sai__DeleteTrustedRootCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__DeleteTrustedRootCertificate(soap, &soap_tmp___sai__DeleteTrustedRootCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__DeleteTrustedRootCertificate(soap, &soap_tmp___sai__DeleteTrustedRootCertificate, "-sai:DeleteTrustedRootCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__DeleteTrustedRootCertificate(soap, &soap_tmp___sai__DeleteTrustedRootCertificate, "-sai:DeleteTrustedRootCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__DeleteTrustedRootCertificateResponse)
		return soap_closesock(soap);
	sai__DeleteTrustedRootCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__DeleteTrustedRootCertificateResponse->soap_get(soap, "sai:DeleteTrustedRootCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumerateTrustedRootCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumerateTrustedRootCertificates *sai__EnumerateTrustedRootCertificates, _sai__EnumerateTrustedRootCertificatesResponse *sai__EnumerateTrustedRootCertificatesResponse)
{	struct __sai__EnumerateTrustedRootCertificates soap_tmp___sai__EnumerateTrustedRootCertificates;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/EnumerateTrustedRootCertificates";
	soap->encodingStyle = NULL;
	soap_tmp___sai__EnumerateTrustedRootCertificates.sai__EnumerateTrustedRootCertificates = sai__EnumerateTrustedRootCertificates;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__EnumerateTrustedRootCertificates(soap, &soap_tmp___sai__EnumerateTrustedRootCertificates);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__EnumerateTrustedRootCertificates(soap, &soap_tmp___sai__EnumerateTrustedRootCertificates, "-sai:EnumerateTrustedRootCertificates", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__EnumerateTrustedRootCertificates(soap, &soap_tmp___sai__EnumerateTrustedRootCertificates, "-sai:EnumerateTrustedRootCertificates", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__EnumerateTrustedRootCertificatesResponse)
		return soap_closesock(soap);
	sai__EnumerateTrustedRootCertificatesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__EnumerateTrustedRootCertificatesResponse->soap_get(soap, "sai:EnumerateTrustedRootCertificatesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTrustedFqdnCN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTrustedFqdnCN *sai__SetTrustedFqdnCN, _sai__SetTrustedFqdnCNResponse *sai__SetTrustedFqdnCNResponse)
{	struct __sai__SetTrustedFqdnCN soap_tmp___sai__SetTrustedFqdnCN;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetTrustedFqdnCN";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetTrustedFqdnCN.sai__SetTrustedFqdnCN = sai__SetTrustedFqdnCN;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetTrustedFqdnCN(soap, &soap_tmp___sai__SetTrustedFqdnCN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetTrustedFqdnCN(soap, &soap_tmp___sai__SetTrustedFqdnCN, "-sai:SetTrustedFqdnCN", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetTrustedFqdnCN(soap, &soap_tmp___sai__SetTrustedFqdnCN, "-sai:SetTrustedFqdnCN", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetTrustedFqdnCNResponse)
		return soap_closesock(soap);
	sai__SetTrustedFqdnCNResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetTrustedFqdnCNResponse->soap_get(soap, "sai:SetTrustedFqdnCNResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTrustedFqdnCN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTrustedFqdnCN *sai__GetTrustedFqdnCN, _sai__GetTrustedFqdnCNResponse *sai__GetTrustedFqdnCNResponse)
{	struct __sai__GetTrustedFqdnCN soap_tmp___sai__GetTrustedFqdnCN;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetTrustedFqdnCN";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetTrustedFqdnCN.sai__GetTrustedFqdnCN = sai__GetTrustedFqdnCN;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetTrustedFqdnCN(soap, &soap_tmp___sai__GetTrustedFqdnCN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetTrustedFqdnCN(soap, &soap_tmp___sai__GetTrustedFqdnCN, "-sai:GetTrustedFqdnCN", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetTrustedFqdnCN(soap, &soap_tmp___sai__GetTrustedFqdnCN, "-sai:GetTrustedFqdnCN", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetTrustedFqdnCNResponse)
		return soap_closesock(soap);
	sai__GetTrustedFqdnCNResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetTrustedFqdnCNResponse->soap_get(soap, "sai:GetTrustedFqdnCNResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetCRL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetCRL *sai__SetCRL, _sai__SetCRLResponse *sai__SetCRLResponse)
{	struct __sai__SetCRL soap_tmp___sai__SetCRL;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetCRL";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetCRL.sai__SetCRL = sai__SetCRL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetCRL(soap, &soap_tmp___sai__SetCRL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetCRL(soap, &soap_tmp___sai__SetCRL, "-sai:SetCRL", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetCRL(soap, &soap_tmp___sai__SetCRL, "-sai:SetCRL", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetCRLResponse)
		return soap_closesock(soap);
	sai__SetCRLResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetCRLResponse->soap_get(soap, "sai:SetCRLResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetCRL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetCRL *sai__GetCRL, _sai__GetCRLResponse *sai__GetCRLResponse)
{	struct __sai__GetCRL soap_tmp___sai__GetCRL;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetCRL";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetCRL.sai__GetCRL = sai__GetCRL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetCRL(soap, &soap_tmp___sai__GetCRL);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetCRL(soap, &soap_tmp___sai__GetCRL, "-sai:GetCRL", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetCRL(soap, &soap_tmp___sai__GetCRL, "-sai:GetCRL", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetCRLResponse)
		return soap_closesock(soap);
	sai__GetCRLResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetCRLResponse->soap_get(soap, "sai:GetCRLResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetServerCertificateReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetServerCertificateReq *sai__GetServerCertificateReq, _sai__GetServerCertificateReqResponse *sai__GetServerCertificateReqResponse)
{	struct __sai__GetServerCertificateReq soap_tmp___sai__GetServerCertificateReq;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetServerCertificateReq";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetServerCertificateReq.sai__GetServerCertificateReq = sai__GetServerCertificateReq;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetServerCertificateReq(soap, &soap_tmp___sai__GetServerCertificateReq);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetServerCertificateReq(soap, &soap_tmp___sai__GetServerCertificateReq, "-sai:GetServerCertificateReq", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetServerCertificateReq(soap, &soap_tmp___sai__GetServerCertificateReq, "-sai:GetServerCertificateReq", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetServerCertificateReqResponse)
		return soap_closesock(soap);
	sai__GetServerCertificateReqResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetServerCertificateReqResponse->soap_get(soap, "sai:GetServerCertificateReqResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetPkiCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetPkiCapabilities *sai__GetPkiCapabilities, _sai__GetPkiCapabilitiesResponse *sai__GetPkiCapabilitiesResponse)
{	struct __sai__GetPkiCapabilities soap_tmp___sai__GetPkiCapabilities;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetPkiCapabilities";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetPkiCapabilities.sai__GetPkiCapabilities = sai__GetPkiCapabilities;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetPkiCapabilities(soap, &soap_tmp___sai__GetPkiCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetPkiCapabilities(soap, &soap_tmp___sai__GetPkiCapabilities, "-sai:GetPkiCapabilities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetPkiCapabilities(soap, &soap_tmp___sai__GetPkiCapabilities, "-sai:GetPkiCapabilities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetPkiCapabilitiesResponse)
		return soap_closesock(soap);
	sai__GetPkiCapabilitiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetPkiCapabilitiesResponse->soap_get(soap, "sai:GetPkiCapabilitiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetPowerSavingOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetPowerSavingOptions *sai__SetPowerSavingOptions, _sai__SetPowerSavingOptionsResponse *sai__SetPowerSavingOptionsResponse)
{	struct __sai__SetPowerSavingOptions soap_tmp___sai__SetPowerSavingOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetPowerSavingOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetPowerSavingOptions.sai__SetPowerSavingOptions = sai__SetPowerSavingOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetPowerSavingOptions(soap, &soap_tmp___sai__SetPowerSavingOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetPowerSavingOptions(soap, &soap_tmp___sai__SetPowerSavingOptions, "-sai:SetPowerSavingOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetPowerSavingOptions(soap, &soap_tmp___sai__SetPowerSavingOptions, "-sai:SetPowerSavingOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetPowerSavingOptionsResponse)
		return soap_closesock(soap);
	sai__SetPowerSavingOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetPowerSavingOptionsResponse->soap_get(soap, "sai:SetPowerSavingOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetPowerSavingOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetPowerSavingOptions *sai__GetPowerSavingOptions, _sai__GetPowerSavingOptionsResponse *sai__GetPowerSavingOptionsResponse)
{	struct __sai__GetPowerSavingOptions soap_tmp___sai__GetPowerSavingOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/GetPowerSavingOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetPowerSavingOptions.sai__GetPowerSavingOptions = sai__GetPowerSavingOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetPowerSavingOptions(soap, &soap_tmp___sai__GetPowerSavingOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetPowerSavingOptions(soap, &soap_tmp___sai__GetPowerSavingOptions, "-sai:GetPowerSavingOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetPowerSavingOptions(soap, &soap_tmp___sai__GetPowerSavingOptions, "-sai:GetPowerSavingOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetPowerSavingOptionsResponse)
		return soap_closesock(soap);
	sai__GetPowerSavingOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetPowerSavingOptionsResponse->soap_get(soap, "sai:GetPowerSavingOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSPSK(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSPSK *sai__SetTLSPSK, _sai__SetTLSPSKResponse *sai__SetTLSPSKResponse)
{	struct __sai__SetTLSPSK soap_tmp___sai__SetTLSPSK;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/SetTLSPSK";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetTLSPSK.sai__SetTLSPSK = sai__SetTLSPSK;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetTLSPSK(soap, &soap_tmp___sai__SetTLSPSK);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetTLSPSK(soap, &soap_tmp___sai__SetTLSPSK, "-sai:SetTLSPSK", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetTLSPSK(soap, &soap_tmp___sai__SetTLSPSK, "-sai:SetTLSPSK", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetTLSPSKResponse)
		return soap_closesock(soap);
	sai__SetTLSPSKResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetTLSPSKResponse->soap_get(soap, "sai:SetTLSPSKResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__PartialUnprovision(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__PartialUnprovision *sai__PartialUnprovision, _sai__PartialUnprovisionResponse *sai__PartialUnprovisionResponse)
{	struct __sai__PartialUnprovision soap_tmp___sai__PartialUnprovision;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2004/01/PartialUnprovision";
	soap->encodingStyle = NULL;
	soap_tmp___sai__PartialUnprovision.sai__PartialUnprovision = sai__PartialUnprovision;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__PartialUnprovision(soap, &soap_tmp___sai__PartialUnprovision);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__PartialUnprovision(soap, &soap_tmp___sai__PartialUnprovision, "-sai:PartialUnprovision", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__PartialUnprovision(soap, &soap_tmp___sai__PartialUnprovision, "-sai:PartialUnprovision", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__PartialUnprovisionResponse)
		return soap_closesock(soap);
	sai__PartialUnprovisionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__PartialUnprovisionResponse->soap_get(soap, "sai:PartialUnprovisionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetMEBxPassword(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetMEBxPassword *sai__SetMEBxPassword, _sai__SetMEBxPasswordResponse *sai__SetMEBxPasswordResponse)
{	struct __sai__SetMEBxPassword soap_tmp___sai__SetMEBxPassword;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetMEBxPassword";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetMEBxPassword.sai__SetMEBxPassword = sai__SetMEBxPassword;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetMEBxPassword(soap, &soap_tmp___sai__SetMEBxPassword);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetMEBxPassword(soap, &soap_tmp___sai__SetMEBxPassword, "-sai:SetMEBxPassword", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetMEBxPassword(soap, &soap_tmp___sai__SetMEBxPassword, "-sai:SetMEBxPassword", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetMEBxPasswordResponse)
		return soap_closesock(soap);
	sai__SetMEBxPasswordResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetMEBxPasswordResponse->soap_get(soap, "sai:SetMEBxPasswordResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetProvisioningServerOTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetProvisioningServerOTP *sai__SetProvisioningServerOTP, _sai__SetProvisioningServerOTPResponse *sai__SetProvisioningServerOTPResponse)
{	struct __sai__SetProvisioningServerOTP soap_tmp___sai__SetProvisioningServerOTP;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetProvisioningServerOTP";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetProvisioningServerOTP.sai__SetProvisioningServerOTP = sai__SetProvisioningServerOTP;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetProvisioningServerOTP(soap, &soap_tmp___sai__SetProvisioningServerOTP);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetProvisioningServerOTP(soap, &soap_tmp___sai__SetProvisioningServerOTP, "-sai:SetProvisioningServerOTP", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetProvisioningServerOTP(soap, &soap_tmp___sai__SetProvisioningServerOTP, "-sai:SetProvisioningServerOTP", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetProvisioningServerOTPResponse)
		return soap_closesock(soap);
	sai__SetProvisioningServerOTPResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetProvisioningServerOTPResponse->soap_get(soap, "sai:SetProvisioningServerOTPResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningServerOTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningServerOTP *sai__GetProvisioningServerOTP, _sai__GetProvisioningServerOTPResponse *sai__GetProvisioningServerOTPResponse)
{	struct __sai__GetProvisioningServerOTP soap_tmp___sai__GetProvisioningServerOTP;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetProvisioningServerOTP";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetProvisioningServerOTP.sai__GetProvisioningServerOTP = sai__GetProvisioningServerOTP;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetProvisioningServerOTP(soap, &soap_tmp___sai__GetProvisioningServerOTP);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetProvisioningServerOTP(soap, &soap_tmp___sai__GetProvisioningServerOTP, "-sai:GetProvisioningServerOTP", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetProvisioningServerOTP(soap, &soap_tmp___sai__GetProvisioningServerOTP, "-sai:GetProvisioningServerOTP", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetProvisioningServerOTPResponse)
		return soap_closesock(soap);
	sai__GetProvisioningServerOTPResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetProvisioningServerOTPResponse->soap_get(soap, "sai:GetProvisioningServerOTPResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumerateCertificateHashEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumerateCertificateHashEntries *sai__EnumerateCertificateHashEntries, _sai__EnumerateCertificateHashEntriesResponse *sai__EnumerateCertificateHashEntriesResponse)
{	struct __sai__EnumerateCertificateHashEntries soap_tmp___sai__EnumerateCertificateHashEntries;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/EnumerateCertificateHashEntries";
	soap->encodingStyle = NULL;
	soap_tmp___sai__EnumerateCertificateHashEntries.sai__EnumerateCertificateHashEntries = sai__EnumerateCertificateHashEntries;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__EnumerateCertificateHashEntries(soap, &soap_tmp___sai__EnumerateCertificateHashEntries);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__EnumerateCertificateHashEntries(soap, &soap_tmp___sai__EnumerateCertificateHashEntries, "-sai:EnumerateCertificateHashEntries", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__EnumerateCertificateHashEntries(soap, &soap_tmp___sai__EnumerateCertificateHashEntries, "-sai:EnumerateCertificateHashEntries", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__EnumerateCertificateHashEntriesResponse)
		return soap_closesock(soap);
	sai__EnumerateCertificateHashEntriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__EnumerateCertificateHashEntriesResponse->soap_get(soap, "sai:EnumerateCertificateHashEntriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetCertificateHashEntry *sai__GetCertificateHashEntry, _sai__GetCertificateHashEntryResponse *sai__GetCertificateHashEntryResponse)
{	struct __sai__GetCertificateHashEntry soap_tmp___sai__GetCertificateHashEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetCertificateHashEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetCertificateHashEntry.sai__GetCertificateHashEntry = sai__GetCertificateHashEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetCertificateHashEntry(soap, &soap_tmp___sai__GetCertificateHashEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetCertificateHashEntry(soap, &soap_tmp___sai__GetCertificateHashEntry, "-sai:GetCertificateHashEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetCertificateHashEntry(soap, &soap_tmp___sai__GetCertificateHashEntry, "-sai:GetCertificateHashEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetCertificateHashEntryResponse)
		return soap_closesock(soap);
	sai__GetCertificateHashEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetCertificateHashEntryResponse->soap_get(soap, "sai:GetCertificateHashEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddCertificateHashEntry *sai__AddCertificateHashEntry, _sai__AddCertificateHashEntryResponse *sai__AddCertificateHashEntryResponse)
{	struct __sai__AddCertificateHashEntry soap_tmp___sai__AddCertificateHashEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/AddCertificateHashEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__AddCertificateHashEntry.sai__AddCertificateHashEntry = sai__AddCertificateHashEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__AddCertificateHashEntry(soap, &soap_tmp___sai__AddCertificateHashEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__AddCertificateHashEntry(soap, &soap_tmp___sai__AddCertificateHashEntry, "-sai:AddCertificateHashEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__AddCertificateHashEntry(soap, &soap_tmp___sai__AddCertificateHashEntry, "-sai:AddCertificateHashEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__AddCertificateHashEntryResponse)
		return soap_closesock(soap);
	sai__AddCertificateHashEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__AddCertificateHashEntryResponse->soap_get(soap, "sai:AddCertificateHashEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__DeleteCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__DeleteCertificateHashEntry *sai__DeleteCertificateHashEntry, _sai__DeleteCertificateHashEntryResponse *sai__DeleteCertificateHashEntryResponse)
{	struct __sai__DeleteCertificateHashEntry soap_tmp___sai__DeleteCertificateHashEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/DeleteCertificateHashEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__DeleteCertificateHashEntry.sai__DeleteCertificateHashEntry = sai__DeleteCertificateHashEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__DeleteCertificateHashEntry(soap, &soap_tmp___sai__DeleteCertificateHashEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__DeleteCertificateHashEntry(soap, &soap_tmp___sai__DeleteCertificateHashEntry, "-sai:DeleteCertificateHashEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__DeleteCertificateHashEntry(soap, &soap_tmp___sai__DeleteCertificateHashEntry, "-sai:DeleteCertificateHashEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__DeleteCertificateHashEntryResponse)
		return soap_closesock(soap);
	sai__DeleteCertificateHashEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__DeleteCertificateHashEntryResponse->soap_get(soap, "sai:DeleteCertificateHashEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnableCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnableCertificateHashEntry *sai__EnableCertificateHashEntry, _sai__EnableCertificateHashEntryResponse *sai__EnableCertificateHashEntryResponse)
{	struct __sai__EnableCertificateHashEntry soap_tmp___sai__EnableCertificateHashEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/EnableCertificateHashEntry";
	soap->encodingStyle = NULL;
	soap_tmp___sai__EnableCertificateHashEntry.sai__EnableCertificateHashEntry = sai__EnableCertificateHashEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__EnableCertificateHashEntry(soap, &soap_tmp___sai__EnableCertificateHashEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__EnableCertificateHashEntry(soap, &soap_tmp___sai__EnableCertificateHashEntry, "-sai:EnableCertificateHashEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__EnableCertificateHashEntry(soap, &soap_tmp___sai__EnableCertificateHashEntry, "-sai:EnableCertificateHashEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__EnableCertificateHashEntryResponse)
		return soap_closesock(soap);
	sai__EnableCertificateHashEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__EnableCertificateHashEntryResponse->soap_get(soap, "sai:EnableCertificateHashEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetZeroTouchConfigurationMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetZeroTouchConfigurationMode *sai__GetZeroTouchConfigurationMode, _sai__GetZeroTouchConfigurationModeResponse *sai__GetZeroTouchConfigurationModeResponse)
{	struct __sai__GetZeroTouchConfigurationMode soap_tmp___sai__GetZeroTouchConfigurationMode;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetZeroTouchConfigurationMode";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetZeroTouchConfigurationMode.sai__GetZeroTouchConfigurationMode = sai__GetZeroTouchConfigurationMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetZeroTouchConfigurationMode(soap, &soap_tmp___sai__GetZeroTouchConfigurationMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetZeroTouchConfigurationMode(soap, &soap_tmp___sai__GetZeroTouchConfigurationMode, "-sai:GetZeroTouchConfigurationMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetZeroTouchConfigurationMode(soap, &soap_tmp___sai__GetZeroTouchConfigurationMode, "-sai:GetZeroTouchConfigurationMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetZeroTouchConfigurationModeResponse)
		return soap_closesock(soap);
	sai__GetZeroTouchConfigurationModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetZeroTouchConfigurationModeResponse->soap_get(soap, "sai:GetZeroTouchConfigurationModeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetZeroTouchConfigurationMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetZeroTouchConfigurationMode *sai__SetZeroTouchConfigurationMode, _sai__SetZeroTouchConfigurationModeResponse *sai__SetZeroTouchConfigurationModeResponse)
{	struct __sai__SetZeroTouchConfigurationMode soap_tmp___sai__SetZeroTouchConfigurationMode;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetZeroTouchConfigurationMode";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetZeroTouchConfigurationMode.sai__SetZeroTouchConfigurationMode = sai__SetZeroTouchConfigurationMode;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetZeroTouchConfigurationMode(soap, &soap_tmp___sai__SetZeroTouchConfigurationMode);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetZeroTouchConfigurationMode(soap, &soap_tmp___sai__SetZeroTouchConfigurationMode, "-sai:SetZeroTouchConfigurationMode", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetZeroTouchConfigurationMode(soap, &soap_tmp___sai__SetZeroTouchConfigurationMode, "-sai:SetZeroTouchConfigurationMode", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetZeroTouchConfigurationModeResponse)
		return soap_closesock(soap);
	sai__SetZeroTouchConfigurationModeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetZeroTouchConfigurationModeResponse->soap_get(soap, "sai:SetZeroTouchConfigurationModeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningAuditRecord(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningAuditRecord *sai__GetProvisioningAuditRecord, _sai__GetProvisioningAuditRecordResponse *sai__GetProvisioningAuditRecordResponse)
{	struct __sai__GetProvisioningAuditRecord soap_tmp___sai__GetProvisioningAuditRecord;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetProvisioningAuditRecord";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetProvisioningAuditRecord.sai__GetProvisioningAuditRecord = sai__GetProvisioningAuditRecord;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetProvisioningAuditRecord(soap, &soap_tmp___sai__GetProvisioningAuditRecord);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetProvisioningAuditRecord(soap, &soap_tmp___sai__GetProvisioningAuditRecord, "-sai:GetProvisioningAuditRecord", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetProvisioningAuditRecord(soap, &soap_tmp___sai__GetProvisioningAuditRecord, "-sai:GetProvisioningAuditRecord", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetProvisioningAuditRecordResponse)
		return soap_closesock(soap);
	sai__GetProvisioningAuditRecordResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetProvisioningAuditRecordResponse->soap_get(soap, "sai:GetProvisioningAuditRecordResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningPID(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningPID *sai__GetProvisioningPID, _sai__GetProvisioningPIDResponse *sai__GetProvisioningPIDResponse)
{	struct __sai__GetProvisioningPID soap_tmp___sai__GetProvisioningPID;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetProvisioningPID";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetProvisioningPID.sai__GetProvisioningPID = sai__GetProvisioningPID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetProvisioningPID(soap, &soap_tmp___sai__GetProvisioningPID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetProvisioningPID(soap, &soap_tmp___sai__GetProvisioningPID, "-sai:GetProvisioningPID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetProvisioningPID(soap, &soap_tmp___sai__GetProvisioningPID, "-sai:GetProvisioningPID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetProvisioningPIDResponse)
		return soap_closesock(soap);
	sai__GetProvisioningPIDResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetProvisioningPIDResponse->soap_get(soap, "sai:GetProvisioningPIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__ExtendProvisioningPeriod(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__ExtendProvisioningPeriod *sai__ExtendProvisioningPeriod, _sai__ExtendProvisioningPeriodResponse *sai__ExtendProvisioningPeriodResponse)
{	struct __sai__ExtendProvisioningPeriod soap_tmp___sai__ExtendProvisioningPeriod;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/ExtendProvisioningPeriod";
	soap->encodingStyle = NULL;
	soap_tmp___sai__ExtendProvisioningPeriod.sai__ExtendProvisioningPeriod = sai__ExtendProvisioningPeriod;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__ExtendProvisioningPeriod(soap, &soap_tmp___sai__ExtendProvisioningPeriod);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__ExtendProvisioningPeriod(soap, &soap_tmp___sai__ExtendProvisioningPeriod, "-sai:ExtendProvisioningPeriod", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__ExtendProvisioningPeriod(soap, &soap_tmp___sai__ExtendProvisioningPeriod, "-sai:ExtendProvisioningPeriod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__ExtendProvisioningPeriodResponse)
		return soap_closesock(soap);
	sai__ExtendProvisioningPeriodResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__ExtendProvisioningPeriodResponse->soap_get(soap, "sai:ExtendProvisioningPeriodResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetRealmAuthOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetRealmAuthOptions *sai__GetRealmAuthOptions, _sai__GetRealmAuthOptionsResponse *sai__GetRealmAuthOptionsResponse)
{	struct __sai__GetRealmAuthOptions soap_tmp___sai__GetRealmAuthOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetRealmAuthOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetRealmAuthOptions.sai__GetRealmAuthOptions = sai__GetRealmAuthOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetRealmAuthOptions(soap, &soap_tmp___sai__GetRealmAuthOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetRealmAuthOptions(soap, &soap_tmp___sai__GetRealmAuthOptions, "-sai:GetRealmAuthOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetRealmAuthOptions(soap, &soap_tmp___sai__GetRealmAuthOptions, "-sai:GetRealmAuthOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetRealmAuthOptionsResponse)
		return soap_closesock(soap);
	sai__GetRealmAuthOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetRealmAuthOptionsResponse->soap_get(soap, "sai:GetRealmAuthOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetRealmAuthOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetRealmAuthOptions *sai__SetRealmAuthOptions, _sai__SetRealmAuthOptionsResponse *sai__SetRealmAuthOptionsResponse)
{	struct __sai__SetRealmAuthOptions soap_tmp___sai__SetRealmAuthOptions;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetRealmAuthOptions";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetRealmAuthOptions.sai__SetRealmAuthOptions = sai__SetRealmAuthOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetRealmAuthOptions(soap, &soap_tmp___sai__SetRealmAuthOptions);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetRealmAuthOptions(soap, &soap_tmp___sai__SetRealmAuthOptions, "-sai:SetRealmAuthOptions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetRealmAuthOptions(soap, &soap_tmp___sai__SetRealmAuthOptions, "-sai:SetRealmAuthOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetRealmAuthOptionsResponse)
		return soap_closesock(soap);
	sai__SetRealmAuthOptionsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetRealmAuthOptionsResponse->soap_get(soap, "sai:SetRealmAuthOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetEnvironmentDetection(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetEnvironmentDetection *sai__SetEnvironmentDetection, _sai__SetEnvironmentDetectionResponse *sai__SetEnvironmentDetectionResponse)
{	struct __sai__SetEnvironmentDetection soap_tmp___sai__SetEnvironmentDetection;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetEnvironmentDetection";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetEnvironmentDetection.sai__SetEnvironmentDetection = sai__SetEnvironmentDetection;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetEnvironmentDetection(soap, &soap_tmp___sai__SetEnvironmentDetection);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetEnvironmentDetection(soap, &soap_tmp___sai__SetEnvironmentDetection, "-sai:SetEnvironmentDetection", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetEnvironmentDetection(soap, &soap_tmp___sai__SetEnvironmentDetection, "-sai:SetEnvironmentDetection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetEnvironmentDetectionResponse)
		return soap_closesock(soap);
	sai__SetEnvironmentDetectionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetEnvironmentDetectionResponse->soap_get(soap, "sai:SetEnvironmentDetectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetEnvironmentDetection(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetEnvironmentDetection *sai__GetEnvironmentDetection, _sai__GetEnvironmentDetectionResponse *sai__GetEnvironmentDetectionResponse)
{	struct __sai__GetEnvironmentDetection soap_tmp___sai__GetEnvironmentDetection;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetEnvironmentDetection";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetEnvironmentDetection.sai__GetEnvironmentDetection = sai__GetEnvironmentDetection;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetEnvironmentDetection(soap, &soap_tmp___sai__GetEnvironmentDetection);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetEnvironmentDetection(soap, &soap_tmp___sai__GetEnvironmentDetection, "-sai:GetEnvironmentDetection", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetEnvironmentDetection(soap, &soap_tmp___sai__GetEnvironmentDetection, "-sai:GetEnvironmentDetection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetEnvironmentDetectionResponse)
		return soap_closesock(soap);
	sai__GetEnvironmentDetectionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetEnvironmentDetectionResponse->soap_get(soap, "sai:GetEnvironmentDetectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumeratePowerPackages(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumeratePowerPackages *sai__EnumeratePowerPackages, _sai__EnumeratePowerPackagesResponse *sai__EnumeratePowerPackagesResponse)
{	struct __sai__EnumeratePowerPackages soap_tmp___sai__EnumeratePowerPackages;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/EnumeratePowerPackages";
	soap->encodingStyle = NULL;
	soap_tmp___sai__EnumeratePowerPackages.sai__EnumeratePowerPackages = sai__EnumeratePowerPackages;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__EnumeratePowerPackages(soap, &soap_tmp___sai__EnumeratePowerPackages);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__EnumeratePowerPackages(soap, &soap_tmp___sai__EnumeratePowerPackages, "-sai:EnumeratePowerPackages", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__EnumeratePowerPackages(soap, &soap_tmp___sai__EnumeratePowerPackages, "-sai:EnumeratePowerPackages", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__EnumeratePowerPackagesResponse)
		return soap_closesock(soap);
	sai__EnumeratePowerPackagesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__EnumeratePowerPackagesResponse->soap_get(soap, "sai:EnumeratePowerPackagesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetPowerPackage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetPowerPackage *sai__GetPowerPackage, _sai__GetPowerPackageResponse *sai__GetPowerPackageResponse)
{	struct __sai__GetPowerPackage soap_tmp___sai__GetPowerPackage;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetPowerPackage";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetPowerPackage.sai__GetPowerPackage = sai__GetPowerPackage;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetPowerPackage(soap, &soap_tmp___sai__GetPowerPackage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetPowerPackage(soap, &soap_tmp___sai__GetPowerPackage, "-sai:GetPowerPackage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetPowerPackage(soap, &soap_tmp___sai__GetPowerPackage, "-sai:GetPowerPackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetPowerPackageResponse)
		return soap_closesock(soap);
	sai__GetPowerPackageResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetPowerPackageResponse->soap_get(soap, "sai:GetPowerPackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetActivePowerPackage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetActivePowerPackage *sai__GetActivePowerPackage, _sai__GetActivePowerPackageResponse *sai__GetActivePowerPackageResponse)
{	struct __sai__GetActivePowerPackage soap_tmp___sai__GetActivePowerPackage;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetActivePowerPackage";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetActivePowerPackage.sai__GetActivePowerPackage = sai__GetActivePowerPackage;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetActivePowerPackage(soap, &soap_tmp___sai__GetActivePowerPackage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetActivePowerPackage(soap, &soap_tmp___sai__GetActivePowerPackage, "-sai:GetActivePowerPackage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetActivePowerPackage(soap, &soap_tmp___sai__GetActivePowerPackage, "-sai:GetActivePowerPackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetActivePowerPackageResponse)
		return soap_closesock(soap);
	sai__GetActivePowerPackageResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetActivePowerPackageResponse->soap_get(soap, "sai:GetActivePowerPackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetActivePowerPackage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetActivePowerPackage *sai__SetActivePowerPackage, _sai__SetActivePowerPackageResponse *sai__SetActivePowerPackageResponse)
{	struct __sai__SetActivePowerPackage soap_tmp___sai__SetActivePowerPackage;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetActivePowerPackage";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetActivePowerPackage.sai__SetActivePowerPackage = sai__SetActivePowerPackage;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetActivePowerPackage(soap, &soap_tmp___sai__SetActivePowerPackage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetActivePowerPackage(soap, &soap_tmp___sai__SetActivePowerPackage, "-sai:SetActivePowerPackage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetActivePowerPackage(soap, &soap_tmp___sai__SetActivePowerPackage, "-sai:SetActivePowerPackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetActivePowerPackageResponse)
		return soap_closesock(soap);
	sai__SetActivePowerPackageResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetActivePowerPackageResponse->soap_get(soap, "sai:SetActivePowerPackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetGlobalPowerPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetGlobalPowerPolicy *sai__SetGlobalPowerPolicy, _sai__SetGlobalPowerPolicyResponse *sai__SetGlobalPowerPolicyResponse)
{	struct __sai__SetGlobalPowerPolicy soap_tmp___sai__SetGlobalPowerPolicy;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetGlobalPowerPolicy";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetGlobalPowerPolicy.sai__SetGlobalPowerPolicy = sai__SetGlobalPowerPolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetGlobalPowerPolicy(soap, &soap_tmp___sai__SetGlobalPowerPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetGlobalPowerPolicy(soap, &soap_tmp___sai__SetGlobalPowerPolicy, "-sai:SetGlobalPowerPolicy", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetGlobalPowerPolicy(soap, &soap_tmp___sai__SetGlobalPowerPolicy, "-sai:SetGlobalPowerPolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetGlobalPowerPolicyResponse)
		return soap_closesock(soap);
	sai__SetGlobalPowerPolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetGlobalPowerPolicyResponse->soap_get(soap, "sai:SetGlobalPowerPolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetGlobalPowerPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetGlobalPowerPolicy *sai__GetGlobalPowerPolicy, _sai__GetGlobalPowerPolicyResponse *sai__GetGlobalPowerPolicyResponse)
{	struct __sai__GetGlobalPowerPolicy soap_tmp___sai__GetGlobalPowerPolicy;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetGlobalPowerPolicy";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetGlobalPowerPolicy.sai__GetGlobalPowerPolicy = sai__GetGlobalPowerPolicy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetGlobalPowerPolicy(soap, &soap_tmp___sai__GetGlobalPowerPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetGlobalPowerPolicy(soap, &soap_tmp___sai__GetGlobalPowerPolicy, "-sai:GetGlobalPowerPolicy", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetGlobalPowerPolicy(soap, &soap_tmp___sai__GetGlobalPowerPolicy, "-sai:GetGlobalPowerPolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetGlobalPowerPolicyResponse)
		return soap_closesock(soap);
	sai__GetGlobalPowerPolicyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetGlobalPowerPolicyResponse->soap_get(soap, "sai:GetGlobalPowerPolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreAddKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreAddKey *sai__CertStoreAddKey, _sai__CertStoreAddKeyResponse *sai__CertStoreAddKeyResponse)
{	struct __sai__CertStoreAddKey soap_tmp___sai__CertStoreAddKey;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreAddKey";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreAddKey.sai__CertStoreAddKey = sai__CertStoreAddKey;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreAddKey(soap, &soap_tmp___sai__CertStoreAddKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreAddKey(soap, &soap_tmp___sai__CertStoreAddKey, "-sai:CertStoreAddKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreAddKey(soap, &soap_tmp___sai__CertStoreAddKey, "-sai:CertStoreAddKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreAddKeyResponse)
		return soap_closesock(soap);
	sai__CertStoreAddKeyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreAddKeyResponse->soap_get(soap, "sai:CertStoreAddKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreEnumerateKeys(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreEnumerateKeys *sai__CertStoreEnumerateKeys, _sai__CertStoreEnumerateKeysResponse *sai__CertStoreEnumerateKeysResponse)
{	struct __sai__CertStoreEnumerateKeys soap_tmp___sai__CertStoreEnumerateKeys;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreEnumerateKeys";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreEnumerateKeys.sai__CertStoreEnumerateKeys = sai__CertStoreEnumerateKeys;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreEnumerateKeys(soap, &soap_tmp___sai__CertStoreEnumerateKeys);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreEnumerateKeys(soap, &soap_tmp___sai__CertStoreEnumerateKeys, "-sai:CertStoreEnumerateKeys", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreEnumerateKeys(soap, &soap_tmp___sai__CertStoreEnumerateKeys, "-sai:CertStoreEnumerateKeys", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreEnumerateKeysResponse)
		return soap_closesock(soap);
	sai__CertStoreEnumerateKeysResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreEnumerateKeysResponse->soap_get(soap, "sai:CertStoreEnumerateKeysResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreGetKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreGetKey *sai__CertStoreGetKey, _sai__CertStoreGetKeyResponse *sai__CertStoreGetKeyResponse)
{	struct __sai__CertStoreGetKey soap_tmp___sai__CertStoreGetKey;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreGetKey";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreGetKey.sai__CertStoreGetKey = sai__CertStoreGetKey;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreGetKey(soap, &soap_tmp___sai__CertStoreGetKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreGetKey(soap, &soap_tmp___sai__CertStoreGetKey, "-sai:CertStoreGetKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreGetKey(soap, &soap_tmp___sai__CertStoreGetKey, "-sai:CertStoreGetKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreGetKeyResponse)
		return soap_closesock(soap);
	sai__CertStoreGetKeyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreGetKeyResponse->soap_get(soap, "sai:CertStoreGetKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreRemoveKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreRemoveKey *sai__CertStoreRemoveKey, _sai__CertStoreRemoveKeyResponse *sai__CertStoreRemoveKeyResponse)
{	struct __sai__CertStoreRemoveKey soap_tmp___sai__CertStoreRemoveKey;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreRemoveKey";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreRemoveKey.sai__CertStoreRemoveKey = sai__CertStoreRemoveKey;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreRemoveKey(soap, &soap_tmp___sai__CertStoreRemoveKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreRemoveKey(soap, &soap_tmp___sai__CertStoreRemoveKey, "-sai:CertStoreRemoveKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreRemoveKey(soap, &soap_tmp___sai__CertStoreRemoveKey, "-sai:CertStoreRemoveKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreRemoveKeyResponse)
		return soap_closesock(soap);
	sai__CertStoreRemoveKeyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreRemoveKeyResponse->soap_get(soap, "sai:CertStoreRemoveKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreAddCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreAddCertificate *sai__CertStoreAddCertificate, _sai__CertStoreAddCertificateResponse *sai__CertStoreAddCertificateResponse)
{	struct __sai__CertStoreAddCertificate soap_tmp___sai__CertStoreAddCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreAddCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreAddCertificate.sai__CertStoreAddCertificate = sai__CertStoreAddCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreAddCertificate(soap, &soap_tmp___sai__CertStoreAddCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreAddCertificate(soap, &soap_tmp___sai__CertStoreAddCertificate, "-sai:CertStoreAddCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreAddCertificate(soap, &soap_tmp___sai__CertStoreAddCertificate, "-sai:CertStoreAddCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreAddCertificateResponse)
		return soap_closesock(soap);
	sai__CertStoreAddCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreAddCertificateResponse->soap_get(soap, "sai:CertStoreAddCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreGetCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreGetCertificate *sai__CertStoreGetCertificate, _sai__CertStoreGetCertificateResponse *sai__CertStoreGetCertificateResponse)
{	struct __sai__CertStoreGetCertificate soap_tmp___sai__CertStoreGetCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreGetCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreGetCertificate.sai__CertStoreGetCertificate = sai__CertStoreGetCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreGetCertificate(soap, &soap_tmp___sai__CertStoreGetCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreGetCertificate(soap, &soap_tmp___sai__CertStoreGetCertificate, "-sai:CertStoreGetCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreGetCertificate(soap, &soap_tmp___sai__CertStoreGetCertificate, "-sai:CertStoreGetCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreGetCertificateResponse)
		return soap_closesock(soap);
	sai__CertStoreGetCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreGetCertificateResponse->soap_get(soap, "sai:CertStoreGetCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreEnumerateCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreEnumerateCertificates *sai__CertStoreEnumerateCertificates, _sai__CertStoreEnumerateCertificatesResponse *sai__CertStoreEnumerateCertificatesResponse)
{	struct __sai__CertStoreEnumerateCertificates soap_tmp___sai__CertStoreEnumerateCertificates;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreEnumerateCertificates";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreEnumerateCertificates.sai__CertStoreEnumerateCertificates = sai__CertStoreEnumerateCertificates;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreEnumerateCertificates(soap, &soap_tmp___sai__CertStoreEnumerateCertificates);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreEnumerateCertificates(soap, &soap_tmp___sai__CertStoreEnumerateCertificates, "-sai:CertStoreEnumerateCertificates", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreEnumerateCertificates(soap, &soap_tmp___sai__CertStoreEnumerateCertificates, "-sai:CertStoreEnumerateCertificates", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreEnumerateCertificatesResponse)
		return soap_closesock(soap);
	sai__CertStoreEnumerateCertificatesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreEnumerateCertificatesResponse->soap_get(soap, "sai:CertStoreEnumerateCertificatesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreRemoveCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreRemoveCertificate *sai__CertStoreRemoveCertificate, _sai__CertStoreRemoveCertificateResponse *sai__CertStoreRemoveCertificateResponse)
{	struct __sai__CertStoreRemoveCertificate soap_tmp___sai__CertStoreRemoveCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreRemoveCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreRemoveCertificate.sai__CertStoreRemoveCertificate = sai__CertStoreRemoveCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreRemoveCertificate(soap, &soap_tmp___sai__CertStoreRemoveCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreRemoveCertificate(soap, &soap_tmp___sai__CertStoreRemoveCertificate, "-sai:CertStoreRemoveCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreRemoveCertificate(soap, &soap_tmp___sai__CertStoreRemoveCertificate, "-sai:CertStoreRemoveCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreRemoveCertificateResponse)
		return soap_closesock(soap);
	sai__CertStoreRemoveCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreRemoveCertificateResponse->soap_get(soap, "sai:CertStoreRemoveCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreGetPKCS10Request(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreGetPKCS10Request *sai__CertStoreGetPKCS10Request, _sai__CertStoreGetPKCS10RequestResponse *sai__CertStoreGetPKCS10RequestResponse)
{	struct __sai__CertStoreGetPKCS10Request soap_tmp___sai__CertStoreGetPKCS10Request;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreGetPKCS10Request";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreGetPKCS10Request.sai__CertStoreGetPKCS10Request = sai__CertStoreGetPKCS10Request;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreGetPKCS10Request(soap, &soap_tmp___sai__CertStoreGetPKCS10Request);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreGetPKCS10Request(soap, &soap_tmp___sai__CertStoreGetPKCS10Request, "-sai:CertStoreGetPKCS10Request", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreGetPKCS10Request(soap, &soap_tmp___sai__CertStoreGetPKCS10Request, "-sai:CertStoreGetPKCS10Request", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreGetPKCS10RequestResponse)
		return soap_closesock(soap);
	sai__CertStoreGetPKCS10RequestResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreGetPKCS10RequestResponse->soap_get(soap, "sai:CertStoreGetPKCS10RequestResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreUpdateCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreUpdateCertificate *sai__CertStoreUpdateCertificate, _sai__CertStoreUpdateCertificateResponse *sai__CertStoreUpdateCertificateResponse)
{	struct __sai__CertStoreUpdateCertificate soap_tmp___sai__CertStoreUpdateCertificate;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/CertStoreUpdateCertificate";
	soap->encodingStyle = NULL;
	soap_tmp___sai__CertStoreUpdateCertificate.sai__CertStoreUpdateCertificate = sai__CertStoreUpdateCertificate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__CertStoreUpdateCertificate(soap, &soap_tmp___sai__CertStoreUpdateCertificate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__CertStoreUpdateCertificate(soap, &soap_tmp___sai__CertStoreUpdateCertificate, "-sai:CertStoreUpdateCertificate", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__CertStoreUpdateCertificate(soap, &soap_tmp___sai__CertStoreUpdateCertificate, "-sai:CertStoreUpdateCertificate", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__CertStoreUpdateCertificateResponse)
		return soap_closesock(soap);
	sai__CertStoreUpdateCertificateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__CertStoreUpdateCertificateResponse->soap_get(soap, "sai:CertStoreUpdateCertificateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSCredentials(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSCredentials *sai__SetTLSCredentials, _sai__SetTLSCredentialsResponse *sai__SetTLSCredentialsResponse)
{	struct __sai__SetTLSCredentials soap_tmp___sai__SetTLSCredentials;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetTLSCredentials";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetTLSCredentials.sai__SetTLSCredentials = sai__SetTLSCredentials;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetTLSCredentials(soap, &soap_tmp___sai__SetTLSCredentials);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetTLSCredentials(soap, &soap_tmp___sai__SetTLSCredentials, "-sai:SetTLSCredentials", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetTLSCredentials(soap, &soap_tmp___sai__SetTLSCredentials, "-sai:SetTLSCredentials", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetTLSCredentialsResponse)
		return soap_closesock(soap);
	sai__SetTLSCredentialsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetTLSCredentialsResponse->soap_get(soap, "sai:SetTLSCredentialsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTLSCredentials(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTLSCredentials *sai__GetTLSCredentials, _sai__GetTLSCredentialsResponse *sai__GetTLSCredentialsResponse)
{	struct __sai__GetTLSCredentials soap_tmp___sai__GetTLSCredentials;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetTLSCredentials";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetTLSCredentials.sai__GetTLSCredentials = sai__GetTLSCredentials;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetTLSCredentials(soap, &soap_tmp___sai__GetTLSCredentials);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetTLSCredentials(soap, &soap_tmp___sai__GetTLSCredentials, "-sai:GetTLSCredentials", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetTLSCredentials(soap, &soap_tmp___sai__GetTLSCredentials, "-sai:GetTLSCredentials", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetTLSCredentialsResponse)
		return soap_closesock(soap);
	sai__GetTLSCredentialsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetTLSCredentialsResponse->soap_get(soap, "sai:GetTLSCredentialsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnableVpnRouting(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnableVpnRouting *sai__EnableVpnRouting, _sai__EnableVpnRoutingResponse *sai__EnableVpnRoutingResponse)
{	struct __sai__EnableVpnRouting soap_tmp___sai__EnableVpnRouting;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/EnableVpnRouting";
	soap->encodingStyle = NULL;
	soap_tmp___sai__EnableVpnRouting.sai__EnableVpnRouting = sai__EnableVpnRouting;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__EnableVpnRouting(soap, &soap_tmp___sai__EnableVpnRouting);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__EnableVpnRouting(soap, &soap_tmp___sai__EnableVpnRouting, "-sai:EnableVpnRouting", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__EnableVpnRouting(soap, &soap_tmp___sai__EnableVpnRouting, "-sai:EnableVpnRouting", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__EnableVpnRoutingResponse)
		return soap_closesock(soap);
	sai__EnableVpnRoutingResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__EnableVpnRoutingResponse->soap_get(soap, "sai:EnableVpnRoutingResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetConfigurationServerFQDN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetConfigurationServerFQDN *sai__GetConfigurationServerFQDN, _sai__GetConfigurationServerFQDNResponse *sai__GetConfigurationServerFQDNResponse)
{	struct __sai__GetConfigurationServerFQDN soap_tmp___sai__GetConfigurationServerFQDN;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetConfigurationServerFQDN";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetConfigurationServerFQDN.sai__GetConfigurationServerFQDN = sai__GetConfigurationServerFQDN;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetConfigurationServerFQDN(soap, &soap_tmp___sai__GetConfigurationServerFQDN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetConfigurationServerFQDN(soap, &soap_tmp___sai__GetConfigurationServerFQDN, "-sai:GetConfigurationServerFQDN", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetConfigurationServerFQDN(soap, &soap_tmp___sai__GetConfigurationServerFQDN, "-sai:GetConfigurationServerFQDN", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetConfigurationServerFQDNResponse)
		return soap_closesock(soap);
	sai__GetConfigurationServerFQDNResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetConfigurationServerFQDNResponse->soap_get(soap, "sai:GetConfigurationServerFQDNResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetConfigurationServerFQDN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetConfigurationServerFQDN *sai__SetConfigurationServerFQDN, _sai__SetConfigurationServerFQDNResponse *sai__SetConfigurationServerFQDNResponse)
{	struct __sai__SetConfigurationServerFQDN soap_tmp___sai__SetConfigurationServerFQDN;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetConfigurationServerFQDN";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetConfigurationServerFQDN.sai__SetConfigurationServerFQDN = sai__SetConfigurationServerFQDN;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetConfigurationServerFQDN(soap, &soap_tmp___sai__SetConfigurationServerFQDN);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetConfigurationServerFQDN(soap, &soap_tmp___sai__SetConfigurationServerFQDN, "-sai:SetConfigurationServerFQDN", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetConfigurationServerFQDN(soap, &soap_tmp___sai__SetConfigurationServerFQDN, "-sai:SetConfigurationServerFQDN", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetConfigurationServerFQDNResponse)
		return soap_closesock(soap);
	sai__SetConfigurationServerFQDNResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetConfigurationServerFQDNResponse->soap_get(soap, "sai:SetConfigurationServerFQDNResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetAclEnabledState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetAclEnabledState *sai__SetAclEnabledState, _sai__SetAclEnabledStateResponse *sai__SetAclEnabledStateResponse)
{	struct __sai__SetAclEnabledState soap_tmp___sai__SetAclEnabledState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/SetAclEnabledState";
	soap->encodingStyle = NULL;
	soap_tmp___sai__SetAclEnabledState.sai__SetAclEnabledState = sai__SetAclEnabledState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__SetAclEnabledState(soap, &soap_tmp___sai__SetAclEnabledState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__SetAclEnabledState(soap, &soap_tmp___sai__SetAclEnabledState, "-sai:SetAclEnabledState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__SetAclEnabledState(soap, &soap_tmp___sai__SetAclEnabledState, "-sai:SetAclEnabledState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__SetAclEnabledStateResponse)
		return soap_closesock(soap);
	sai__SetAclEnabledStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__SetAclEnabledStateResponse->soap_get(soap, "sai:SetAclEnabledStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetAclEnabledState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetAclEnabledState *sai__GetAclEnabledState, _sai__GetAclEnabledStateResponse *sai__GetAclEnabledStateResponse)
{	struct __sai__GetAclEnabledState soap_tmp___sai__GetAclEnabledState;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/SecurityAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/SecurityAdministration/2006/01/GetAclEnabledState";
	soap->encodingStyle = NULL;
	soap_tmp___sai__GetAclEnabledState.sai__GetAclEnabledState = sai__GetAclEnabledState;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sai__GetAclEnabledState(soap, &soap_tmp___sai__GetAclEnabledState);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sai__GetAclEnabledState(soap, &soap_tmp___sai__GetAclEnabledState, "-sai:GetAclEnabledState", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sai__GetAclEnabledState(soap, &soap_tmp___sai__GetAclEnabledState, "-sai:GetAclEnabledState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sai__GetAclEnabledStateResponse)
		return soap_closesock(soap);
	sai__GetAclEnabledStateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sai__GetAclEnabledStateResponse->soap_get(soap, "sai:GetAclEnabledStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___str__ExecuteStorageOperation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _str__ExecuteStorageOperation *str__ExecuteStorageOperation, _str__ExecuteStorageOperationResponse *str__ExecuteStorageOperationResponse)
{	struct __str__ExecuteStorageOperation soap_tmp___str__ExecuteStorageOperation;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/Storage/2004/01/ExecuteStorageOperation";
	soap->encodingStyle = NULL;
	soap_tmp___str__ExecuteStorageOperation.str__ExecuteStorageOperation = str__ExecuteStorageOperation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___str__ExecuteStorageOperation(soap, &soap_tmp___str__ExecuteStorageOperation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___str__ExecuteStorageOperation(soap, &soap_tmp___str__ExecuteStorageOperation, "-str:ExecuteStorageOperation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___str__ExecuteStorageOperation(soap, &soap_tmp___str__ExecuteStorageOperation, "-str:ExecuteStorageOperation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!str__ExecuteStorageOperationResponse)
		return soap_closesock(soap);
	str__ExecuteStorageOperationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	str__ExecuteStorageOperationResponse->soap_get(soap, "str:ExecuteStorageOperationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__GetGlobalStorageAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__GetGlobalStorageAttributes *stra__GetGlobalStorageAttributes, _stra__GetGlobalStorageAttributesResponse *stra__GetGlobalStorageAttributesResponse)
{	struct __stra__GetGlobalStorageAttributes soap_tmp___stra__GetGlobalStorageAttributes;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/GetGlobalStorageAttributes";
	soap->encodingStyle = NULL;
	soap_tmp___stra__GetGlobalStorageAttributes.stra__GetGlobalStorageAttributes = stra__GetGlobalStorageAttributes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__GetGlobalStorageAttributes(soap, &soap_tmp___stra__GetGlobalStorageAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__GetGlobalStorageAttributes(soap, &soap_tmp___stra__GetGlobalStorageAttributes, "-stra:GetGlobalStorageAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__GetGlobalStorageAttributes(soap, &soap_tmp___stra__GetGlobalStorageAttributes, "-stra:GetGlobalStorageAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__GetGlobalStorageAttributesResponse)
		return soap_closesock(soap);
	stra__GetGlobalStorageAttributesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__GetGlobalStorageAttributesResponse->soap_get(soap, "stra:GetGlobalStorageAttributesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__SetGlobalStorageAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__SetGlobalStorageAttributes *stra__SetGlobalStorageAttributes, _stra__SetGlobalStorageAttributesResponse *stra__SetGlobalStorageAttributesResponse)
{	struct __stra__SetGlobalStorageAttributes soap_tmp___stra__SetGlobalStorageAttributes;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/SetGlobalStorageAttributes";
	soap->encodingStyle = NULL;
	soap_tmp___stra__SetGlobalStorageAttributes.stra__SetGlobalStorageAttributes = stra__SetGlobalStorageAttributes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__SetGlobalStorageAttributes(soap, &soap_tmp___stra__SetGlobalStorageAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__SetGlobalStorageAttributes(soap, &soap_tmp___stra__SetGlobalStorageAttributes, "-stra:SetGlobalStorageAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__SetGlobalStorageAttributes(soap, &soap_tmp___stra__SetGlobalStorageAttributes, "-stra:SetGlobalStorageAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__SetGlobalStorageAttributesResponse)
		return soap_closesock(soap);
	stra__SetGlobalStorageAttributesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__SetGlobalStorageAttributesResponse->soap_get(soap, "stra:SetGlobalStorageAttributesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AdminGetRegisteredApplications(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AdminGetRegisteredApplications *stra__AdminGetRegisteredApplications, _stra__AdminGetRegisteredApplicationsResponse *stra__AdminGetRegisteredApplicationsResponse)
{	struct __stra__AdminGetRegisteredApplications soap_tmp___stra__AdminGetRegisteredApplications;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/AdminGetRegisteredApplications";
	soap->encodingStyle = NULL;
	soap_tmp___stra__AdminGetRegisteredApplications.stra__AdminGetRegisteredApplications = stra__AdminGetRegisteredApplications;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__AdminGetRegisteredApplications(soap, &soap_tmp___stra__AdminGetRegisteredApplications);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__AdminGetRegisteredApplications(soap, &soap_tmp___stra__AdminGetRegisteredApplications, "-stra:AdminGetRegisteredApplications", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__AdminGetRegisteredApplications(soap, &soap_tmp___stra__AdminGetRegisteredApplications, "-stra:AdminGetRegisteredApplications", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__AdminGetRegisteredApplicationsResponse)
		return soap_closesock(soap);
	stra__AdminGetRegisteredApplicationsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__AdminGetRegisteredApplicationsResponse->soap_get(soap, "stra:AdminGetRegisteredApplicationsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AdminGetApplicationAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AdminGetApplicationAttributes *stra__AdminGetApplicationAttributes, _stra__AdminGetApplicationAttributesResponse *stra__AdminGetApplicationAttributesResponse)
{	struct __stra__AdminGetApplicationAttributes soap_tmp___stra__AdminGetApplicationAttributes;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/AdminGetApplicationAttributes";
	soap->encodingStyle = NULL;
	soap_tmp___stra__AdminGetApplicationAttributes.stra__AdminGetApplicationAttributes = stra__AdminGetApplicationAttributes;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__AdminGetApplicationAttributes(soap, &soap_tmp___stra__AdminGetApplicationAttributes);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__AdminGetApplicationAttributes(soap, &soap_tmp___stra__AdminGetApplicationAttributes, "-stra:AdminGetApplicationAttributes", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__AdminGetApplicationAttributes(soap, &soap_tmp___stra__AdminGetApplicationAttributes, "-stra:AdminGetApplicationAttributes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__AdminGetApplicationAttributesResponse)
		return soap_closesock(soap);
	stra__AdminGetApplicationAttributesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__AdminGetApplicationAttributesResponse->soap_get(soap, "stra:AdminGetApplicationAttributesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AdminRemoveApplication(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AdminRemoveApplication *stra__AdminRemoveApplication, _stra__AdminRemoveApplicationResponse *stra__AdminRemoveApplicationResponse)
{	struct __stra__AdminRemoveApplication soap_tmp___stra__AdminRemoveApplication;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/AdminRemoveApplication";
	soap->encodingStyle = NULL;
	soap_tmp___stra__AdminRemoveApplication.stra__AdminRemoveApplication = stra__AdminRemoveApplication;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__AdminRemoveApplication(soap, &soap_tmp___stra__AdminRemoveApplication);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__AdminRemoveApplication(soap, &soap_tmp___stra__AdminRemoveApplication, "-stra:AdminRemoveApplication", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__AdminRemoveApplication(soap, &soap_tmp___stra__AdminRemoveApplication, "-stra:AdminRemoveApplication", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__AdminRemoveApplicationResponse)
		return soap_closesock(soap);
	stra__AdminRemoveApplicationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__AdminRemoveApplicationResponse->soap_get(soap, "stra:AdminRemoveApplicationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AddStorageEaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AddStorageEaclEntry *stra__AddStorageEaclEntry, _stra__AddStorageEaclEntryResponse *stra__AddStorageEaclEntryResponse)
{	struct __stra__AddStorageEaclEntry soap_tmp___stra__AddStorageEaclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/AddStorageEaclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___stra__AddStorageEaclEntry.stra__AddStorageEaclEntry = stra__AddStorageEaclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__AddStorageEaclEntry(soap, &soap_tmp___stra__AddStorageEaclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__AddStorageEaclEntry(soap, &soap_tmp___stra__AddStorageEaclEntry, "-stra:AddStorageEaclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__AddStorageEaclEntry(soap, &soap_tmp___stra__AddStorageEaclEntry, "-stra:AddStorageEaclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__AddStorageEaclEntryResponse)
		return soap_closesock(soap);
	stra__AddStorageEaclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__AddStorageEaclEntryResponse->soap_get(soap, "stra:AddStorageEaclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__EnumerateStorageEaclEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__EnumerateStorageEaclEntries *stra__EnumerateStorageEaclEntries, _stra__EnumerateStorageEaclEntriesResponse *stra__EnumerateStorageEaclEntriesResponse)
{	struct __stra__EnumerateStorageEaclEntries soap_tmp___stra__EnumerateStorageEaclEntries;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/EnumerateStorageEaclEntries";
	soap->encodingStyle = NULL;
	soap_tmp___stra__EnumerateStorageEaclEntries.stra__EnumerateStorageEaclEntries = stra__EnumerateStorageEaclEntries;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__EnumerateStorageEaclEntries(soap, &soap_tmp___stra__EnumerateStorageEaclEntries);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__EnumerateStorageEaclEntries(soap, &soap_tmp___stra__EnumerateStorageEaclEntries, "-stra:EnumerateStorageEaclEntries", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__EnumerateStorageEaclEntries(soap, &soap_tmp___stra__EnumerateStorageEaclEntries, "-stra:EnumerateStorageEaclEntries", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__EnumerateStorageEaclEntriesResponse)
		return soap_closesock(soap);
	stra__EnumerateStorageEaclEntriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__EnumerateStorageEaclEntriesResponse->soap_get(soap, "stra:EnumerateStorageEaclEntriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__GetStorageEaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__GetStorageEaclEntry *stra__GetStorageEaclEntry, _stra__GetStorageEaclEntryResponse *stra__GetStorageEaclEntryResponse)
{	struct __stra__GetStorageEaclEntry soap_tmp___stra__GetStorageEaclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/GetStorageEaclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___stra__GetStorageEaclEntry.stra__GetStorageEaclEntry = stra__GetStorageEaclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__GetStorageEaclEntry(soap, &soap_tmp___stra__GetStorageEaclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__GetStorageEaclEntry(soap, &soap_tmp___stra__GetStorageEaclEntry, "-stra:GetStorageEaclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__GetStorageEaclEntry(soap, &soap_tmp___stra__GetStorageEaclEntry, "-stra:GetStorageEaclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__GetStorageEaclEntryResponse)
		return soap_closesock(soap);
	stra__GetStorageEaclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__GetStorageEaclEntryResponse->soap_get(soap, "stra:GetStorageEaclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__RemoveStorageEaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__RemoveStorageEaclEntry *stra__RemoveStorageEaclEntry, _stra__RemoveStorageEaclEntryResponse *stra__RemoveStorageEaclEntryResponse)
{	struct __stra__RemoveStorageEaclEntry soap_tmp___stra__RemoveStorageEaclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/RemoveStorageEaclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___stra__RemoveStorageEaclEntry.stra__RemoveStorageEaclEntry = stra__RemoveStorageEaclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__RemoveStorageEaclEntry(soap, &soap_tmp___stra__RemoveStorageEaclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__RemoveStorageEaclEntry(soap, &soap_tmp___stra__RemoveStorageEaclEntry, "-stra:RemoveStorageEaclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__RemoveStorageEaclEntry(soap, &soap_tmp___stra__RemoveStorageEaclEntry, "-stra:RemoveStorageEaclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__RemoveStorageEaclEntryResponse)
		return soap_closesock(soap);
	stra__RemoveStorageEaclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__RemoveStorageEaclEntryResponse->soap_get(soap, "stra:RemoveStorageEaclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AddStorageFpaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AddStorageFpaclEntry *stra__AddStorageFpaclEntry, _stra__AddStorageFpaclEntryResponse *stra__AddStorageFpaclEntryResponse)
{	struct __stra__AddStorageFpaclEntry soap_tmp___stra__AddStorageFpaclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/AddStorageFpaclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___stra__AddStorageFpaclEntry.stra__AddStorageFpaclEntry = stra__AddStorageFpaclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__AddStorageFpaclEntry(soap, &soap_tmp___stra__AddStorageFpaclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__AddStorageFpaclEntry(soap, &soap_tmp___stra__AddStorageFpaclEntry, "-stra:AddStorageFpaclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__AddStorageFpaclEntry(soap, &soap_tmp___stra__AddStorageFpaclEntry, "-stra:AddStorageFpaclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__AddStorageFpaclEntryResponse)
		return soap_closesock(soap);
	stra__AddStorageFpaclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__AddStorageFpaclEntryResponse->soap_get(soap, "stra:AddStorageFpaclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__EnumerateStorageAllocEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__EnumerateStorageAllocEntries *stra__EnumerateStorageAllocEntries, _stra__EnumerateStorageAllocEntriesResponse *stra__EnumerateStorageAllocEntriesResponse)
{	struct __stra__EnumerateStorageAllocEntries soap_tmp___stra__EnumerateStorageAllocEntries;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/EnumerateStorageAllocEntries";
	soap->encodingStyle = NULL;
	soap_tmp___stra__EnumerateStorageAllocEntries.stra__EnumerateStorageAllocEntries = stra__EnumerateStorageAllocEntries;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__EnumerateStorageAllocEntries(soap, &soap_tmp___stra__EnumerateStorageAllocEntries);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__EnumerateStorageAllocEntries(soap, &soap_tmp___stra__EnumerateStorageAllocEntries, "-stra:EnumerateStorageAllocEntries", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__EnumerateStorageAllocEntries(soap, &soap_tmp___stra__EnumerateStorageAllocEntries, "-stra:EnumerateStorageAllocEntries", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__EnumerateStorageAllocEntriesResponse)
		return soap_closesock(soap);
	stra__EnumerateStorageAllocEntriesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__EnumerateStorageAllocEntriesResponse->soap_get(soap, "stra:EnumerateStorageAllocEntriesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__GetStorageAllocEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__GetStorageAllocEntry *stra__GetStorageAllocEntry, _stra__GetStorageAllocEntryResponse *stra__GetStorageAllocEntryResponse)
{	struct __stra__GetStorageAllocEntry soap_tmp___stra__GetStorageAllocEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/GetStorageAllocEntry";
	soap->encodingStyle = NULL;
	soap_tmp___stra__GetStorageAllocEntry.stra__GetStorageAllocEntry = stra__GetStorageAllocEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__GetStorageAllocEntry(soap, &soap_tmp___stra__GetStorageAllocEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__GetStorageAllocEntry(soap, &soap_tmp___stra__GetStorageAllocEntry, "-stra:GetStorageAllocEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__GetStorageAllocEntry(soap, &soap_tmp___stra__GetStorageAllocEntry, "-stra:GetStorageAllocEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__GetStorageAllocEntryResponse)
		return soap_closesock(soap);
	stra__GetStorageAllocEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__GetStorageAllocEntryResponse->soap_get(soap, "stra:GetStorageAllocEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__UpdateStorageFpaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__UpdateStorageFpaclEntry *stra__UpdateStorageFpaclEntry, _stra__UpdateStorageFpaclEntryResponse *stra__UpdateStorageFpaclEntryResponse)
{	struct __stra__UpdateStorageFpaclEntry soap_tmp___stra__UpdateStorageFpaclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/UpdateStorageFpaclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___stra__UpdateStorageFpaclEntry.stra__UpdateStorageFpaclEntry = stra__UpdateStorageFpaclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__UpdateStorageFpaclEntry(soap, &soap_tmp___stra__UpdateStorageFpaclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__UpdateStorageFpaclEntry(soap, &soap_tmp___stra__UpdateStorageFpaclEntry, "-stra:UpdateStorageFpaclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__UpdateStorageFpaclEntry(soap, &soap_tmp___stra__UpdateStorageFpaclEntry, "-stra:UpdateStorageFpaclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__UpdateStorageFpaclEntryResponse)
		return soap_closesock(soap);
	stra__UpdateStorageFpaclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__UpdateStorageFpaclEntryResponse->soap_get(soap, "stra:UpdateStorageFpaclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__RemoveStorageFpaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__RemoveStorageFpaclEntry *stra__RemoveStorageFpaclEntry, _stra__RemoveStorageFpaclEntryResponse *stra__RemoveStorageFpaclEntryResponse)
{	struct __stra__RemoveStorageFpaclEntry soap_tmp___stra__RemoveStorageFpaclEntry;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/StorageAdministrationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/StorageAdministration/2004/01/RemoveStorageFpaclEntry";
	soap->encodingStyle = NULL;
	soap_tmp___stra__RemoveStorageFpaclEntry.stra__RemoveStorageFpaclEntry = stra__RemoveStorageFpaclEntry;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___stra__RemoveStorageFpaclEntry(soap, &soap_tmp___stra__RemoveStorageFpaclEntry);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___stra__RemoveStorageFpaclEntry(soap, &soap_tmp___stra__RemoveStorageFpaclEntry, "-stra:RemoveStorageFpaclEntry", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___stra__RemoveStorageFpaclEntry(soap, &soap_tmp___stra__RemoveStorageFpaclEntry, "-stra:RemoveStorageFpaclEntry", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!stra__RemoveStorageFpaclEntryResponse)
		return soap_closesock(soap);
	stra__RemoveStorageFpaclEntryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	stra__RemoveStorageFpaclEntryResponse->soap_get(soap, "stra:RemoveStorageFpaclEntryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___tim__GetLowAccuracyTimeSynch(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tim__GetLowAccuracyTimeSynch *tim__GetLowAccuracyTimeSynch, _tim__GetLowAccuracyTimeSynchResponse *tim__GetLowAccuracyTimeSynchResponse)
{	struct __tim__GetLowAccuracyTimeSynch soap_tmp___tim__GetLowAccuracyTimeSynch;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkTimeService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkTime/2004/01/GetLowAccuracyTimeSynch";
	soap->encodingStyle = NULL;
	soap_tmp___tim__GetLowAccuracyTimeSynch.tim__GetLowAccuracyTimeSynch = tim__GetLowAccuracyTimeSynch;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tim__GetLowAccuracyTimeSynch(soap, &soap_tmp___tim__GetLowAccuracyTimeSynch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tim__GetLowAccuracyTimeSynch(soap, &soap_tmp___tim__GetLowAccuracyTimeSynch, "-tim:GetLowAccuracyTimeSynch", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tim__GetLowAccuracyTimeSynch(soap, &soap_tmp___tim__GetLowAccuracyTimeSynch, "-tim:GetLowAccuracyTimeSynch", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tim__GetLowAccuracyTimeSynchResponse)
		return soap_closesock(soap);
	tim__GetLowAccuracyTimeSynchResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tim__GetLowAccuracyTimeSynchResponse->soap_get(soap, "tim:GetLowAccuracyTimeSynchResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___tim__SetHighAccuracyTimeSynch(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tim__SetHighAccuracyTimeSynch *tim__SetHighAccuracyTimeSynch, _tim__SetHighAccuracyTimeSynchResponse *tim__SetHighAccuracyTimeSynchResponse)
{	struct __tim__SetHighAccuracyTimeSynch soap_tmp___tim__SetHighAccuracyTimeSynch;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/NetworkTimeService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/NetworkTime/2004/01/SetHighAccuracyTimeSynch";
	soap->encodingStyle = NULL;
	soap_tmp___tim__SetHighAccuracyTimeSynch.tim__SetHighAccuracyTimeSynch = tim__SetHighAccuracyTimeSynch;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___tim__SetHighAccuracyTimeSynch(soap, &soap_tmp___tim__SetHighAccuracyTimeSynch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tim__SetHighAccuracyTimeSynch(soap, &soap_tmp___tim__SetHighAccuracyTimeSynch, "-tim:SetHighAccuracyTimeSynch", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tim__SetHighAccuracyTimeSynch(soap, &soap_tmp___tim__SetHighAccuracyTimeSynch, "-tim:SetHighAccuracyTimeSynch", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!tim__SetHighAccuracyTimeSynchResponse)
		return soap_closesock(soap);
	tim__SetHighAccuracyTimeSynchResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	tim__SetHighAccuracyTimeSynchResponse->soap_get(soap, "tim:SetHighAccuracyTimeSynchResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__AddWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__AddWirelessProfileRequest *wcxs__AddWirelessProfileRequest, _wcxs__AddWirelessProfileResponse *wcxs__AddWirelessProfileResponse)
{	struct __wcxs__AddWirelessProfile soap_tmp___wcxs__AddWirelessProfile;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/WirelessConfigurationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/WirelessConfiguration/2006/01/AddWirelessProfile";
	soap->encodingStyle = NULL;
	soap_tmp___wcxs__AddWirelessProfile.wcxs__AddWirelessProfileRequest = wcxs__AddWirelessProfileRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wcxs__AddWirelessProfile(soap, &soap_tmp___wcxs__AddWirelessProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wcxs__AddWirelessProfile(soap, &soap_tmp___wcxs__AddWirelessProfile, "-wcxs:AddWirelessProfile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wcxs__AddWirelessProfile(soap, &soap_tmp___wcxs__AddWirelessProfile, "-wcxs:AddWirelessProfile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wcxs__AddWirelessProfileResponse)
		return soap_closesock(soap);
	wcxs__AddWirelessProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wcxs__AddWirelessProfileResponse->soap_get(soap, "wcxs:AddWirelessProfileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__GetWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__GetWirelessProfileRequest *wcxs__GetWirelessProfileRequest, _wcxs__GetWirelessProfileResponse *wcxs__GetWirelessProfileResponse)
{	struct __wcxs__GetWirelessProfile soap_tmp___wcxs__GetWirelessProfile;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/WirelessConfigurationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/WirelessConfiguration/2006/01/GetWirelessProfile";
	soap->encodingStyle = NULL;
	soap_tmp___wcxs__GetWirelessProfile.wcxs__GetWirelessProfileRequest = wcxs__GetWirelessProfileRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wcxs__GetWirelessProfile(soap, &soap_tmp___wcxs__GetWirelessProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wcxs__GetWirelessProfile(soap, &soap_tmp___wcxs__GetWirelessProfile, "-wcxs:GetWirelessProfile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wcxs__GetWirelessProfile(soap, &soap_tmp___wcxs__GetWirelessProfile, "-wcxs:GetWirelessProfile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wcxs__GetWirelessProfileResponse)
		return soap_closesock(soap);
	wcxs__GetWirelessProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wcxs__GetWirelessProfileResponse->soap_get(soap, "wcxs:GetWirelessProfileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__RemoveWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__RemoveWirelessProfileRequest *wcxs__RemoveWirelessProfileRequest, _wcxs__RemoveWirelessProfileResponse *wcxs__RemoveWirelessProfileResponse)
{	struct __wcxs__RemoveWirelessProfile soap_tmp___wcxs__RemoveWirelessProfile;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/WirelessConfigurationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/WirelessConfiguration/2006/01/RemoveWirelessProfile";
	soap->encodingStyle = NULL;
	soap_tmp___wcxs__RemoveWirelessProfile.wcxs__RemoveWirelessProfileRequest = wcxs__RemoveWirelessProfileRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wcxs__RemoveWirelessProfile(soap, &soap_tmp___wcxs__RemoveWirelessProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wcxs__RemoveWirelessProfile(soap, &soap_tmp___wcxs__RemoveWirelessProfile, "-wcxs:RemoveWirelessProfile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wcxs__RemoveWirelessProfile(soap, &soap_tmp___wcxs__RemoveWirelessProfile, "-wcxs:RemoveWirelessProfile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wcxs__RemoveWirelessProfileResponse)
		return soap_closesock(soap);
	wcxs__RemoveWirelessProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wcxs__RemoveWirelessProfileResponse->soap_get(soap, "wcxs:RemoveWirelessProfileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__UpdateWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__UpdateWirelessProfileRequest *wcxs__UpdateWirelessProfileRequest, _wcxs__UpdateWirelessProfileResponse *wcxs__UpdateWirelessProfileResponse)
{	struct __wcxs__UpdateWirelessProfile soap_tmp___wcxs__UpdateWirelessProfile;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/WirelessConfigurationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/WirelessConfiguration/2006/01/UpdateWirelessProfile";
	soap->encodingStyle = NULL;
	soap_tmp___wcxs__UpdateWirelessProfile.wcxs__UpdateWirelessProfileRequest = wcxs__UpdateWirelessProfileRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wcxs__UpdateWirelessProfile(soap, &soap_tmp___wcxs__UpdateWirelessProfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wcxs__UpdateWirelessProfile(soap, &soap_tmp___wcxs__UpdateWirelessProfile, "-wcxs:UpdateWirelessProfile", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wcxs__UpdateWirelessProfile(soap, &soap_tmp___wcxs__UpdateWirelessProfile, "-wcxs:UpdateWirelessProfile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wcxs__UpdateWirelessProfileResponse)
		return soap_closesock(soap);
	wcxs__UpdateWirelessProfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wcxs__UpdateWirelessProfileResponse->soap_get(soap, "wcxs:UpdateWirelessProfileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__EnumerateWirelessProfiles(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__EnumerateWirelessProfilesRequest *wcxs__EnumerateWirelessProfilesRequest, _wcxs__EnumerateWirelessProfilesResponse *wcxs__EnumerateWirelessProfilesResponse)
{	struct __wcxs__EnumerateWirelessProfiles soap_tmp___wcxs__EnumerateWirelessProfiles;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/WirelessConfigurationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/WirelessConfiguration/2006/01/EnumerateWirelessProfiles";
	soap->encodingStyle = NULL;
	soap_tmp___wcxs__EnumerateWirelessProfiles.wcxs__EnumerateWirelessProfilesRequest = wcxs__EnumerateWirelessProfilesRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wcxs__EnumerateWirelessProfiles(soap, &soap_tmp___wcxs__EnumerateWirelessProfiles);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wcxs__EnumerateWirelessProfiles(soap, &soap_tmp___wcxs__EnumerateWirelessProfiles, "-wcxs:EnumerateWirelessProfiles", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wcxs__EnumerateWirelessProfiles(soap, &soap_tmp___wcxs__EnumerateWirelessProfiles, "-wcxs:EnumerateWirelessProfiles", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wcxs__EnumerateWirelessProfilesResponse)
		return soap_closesock(soap);
	wcxs__EnumerateWirelessProfilesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wcxs__EnumerateWirelessProfilesResponse->soap_get(soap, "wcxs:EnumerateWirelessProfilesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__GetWirelessCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__GetWirelessCapabilitiesRequest *wcxs__GetWirelessCapabilitiesRequest, _wcxs__GetWirelessCapabilitiesResponse *wcxs__GetWirelessCapabilitiesResponse)
{	struct __wcxs__GetWirelessCapabilities soap_tmp___wcxs__GetWirelessCapabilities;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/WirelessConfigurationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/WirelessConfiguration/2006/01/GetWirelessCapabilities";
	soap->encodingStyle = NULL;
	soap_tmp___wcxs__GetWirelessCapabilities.wcxs__GetWirelessCapabilitiesRequest = wcxs__GetWirelessCapabilitiesRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wcxs__GetWirelessCapabilities(soap, &soap_tmp___wcxs__GetWirelessCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wcxs__GetWirelessCapabilities(soap, &soap_tmp___wcxs__GetWirelessCapabilities, "-wcxs:GetWirelessCapabilities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wcxs__GetWirelessCapabilities(soap, &soap_tmp___wcxs__GetWirelessCapabilities, "-wcxs:GetWirelessCapabilities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wcxs__GetWirelessCapabilitiesResponse)
		return soap_closesock(soap);
	wcxs__GetWirelessCapabilitiesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wcxs__GetWirelessCapabilitiesResponse->soap_get(soap, "wcxs:GetWirelessCapabilitiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__GetWirelessSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__GetWirelessSettingsRequest *wcxs__GetWirelessSettingsRequest, _wcxs__GetWirelessSettingsResponse *wcxs__GetWirelessSettingsResponse)
{	struct __wcxs__GetWirelessSettings soap_tmp___wcxs__GetWirelessSettings;
	if (!soap_endpoint)
		soap_endpoint = "http://hostname:16992/WirelessConfigurationService";
	if (!soap_action)
		soap_action = "http://schemas.intel.com/platform/client/WirelessConfiguration/2006/01/GetWirelessSettings";
	soap->encodingStyle = NULL;
	soap_tmp___wcxs__GetWirelessSettings.wcxs__GetWirelessSettingsRequest = wcxs__GetWirelessSettingsRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wcxs__GetWirelessSettings(soap, &soap_tmp___wcxs__GetWirelessSettings);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wcxs__GetWirelessSettings(soap, &soap_tmp___wcxs__GetWirelessSettings, "-wcxs:GetWirelessSettings", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wcxs__GetWirelessSettings(soap, &soap_tmp___wcxs__GetWirelessSettings, "-wcxs:GetWirelessSettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wcxs__GetWirelessSettingsResponse)
		return soap_closesock(soap);
	wcxs__GetWirelessSettingsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	wcxs__GetWirelessSettingsResponse->soap_get(soap, "wcxs:GetWirelessSettingsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
