/* soapStub.h
   Generated by gSOAP 2.7.8c from ../../Samples/gSoapGeneratedCode/AmtWsdlInterface.h
   Copyright (C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_sai__UserAclRealmType
#define SOAP_TYPE_sai__UserAclRealmType (552)
/* sai:UserAclRealmType */
enum sai__UserAclRealmType {sai__UserAclRealmType__0 = 0, sai__UserAclRealmType__1 = 1, sai__UserAclRealmType__2 = 2, sai__UserAclRealmType__3 = 3, sai__UserAclRealmType__4 = 4, sai__UserAclRealmType__5 = 5, sai__UserAclRealmType__6 = 6, sai__UserAclRealmType__7 = 7, sai__UserAclRealmType__8 = 8, sai__UserAclRealmType__9 = 9, sai__UserAclRealmType__10 = 10, sai__UserAclRealmType__11 = 11, sai__UserAclRealmType__12 = 12, sai__UserAclRealmType__13 = 13, sai__UserAclRealmType__14 = 14, sai__UserAclRealmType__15 = 15, sai__UserAclRealmType__16 = 16, sai__UserAclRealmType__17 = 17, sai__UserAclRealmType__18 = 18, sai__UserAclRealmType__19 = 19};
#endif

#ifndef SOAP_TYPE_sai__RsaKeyEncodingType
#define SOAP_TYPE_sai__RsaKeyEncodingType (557)
/* sai:RsaKeyEncodingType */
enum sai__RsaKeyEncodingType {sai__RsaKeyEncodingType__30 = 30, sai__RsaKeyEncodingType__31 = 31};
#endif

#ifndef SOAP_TYPE_sai__RsaCertificateEncodingType
#define SOAP_TYPE_sai__RsaCertificateEncodingType (558)
/* sai:RsaCertificateEncodingType */
enum sai__RsaCertificateEncodingType {sai__RsaCertificateEncodingType__10 = 10, sai__RsaCertificateEncodingType__11 = 11};
#endif

#ifndef SOAP_TYPE_sai__RngKeyEncodingType
#define SOAP_TYPE_sai__RngKeyEncodingType (559)
/* sai:RngKeyEncodingType */
enum sai__RngKeyEncodingType {sai__RngKeyEncodingType__20 = 20, sai__RngKeyEncodingType__21 = 21};
#endif

#ifndef SOAP_TYPE_sai__ProvisioningModeType
#define SOAP_TYPE_sai__ProvisioningModeType (560)
/* sai:ProvisioningModeType */
enum sai__ProvisioningModeType {sai__ProvisioningModeType__0 = 0, sai__ProvisioningModeType__1 = 1, sai__ProvisioningModeType__2 = 2};
#endif

#ifndef SOAP_TYPE_sai__AccessPermissionType
#define SOAP_TYPE_sai__AccessPermissionType (561)
/* sai:AccessPermissionType */
enum sai__AccessPermissionType {sai__AccessPermissionType__LocalAccessPermission = 0, sai__AccessPermissionType__NetworkAccessPermission = 1, sai__AccessPermissionType__AnyAccessPermission = 2};
#endif

#ifndef SOAP_TYPE_sai__KerberosSpnProtocolType
#define SOAP_TYPE_sai__KerberosSpnProtocolType (562)
/* sai:KerberosSpnProtocolType */
enum sai__KerberosSpnProtocolType {sai__KerberosSpnProtocolType__HTTP = 0, sai__KerberosSpnProtocolType__HTTPS = 1, sai__KerberosSpnProtocolType__SOL_USCOREIDER = 2, sai__KerberosSpnProtocolType__SOL_USCOREIDER_USCORESSL = 3};
#endif

#ifndef SOAP_TYPE_sai__KerberosEncryptionType
#define SOAP_TYPE_sai__KerberosEncryptionType (563)
/* sai:KerberosEncryptionType */
enum sai__KerberosEncryptionType {sai__KerberosEncryptionType__HMAC_USCORERC4 = 0};
#endif

#ifndef SOAP_TYPE_sai__PowerStateType
#define SOAP_TYPE_sai__PowerStateType (564)
/* sai:PowerStateType */
enum sai__PowerStateType {sai__PowerStateType__PowerStateS0 = 0, sai__PowerStateType__PowerStateS1 = 1, sai__PowerStateType__PowerStateS2 = 2, sai__PowerStateType__PowerStateS3 = 3, sai__PowerStateType__PowerStateS4 = 4, sai__PowerStateType__PowerStateS5 = 5};
#endif

#ifndef SOAP_TYPE_sai__EnabledInterfacesType
#define SOAP_TYPE_sai__EnabledInterfacesType (565)
/* sai:EnabledInterfacesType */
enum sai__EnabledInterfacesType {sai__EnabledInterfacesType__WebUI = 0, sai__EnabledInterfacesType__SerialOverLAN = 1, sai__EnabledInterfacesType__IdeRedirection = 2};
#endif

#ifndef SOAP_TYPE_sai__InterfaceType
#define SOAP_TYPE_sai__InterfaceType (566)
/* sai:InterfaceType */
enum sai__InterfaceType {sai__InterfaceType__NetworkInterface = 0, sai__InterfaceType__LocalHostInterface = 1};
#endif

#ifndef SOAP_TYPE_sai__TlsAthenticationType
#define SOAP_TYPE_sai__TlsAthenticationType (567)
/* sai:TlsAthenticationType */
enum sai__TlsAthenticationType {sai__TlsAthenticationType__NoAuth = 0, sai__TlsAthenticationType__ServerAuth = 1, sai__TlsAthenticationType__MutualAuth = 2};
#endif

#ifndef SOAP_TYPE_sai__ProvisioningTLSModeType
#define SOAP_TYPE_sai__ProvisioningTLSModeType (569)
/* sai:ProvisioningTLSModeType */
enum sai__ProvisioningTLSModeType {sai__ProvisioningTLSModeType__0 = 0, sai__ProvisioningTLSModeType__1 = 1, sai__ProvisioningTLSModeType__2 = 2};
#endif

#ifndef SOAP_TYPE_sai__HashTypeType
#define SOAP_TYPE_sai__HashTypeType (573)
/* sai:HashTypeType */
enum sai__HashTypeType {sai__HashTypeType__1 = 1};
#endif

#ifndef SOAP_TYPE_sai__HTTPAuthOptionType
#define SOAP_TYPE_sai__HTTPAuthOptionType (574)
/* sai:HTTPAuthOptionType */
enum sai__HTTPAuthOptionType {sai__HTTPAuthOptionType__NoAuth = 0, sai__HTTPAuthOptionType__Auth = 1, sai__HTTPAuthOptionType__Disable = 2};
#endif

#ifndef SOAP_TYPE_xcfg__CertNameOptionsType
#define SOAP_TYPE_xcfg__CertNameOptionsType (577)
/* xcfg:CertNameOptionsType */
enum xcfg__CertNameOptionsType {xcfg__CertNameOptionsType__CertNameMatch = 0, xcfg__CertNameOptionsType__DomainSuffixMatch = 1};
#endif

#ifndef SOAP_TYPE_net__DhcpModeType
#define SOAP_TYPE_net__DhcpModeType (580)
/* net:DhcpModeType */
enum net__DhcpModeType {net__DhcpModeType__0 = 0, net__DhcpModeType__1 = 1, net__DhcpModeType__2 = 2};
#endif

#ifndef SOAP_TYPE_net__InterfaceModeType
#define SOAP_TYPE_net__InterfaceModeType (582)
/* net:InterfaceModeType */
enum net__InterfaceModeType {net__InterfaceModeType__SEPARATE_USCOREMAC_USCOREADDRESS = 0, net__InterfaceModeType__SHARED_USCOREMAC_USCOREADDRESS = 1};
#endif

#ifndef SOAP_TYPE_stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE
#define SOAP_TYPE_stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE (587)
/* stra:ISVS_APP_ATTR_TYPE */
enum stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE {stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE__0 = 0, stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE__1 = 1};
#endif

#ifndef SOAP_TYPE_emi__EventSeverityType
#define SOAP_TYPE_emi__EventSeverityType (594)
/* emi:EventSeverityType */
enum emi__EventSeverityType {emi__EventSeverityType__0 = 0, emi__EventSeverityType__1 = 1, emi__EventSeverityType__2 = 2, emi__EventSeverityType__4 = 4, emi__EventSeverityType__8 = 8, emi__EventSeverityType__16 = 16, emi__EventSeverityType__32 = 32};
#endif

#ifndef SOAP_TYPE_emi__AlertAuthOptionsType
#define SOAP_TYPE_emi__AlertAuthOptionsType (598)
/* emi:AlertAuthOptionsType */
enum emi__AlertAuthOptionsType {emi__AlertAuthOptionsType__Kerberos = 0, emi__AlertAuthOptionsType__Digest = 1, emi__AlertAuthOptionsType__Basic = 2};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerFilterDirectionType
#define SOAP_TYPE_cb__CircuitBreakerFilterDirectionType (604)
/* cb:CircuitBreakerFilterDirectionType */
enum cb__CircuitBreakerFilterDirectionType {cb__CircuitBreakerFilterDirectionType__0 = 0, cb__CircuitBreakerFilterDirectionType__1 = 1};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerFilterIPAddressDirectionType
#define SOAP_TYPE_cb__CircuitBreakerFilterIPAddressDirectionType (605)
/* cb:CircuitBreakerFilterIPAddressDirectionType */
enum cb__CircuitBreakerFilterIPAddressDirectionType {cb__CircuitBreakerFilterIPAddressDirectionType__0 = 0, cb__CircuitBreakerFilterIPAddressDirectionType__1 = 1};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerProfileType
#define SOAP_TYPE_cb__CircuitBreakerProfileType (606)
/* cb:CircuitBreakerProfileType */
enum cb__CircuitBreakerProfileType {cb__CircuitBreakerProfileType__0 = 0, cb__CircuitBreakerProfileType__1 = 1, cb__CircuitBreakerProfileType__2 = 2, cb__CircuitBreakerProfileType__3 = 3, cb__CircuitBreakerProfileType__4 = 4};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerApplicationType
#define SOAP_TYPE_cb__CircuitBreakerApplicationType (607)
/* cb:CircuitBreakerApplicationType */
enum cb__CircuitBreakerApplicationType {cb__CircuitBreakerApplicationType__0 = 0, cb__CircuitBreakerApplicationType__1 = 1, cb__CircuitBreakerApplicationType__3 = 3, cb__CircuitBreakerApplicationType__4 = 4};
#endif

#ifndef SOAP_TYPE_cb__HcbStateType
#define SOAP_TYPE_cb__HcbStateType (608)
/* cb:HcbStateType */
enum cb__HcbStateType {cb__HcbStateType__0 = 0, cb__HcbStateType__1 = 1, cb__HcbStateType__2 = 2, cb__HcbStateType__3 = 3};
#endif

#ifndef SOAP_TYPE_cb__HcbTriggerReasonType
#define SOAP_TYPE_cb__HcbTriggerReasonType (609)
/* cb:HcbTriggerReasonType */
enum cb__HcbTriggerReasonType {cb__HcbTriggerReasonType__0 = 0, cb__HcbTriggerReasonType__1 = 1, cb__HcbTriggerReasonType__2 = 2};
#endif

#ifndef SOAP_TYPE_hwa__AssetTypeType
#define SOAP_TYPE_hwa__AssetTypeType (613)
/* hwa:AssetTypeType */
enum hwa__AssetTypeType {hwa__AssetTypeType__2 = 2, hwa__AssetTypeType__3 = 3, hwa__AssetTypeType__4 = 4, hwa__AssetTypeType__5 = 5, hwa__AssetTypeType__6 = 6, hwa__AssetTypeType__7 = 7, hwa__AssetTypeType__8 = 8, hwa__AssetTypeType__9 = 9};
#endif

#ifndef SOAP_TYPE_apr__CbActionType
#define SOAP_TYPE_apr__CbActionType (626)
/* apr:CbActionType */
enum apr__CbActionType {apr__CbActionType__0 = 0, apr__CbActionType__1 = 1};
#endif

#ifndef SOAP_TYPE_inf__ProvisioningModeType
#define SOAP_TYPE_inf__ProvisioningModeType (638)
/* inf:ProvisioningModeType */
enum inf__ProvisioningModeType {inf__ProvisioningModeType__0 = 0, inf__ProvisioningModeType__1 = 1, inf__ProvisioningModeType__2 = 2};
#endif

#ifndef SOAP_TYPE_inf__ProvisioningStateType
#define SOAP_TYPE_inf__ProvisioningStateType (639)
/* inf:ProvisioningStateType */
enum inf__ProvisioningStateType {inf__ProvisioningStateType__ProvisioningStatePre = 0, inf__ProvisioningStateType__ProvisioningStateIn = 1, inf__ProvisioningStateType__ProvisioningStatePost = 2};
#endif

#ifndef SOAP_TYPE_inf__PasswordModelType
#define SOAP_TYPE_inf__PasswordModelType (640)
/* inf:PasswordModelType */
enum inf__PasswordModelType {inf__PasswordModelType__PasswordModelCoupled = 0, inf__PasswordModelType__PasswordModelSeperate = 1, inf__PasswordModelType__PasswordModelSeperateHash = 2};
#endif

#ifndef SOAP_TYPE_inf__EnabledInterfacesType
#define SOAP_TYPE_inf__EnabledInterfacesType (641)
/* inf:EnabledInterfacesType */
enum inf__EnabledInterfacesType {inf__EnabledInterfacesType__WebUI = 0, inf__EnabledInterfacesType__SerialOverLAN = 1, inf__EnabledInterfacesType__IdeRedirection = 2};
#endif

#ifndef SOAP_TYPE_rci__RemoteControlCommandType
#define SOAP_TYPE_rci__RemoteControlCommandType (648)
/* rci:RemoteControlCommandType */
enum rci__RemoteControlCommandType {rci__RemoteControlCommandType__16 = 16, rci__RemoteControlCommandType__17 = 17, rci__RemoteControlCommandType__18 = 18, rci__RemoteControlCommandType__19 = 19, rci__RemoteControlCommandType__33 = 33};
#endif

#ifndef SOAP_TYPE_rci__SpecialCommandType
#define SOAP_TYPE_rci__SpecialCommandType (649)
/* rci:SpecialCommandType */
enum rci__SpecialCommandType {rci__SpecialCommandType__0 = 0, rci__SpecialCommandType__1 = 1, rci__SpecialCommandType__2 = 2, rci__SpecialCommandType__3 = 3, rci__SpecialCommandType__4 = 4, rci__SpecialCommandType__5 = 5, rci__SpecialCommandType__193 = 193};
#endif

#ifndef SOAP_TYPE_wcxs__KeyIndexType
#define SOAP_TYPE_wcxs__KeyIndexType (655)
/* wcxs:KeyIndexType */
enum wcxs__KeyIndexType {wcxs__KeyIndexType__1 = 1, wcxs__KeyIndexType__2 = 2, wcxs__KeyIndexType__3 = 3, wcxs__KeyIndexType__4 = 4};
#endif

#ifndef SOAP_TYPE_wcxs__FeatureType
#define SOAP_TYPE_wcxs__FeatureType (662)
/* wcxs:FeatureType */
enum wcxs__FeatureType {wcxs__FeatureType__802_x002e11a = 0, wcxs__FeatureType__802_x002e11b = 1, wcxs__FeatureType__802_x002e11g = 2, wcxs__FeatureType__802_x002e11n = 3};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do no redeclare */

#endif



#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (9)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() : __ptr(NULL), id(NULL), type(NULL), options(NULL), soap(NULL) { }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE__cmn__union_NodeAddressType
#define SOAP_TYPE__cmn__union_NodeAddressType (666)
/* xsd:choice */
union _cmn__union_NodeAddressType
{
#define SOAP_UNION__cmn__union_NodeAddressType_HostName	(1)
	std::string *HostName;
#define SOAP_UNION__cmn__union_NodeAddressType_IPv4Address	(2)
	std::string *IPv4Address;
#define SOAP_UNION__cmn__union_NodeAddressType_IPv6Address	(3)
	std::string *IPv6Address;
};
#endif

#ifndef SOAP_TYPE_cmn__NodeAddressType
#define SOAP_TYPE_cmn__NodeAddressType (16)
/* cmn:NodeAddressType */
class SOAP_CMAC cmn__NodeAddressType
{
public:
	int __union_NodeAddressType;	/* union discriminant (of union defined below) */
	union _cmn__union_NodeAddressType union_NodeAddressType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_cmn__NodeAddressType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cmn__NodeAddressType() : soap(NULL) { }
	virtual ~cmn__NodeAddressType() { }
};
#endif

#ifndef SOAP_TYPE_cstr__RSAKeyPairType
#define SOAP_TYPE_cstr__RSAKeyPairType (17)
/* cstr:RSAKeyPairType */
class SOAP_CMAC cstr__RSAKeyPairType
{
public:
	xsd__base64Binary DERKey;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_cstr__RSAKeyPairType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cstr__RSAKeyPairType() : soap(NULL) { }
	virtual ~cstr__RSAKeyPairType() { }
};
#endif

#ifndef SOAP_TYPE__cstr__union_KeyPairType
#define SOAP_TYPE__cstr__union_KeyPairType (668)
/* xsd:choice */
union _cstr__union_KeyPairType
{
#define SOAP_UNION__cstr__union_KeyPairType_RSAKeyPair	(1)
	cstr__RSAKeyPairType *RSAKeyPair;
};
#endif

#ifndef SOAP_TYPE_cstr__KeyPairType
#define SOAP_TYPE_cstr__KeyPairType (18)
/* cstr:KeyPairType */
class SOAP_CMAC cstr__KeyPairType
{
public:
	int __union_KeyPairType;	/* union discriminant (of union defined below) */
	union _cstr__union_KeyPairType union_KeyPairType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_cstr__KeyPairType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cstr__KeyPairType() : soap(NULL) { }
	virtual ~cstr__KeyPairType() { }
};
#endif

#ifndef SOAP_TYPE_sai__UserAclEntryType
#define SOAP_TYPE_sai__UserAclEntryType (19)
/* sai:UserAclEntryType */
class SOAP_CMAC sai__UserAclEntryType
{
public:
	std::string Username;	/* required element of type sai:AclStringType */
	std::string Password;	/* required element of type sai:AclPasswordStringType */
	class sai__UserAclRealmListType *Realms;	/* required element of type sai:UserAclRealmListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_sai__UserAclEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__UserAclEntryType() : Realms(NULL), soap(NULL) { }
	virtual ~sai__UserAclEntryType() { }
};
#endif

#ifndef SOAP_TYPE_sai__AdminAclEntryType
#define SOAP_TYPE_sai__AdminAclEntryType (20)
/* sai:AdminAclEntryType */
class SOAP_CMAC sai__AdminAclEntryType
{
public:
	std::string Username;	/* required element of type sai:AclStringType */
	std::string Password;	/* required element of type sai:AclPasswordStringType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_sai__AdminAclEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__AdminAclEntryType() : soap(NULL) { }
	virtual ~sai__AdminAclEntryType() { }
};
#endif

#ifndef SOAP_TYPE_sai__UserAclEntryHandleListType
#define SOAP_TYPE_sai__UserAclEntryHandleListType (21)
/* sai:UserAclEntryHandleListType */
class SOAP_CMAC sai__UserAclEntryHandleListType
{
public:
	std::vector<unsigned int >Handle;	/* sequence of 0 to 7 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_sai__UserAclEntryHandleListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__UserAclEntryHandleListType() : soap(NULL) { }
	virtual ~sai__UserAclEntryHandleListType() { }
};
#endif

#ifndef SOAP_TYPE_sai__UserAclRealmListType
#define SOAP_TYPE_sai__UserAclRealmListType (22)
/* sai:UserAclRealmListType */
class SOAP_CMAC sai__UserAclRealmListType
{
public:
	std::vector<enum sai__UserAclRealmType >Realm;	/* sequence of 0 to 16 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_sai__UserAclRealmListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__UserAclRealmListType() : soap(NULL) { }
	virtual ~sai__UserAclRealmListType() { }
};
#endif

#ifndef SOAP_TYPE_sai__RsaKeyType
#define SOAP_TYPE_sai__RsaKeyType (23)
/* sai:RsaKeyType */
class SOAP_CMAC sai__RsaKeyType
{
public:
	enum sai__RsaKeyEncodingType Encoding;	/* required element of type sai:RsaKeyEncodingType */
	unsigned int Length;	/* required element of type xsd:unsignedInt */
	xsd__base64Binary Value;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_sai__RsaKeyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__RsaKeyType() : soap(NULL) { }
	virtual ~sai__RsaKeyType() { }
};
#endif

#ifndef SOAP_TYPE_sai__RngKeyType
#define SOAP_TYPE_sai__RngKeyType (24)
/* sai:RngKeyType */
class SOAP_CMAC sai__RngKeyType
{
public:
	enum sai__RngKeyEncodingType Type;	/* required element of type sai:RngKeyEncodingType */
	unsigned int Length;	/* required element of type xsd:unsignedInt */
	xsd__base64Binary Data;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_sai__RngKeyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__RngKeyType() : soap(NULL) { }
	virtual ~sai__RngKeyType() { }
};
#endif

#ifndef SOAP_TYPE_sai__CertificateChainType
#define SOAP_TYPE_sai__CertificateChainType (25)
/* sai:CertificateChainType */
class SOAP_CMAC sai__CertificateChainType
{
public:
	enum sai__RsaCertificateEncodingType Encoding;	/* required element of type sai:RsaCertificateEncodingType */
	unsigned int Length;	/* required element of type xsd:unsignedInt */
	xsd__base64Binary Value;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_sai__CertificateChainType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__CertificateChainType() : soap(NULL) { }
	virtual ~sai__CertificateChainType() { }
};
#endif

#ifndef SOAP_TYPE_sai__UpdateCoreUrlKeyType
#define SOAP_TYPE_sai__UpdateCoreUrlKeyType (26)
/* sai:UpdateCoreUrlKeyType */
class SOAP_CMAC sai__UpdateCoreUrlKeyType
{
public:
	unsigned int KeyLength;	/* required element of type xsd:unsignedInt */
	unsigned int KeyAlgorithm;	/* required element of type xsd:unsignedInt */
	xsd__base64Binary KeyData;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_sai__UpdateCoreUrlKeyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__UpdateCoreUrlKeyType() : soap(NULL) { }
	virtual ~sai__UpdateCoreUrlKeyType() { }
};
#endif

#ifndef SOAP_TYPE_sai__AmtVersion
#define SOAP_TYPE_sai__AmtVersion (27)
/* sai:AmtVersion */
class SOAP_CMAC sai__AmtVersion
{
public:
	unsigned char major;	/* required element of type xsd:unsignedByte */
	unsigned char minor;	/* required element of type xsd:unsignedByte */
	unsigned short micro;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_sai__AmtVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__AmtVersion() : soap(NULL) { }
	virtual ~sai__AmtVersion() { }
};
#endif

#ifndef SOAP_TYPE_sai__UserEntryDigestType
#define SOAP_TYPE_sai__UserEntryDigestType (28)
/* sai:UserEntryDigestType */
class SOAP_CMAC sai__UserEntryDigestType
{
public:
	std::string Username;	/* required element of type sai:AclStringType */
	xsd__base64Binary DigestPassword;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_sai__UserEntryDigestType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__UserEntryDigestType() : soap(NULL) { }
	virtual ~sai__UserEntryDigestType() { }
};
#endif

#ifndef SOAP_TYPE_sai__UserEntryKerberosType
#define SOAP_TYPE_sai__UserEntryKerberosType (29)
/* sai:UserEntryKerberosType */
class SOAP_CMAC sai__UserEntryKerberosType
{
public:
	xsd__base64Binary Sid;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_sai__UserEntryKerberosType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__UserEntryKerberosType() : soap(NULL) { }
	virtual ~sai__UserEntryKerberosType() { }
};
#endif

#ifndef SOAP_TYPE__sai__union_UserAclEntryExType
#define SOAP_TYPE__sai__union_UserAclEntryExType (674)
/* xsd:choice */
union _sai__union_UserAclEntryExType
{
#define SOAP_UNION__sai__union_UserAclEntryExType_DigestUser	(1)
	sai__UserEntryDigestType *DigestUser;
#define SOAP_UNION__sai__union_UserAclEntryExType_KerberosUser	(2)
	sai__UserEntryKerberosType *KerberosUser;
};
#endif

#ifndef SOAP_TYPE_sai__UserAclEntryExType
#define SOAP_TYPE_sai__UserAclEntryExType (30)
/* sai:UserAclEntryExType */
class SOAP_CMAC sai__UserAclEntryExType
{
public:
	enum sai__AccessPermissionType AccessPermission;	/* required element of type sai:AccessPermissionType */
	sai__UserAclRealmListType *Realms;	/* required element of type sai:UserAclRealmListType */
	int __union_UserAclEntryExType;	/* union discriminant (of union defined below) */
	union _sai__union_UserAclEntryExType union_UserAclEntryExType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_sai__UserAclEntryExType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__UserAclEntryExType() : Realms(NULL), soap(NULL) { }
	virtual ~sai__UserAclEntryExType() { }
};
#endif

#ifndef SOAP_TYPE_sai__AdminAclEntryExType
#define SOAP_TYPE_sai__AdminAclEntryExType (31)
/* sai:AdminAclEntryExType */
class SOAP_CMAC sai__AdminAclEntryExType
{
public:
	std::string Username;	/* required element of type sai:AclStringType */
	xsd__base64Binary DigestPassword;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_sai__AdminAclEntryExType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__AdminAclEntryExType() : soap(NULL) { }
	virtual ~sai__AdminAclEntryExType() { }
};
#endif

#ifndef SOAP_TYPE_sai__KerberosSpnType
#define SOAP_TYPE_sai__KerberosSpnType (32)
/* sai:KerberosSpnType */
class SOAP_CMAC sai__KerberosSpnType
{
public:
	enum sai__KerberosSpnProtocolType SpnProtocolIndex;	/* required element of type sai:KerberosSpnProtocolType */
	std::string SpnString;	/* required element of type sai:SpnString */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_sai__KerberosSpnType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__KerberosSpnType() : soap(NULL) { }
	virtual ~sai__KerberosSpnType() { }
};
#endif

#ifndef SOAP_TYPE_sai__KerberosOptionsType
#define SOAP_TYPE_sai__KerberosOptionsType (33)
/* sai:KerberosOptionsType */
class SOAP_CMAC sai__KerberosOptionsType
{
public:
	std::string KerberosRealmName;	/* required element of type sai:KerberosRealmName */
	std::vector<sai__KerberosSpnType * >KerberosSpn;	/* sequence of 1 to 4 elements */
	unsigned int KerberosKeyVersion;	/* required element of type xsd:unsignedInt */
	enum sai__KerberosEncryptionType KerberosEncryption;	/* required element of type sai:KerberosEncryptionType */
	xsd__base64Binary KerberosMasterKey;	/* required element of type xsd:base64Binary */
	unsigned int KerberosMaximumClockTolerance;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_sai__KerberosOptionsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__KerberosOptionsType() : soap(NULL) { }
	virtual ~sai__KerberosOptionsType() { }
};
#endif

#ifndef SOAP_TYPE_sai__TlsOptionsType
#define SOAP_TYPE_sai__TlsOptionsType (34)
/* sai:TlsOptionsType */
class SOAP_CMAC sai__TlsOptionsType
{
public:
	enum sai__InterfaceType Interface;	/* required element of type sai:InterfaceType */
	enum sai__TlsAthenticationType TlsAuthentication;	/* required element of type sai:TlsAthenticationType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_sai__TlsOptionsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__TlsOptionsType() : soap(NULL) { }
	virtual ~sai__TlsOptionsType() { }
};
#endif

#ifndef SOAP_TYPE_sai__CertificateType
#define SOAP_TYPE_sai__CertificateType (35)
/* sai:CertificateType */
class SOAP_CMAC sai__CertificateType
{
public:
	xsd__base64Binary X509cert;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_sai__CertificateType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__CertificateType() : soap(NULL) { }
	virtual ~sai__CertificateType() { }
};
#endif

#ifndef SOAP_TYPE_sai__CrlType
#define SOAP_TYPE_sai__CrlType (36)
/* sai:CrlType */
class SOAP_CMAC sai__CrlType
{
public:
	std::string CrlUrl;	/* required element of type xsd:string */
	std::vector<xsd__base64Binary >SerialNumber;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_sai__CrlType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__CrlType() : soap(NULL) { }
	virtual ~sai__CrlType() { }
};
#endif

#ifndef SOAP_TYPE_sai__PkiCapsType
#define SOAP_TYPE_sai__PkiCapsType (37)
/* sai:PkiCapsType */
class SOAP_CMAC sai__PkiCapsType
{
public:
	unsigned int CrlStoreSize;	/* required element of type xsd:unsignedInt */
	unsigned int RootCertMaxSize;	/* required element of type xsd:unsignedInt */
	unsigned int RootCertMaxInstances;	/* required element of type xsd:unsignedInt */
	unsigned int FqdnSuffixMaxEntries;	/* required element of type xsd:unsignedInt */
	unsigned int FqdnSuffixMaxEntryLength;	/* required element of type xsd:unsignedInt */
	unsigned int CertChainMaxSize;	/* required element of type xsd:unsignedInt */
	std::vector<unsigned int >SupportedKeyLengths;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_sai__PkiCapsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__PkiCapsType() : soap(NULL) { }
	virtual ~sai__PkiCapsType() { }
};
#endif

#ifndef SOAP_TYPE_sai__CertHashEntryType
#define SOAP_TYPE_sai__CertHashEntryType (38)
/* sai:CertHashEntryType */
class SOAP_CMAC sai__CertHashEntryType
{
public:
	bool Default;	/* required element of type xsd:boolean */
	bool Active;	/* required element of type xsd:boolean */
	enum sai__HashTypeType HashType;	/* required element of type sai:HashTypeType */
	xsd__base64Binary Hash;	/* required element of type xsd:base64Binary */
	std::string FriendlyName;	/* required element of type sai:FriendlyNameType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_sai__CertHashEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__CertHashEntryType() : soap(NULL) { }
	virtual ~sai__CertHashEntryType() { }
};
#endif

#ifndef SOAP_TYPE_sai__ProvisioningAuditRecordType
#define SOAP_TYPE_sai__ProvisioningAuditRecordType (39)
/* sai:ProvisioningAuditRecordType */
class SOAP_CMAC sai__ProvisioningAuditRecordType
{
public:
	enum sai__ProvisioningTLSModeType ProvisioningTLSMode;	/* required element of type sai:ProvisioningTLSModeType */
	bool SecureDNS;	/* required element of type xsd:boolean */
	bool HostInitiated;	/* required element of type xsd:boolean */
	std::string *ProvServerFQDN;	/* optional element of type xsd:string */
	enum sai__HashTypeType SelectedHashType;	/* required element of type sai:HashTypeType */
	xsd__base64Binary SelectedHashData;	/* required element of type xsd:base64Binary */
	std::vector<xsd__base64Binary >CaCertSerials;	/* optional element of type xsd:base64Binary */
	bool *AdditionalCaSerialNums;	/* optional element of type xsd:boolean */
	bool IsOemDefault;	/* required element of type xsd:boolean */
	bool IsTimeValid;	/* required element of type xsd:boolean */
	unsigned int ProvServerIP;	/* required element of type sai:IPv4AddressType */
	unsigned int TlsStartTime;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_sai__ProvisioningAuditRecordType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__ProvisioningAuditRecordType() : ProvServerFQDN(NULL), AdditionalCaSerialNums(NULL), soap(NULL) { }
	virtual ~sai__ProvisioningAuditRecordType() { }
};
#endif

#ifndef SOAP_TYPE_sai__EnvironmentDetectionDomainType
#define SOAP_TYPE_sai__EnvironmentDetectionDomainType (40)
/* sai:EnvironmentDetectionDomainType */
class SOAP_CMAC sai__EnvironmentDetectionDomainType
{
public:
	std::vector<std::string >values;	/* sequence of 0 to 5 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_sai__EnvironmentDetectionDomainType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__EnvironmentDetectionDomainType() : soap(NULL) { }
	virtual ~sai__EnvironmentDetectionDomainType() { }
};
#endif

#ifndef SOAP_TYPE_sai__EnvironmentDetectionType
#define SOAP_TYPE_sai__EnvironmentDetectionType (41)
/* sai:EnvironmentDetectionType */
class SOAP_CMAC sai__EnvironmentDetectionType
{
public:
	sai__EnvironmentDetectionDomainType *LocalDomains;	/* required element of type sai:EnvironmentDetectionDomainType */
	unsigned int *ExternalCircuitBreakerPolicy;	/* optional element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_sai__EnvironmentDetectionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__EnvironmentDetectionType() : LocalDomains(NULL), ExternalCircuitBreakerPolicy(NULL), soap(NULL) { }
	virtual ~sai__EnvironmentDetectionType() { }
};
#endif

#ifndef SOAP_TYPE_sai__GlobalPowerPolicyType
#define SOAP_TYPE_sai__GlobalPowerPolicyType (42)
/* sai:GlobalPowerPolicyType */
class SOAP_CMAC sai__GlobalPowerPolicyType
{
public:
	unsigned int IdleWakeTimeout;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_sai__GlobalPowerPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         sai__GlobalPowerPolicyType() : soap(NULL) { }
	virtual ~sai__GlobalPowerPolicyType() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddUserAclEntry
#define SOAP_TYPE__sai__AddUserAclEntry (43)
/* sai:AddUserAclEntry */
class SOAP_CMAC _sai__AddUserAclEntry
{
public:
	sai__UserAclEntryType *Entry;	/* required element of type sai:UserAclEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__sai__AddUserAclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddUserAclEntry() : Entry(NULL), soap(NULL) { }
	virtual ~_sai__AddUserAclEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddUserAclEntryResponse
#define SOAP_TYPE__sai__AddUserAclEntryResponse (44)
/* sai:AddUserAclEntryResponse */
class SOAP_CMAC _sai__AddUserAclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__sai__AddUserAclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddUserAclEntryResponse() : soap(NULL) { }
	virtual ~_sai__AddUserAclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetAdminAclEntry
#define SOAP_TYPE__sai__SetAdminAclEntry (45)
/* sai:SetAdminAclEntry */
class SOAP_CMAC _sai__SetAdminAclEntry
{
public:
	sai__AdminAclEntryType *Entry;	/* required element of type sai:AdminAclEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__sai__SetAdminAclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetAdminAclEntry() : Entry(NULL), soap(NULL) { }
	virtual ~_sai__SetAdminAclEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetAdminAclEntryResponse
#define SOAP_TYPE__sai__SetAdminAclEntryResponse (46)
/* sai:SetAdminAclEntryResponse */
class SOAP_CMAC _sai__SetAdminAclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE__sai__SetAdminAclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetAdminAclEntryResponse() : soap(NULL) { }
	virtual ~_sai__SetAdminAclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumerateUserAclEntries
#define SOAP_TYPE__sai__EnumerateUserAclEntries (47)
/* sai:EnumerateUserAclEntries */
class SOAP_CMAC _sai__EnumerateUserAclEntries
{
public:
	unsigned int StartIndex;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE__sai__EnumerateUserAclEntries */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumerateUserAclEntries() : soap(NULL) { }
	virtual ~_sai__EnumerateUserAclEntries() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumerateUserAclEntriesResponse
#define SOAP_TYPE__sai__EnumerateUserAclEntriesResponse (48)
/* sai:EnumerateUserAclEntriesResponse */
class SOAP_CMAC _sai__EnumerateUserAclEntriesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	unsigned int TotalCount;	/* required element of type xsd:unsignedInt */
	unsigned int HandleCount;	/* required element of type xsd:unsignedInt */
	sai__UserAclEntryHandleListType *Handles;	/* required element of type sai:UserAclEntryHandleListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE__sai__EnumerateUserAclEntriesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumerateUserAclEntriesResponse() : Handles(NULL), soap(NULL) { }
	virtual ~_sai__EnumerateUserAclEntriesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetUserAclEntry
#define SOAP_TYPE__sai__GetUserAclEntry (49)
/* sai:GetUserAclEntry */
class SOAP_CMAC _sai__GetUserAclEntry
{
public:
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__sai__GetUserAclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetUserAclEntry() : soap(NULL) { }
	virtual ~_sai__GetUserAclEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetUserAclEntryResponse
#define SOAP_TYPE__sai__GetUserAclEntryResponse (50)
/* sai:GetUserAclEntryResponse */
class SOAP_CMAC _sai__GetUserAclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	sai__UserAclEntryType *Entry;	/* required element of type sai:UserAclEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__sai__GetUserAclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetUserAclEntryResponse() : Entry(NULL), soap(NULL) { }
	virtual ~_sai__GetUserAclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetAdminAclEntry
#define SOAP_TYPE__sai__GetAdminAclEntry (51)
/* sai:GetAdminAclEntry */
class SOAP_CMAC _sai__GetAdminAclEntry
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__sai__GetAdminAclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetAdminAclEntry() : soap(NULL) { }
	virtual ~_sai__GetAdminAclEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetAdminAclEntryResponse
#define SOAP_TYPE__sai__GetAdminAclEntryResponse (52)
/* sai:GetAdminAclEntryResponse */
class SOAP_CMAC _sai__GetAdminAclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::string Username;	/* required element of type sai:AclStringType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__sai__GetAdminAclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetAdminAclEntryResponse() : soap(NULL) { }
	virtual ~_sai__GetAdminAclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__UpdateUserAclEntry
#define SOAP_TYPE__sai__UpdateUserAclEntry (53)
/* sai:UpdateUserAclEntry */
class SOAP_CMAC _sai__UpdateUserAclEntry
{
public:
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	sai__UserAclEntryType *Entry;	/* required element of type sai:UserAclEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__sai__UpdateUserAclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__UpdateUserAclEntry() : Entry(NULL), soap(NULL) { }
	virtual ~_sai__UpdateUserAclEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__UpdateUserAclEntryResponse
#define SOAP_TYPE__sai__UpdateUserAclEntryResponse (54)
/* sai:UpdateUserAclEntryResponse */
class SOAP_CMAC _sai__UpdateUserAclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__sai__UpdateUserAclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__UpdateUserAclEntryResponse() : soap(NULL) { }
	virtual ~_sai__UpdateUserAclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__RemoveUserAclEntry
#define SOAP_TYPE__sai__RemoveUserAclEntry (55)
/* sai:RemoveUserAclEntry */
class SOAP_CMAC _sai__RemoveUserAclEntry
{
public:
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__sai__RemoveUserAclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__RemoveUserAclEntry() : soap(NULL) { }
	virtual ~_sai__RemoveUserAclEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__RemoveUserAclEntryResponse
#define SOAP_TYPE__sai__RemoveUserAclEntryResponse (56)
/* sai:RemoveUserAclEntryResponse */
class SOAP_CMAC _sai__RemoveUserAclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__sai__RemoveUserAclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__RemoveUserAclEntryResponse() : soap(NULL) { }
	virtual ~_sai__RemoveUserAclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTlsEnabled
#define SOAP_TYPE__sai__SetTlsEnabled (57)
/* sai:SetTlsEnabled */
class SOAP_CMAC _sai__SetTlsEnabled
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE__sai__SetTlsEnabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTlsEnabled() : soap(NULL) { }
	virtual ~_sai__SetTlsEnabled() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTlsEnabledResponse
#define SOAP_TYPE__sai__SetTlsEnabledResponse (58)
/* sai:SetTlsEnabledResponse */
class SOAP_CMAC _sai__SetTlsEnabledResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE__sai__SetTlsEnabledResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTlsEnabledResponse() : soap(NULL) { }
	virtual ~_sai__SetTlsEnabledResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSKeyAndCertificate
#define SOAP_TYPE__sai__SetTLSKeyAndCertificate (59)
/* sai:SetTLSKeyAndCertificate */
class SOAP_CMAC _sai__SetTLSKeyAndCertificate
{
public:
	sai__RsaKeyType *PrivateKey;	/* optional element of type sai:RsaKeyType */
	sai__CertificateChainType *CertificateChain;	/* required element of type sai:CertificateChainType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__sai__SetTLSKeyAndCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSKeyAndCertificate() : PrivateKey(NULL), CertificateChain(NULL), soap(NULL) { }
	virtual ~_sai__SetTLSKeyAndCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSKeyAndCertificateResponse
#define SOAP_TYPE__sai__SetTLSKeyAndCertificateResponse (60)
/* sai:SetTLSKeyAndCertificateResponse */
class SOAP_CMAC _sai__SetTLSKeyAndCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE__sai__SetTLSKeyAndCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSKeyAndCertificateResponse() : soap(NULL) { }
	virtual ~_sai__SetTLSKeyAndCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetRngKey
#define SOAP_TYPE__sai__SetRngKey (61)
/* sai:SetRngKey */
class SOAP_CMAC _sai__SetRngKey
{
public:
	sai__RngKeyType *Key;	/* required element of type sai:RngKeyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE__sai__SetRngKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetRngKey() : Key(NULL), soap(NULL) { }
	virtual ~_sai__SetRngKey() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetRngKeyResponse
#define SOAP_TYPE__sai__SetRngKeyResponse (62)
/* sai:SetRngKeyResponse */
class SOAP_CMAC _sai__SetRngKeyResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE__sai__SetRngKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetRngKeyResponse() : soap(NULL) { }
	virtual ~_sai__SetRngKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSCertificate
#define SOAP_TYPE__sai__SetTLSCertificate (63)
/* sai:SetTLSCertificate */
class SOAP_CMAC _sai__SetTLSCertificate
{
public:
	sai__CertificateChainType *CertificateChain;	/* required element of type sai:CertificateChainType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE__sai__SetTLSCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSCertificate() : CertificateChain(NULL), soap(NULL) { }
	virtual ~_sai__SetTLSCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSCertificateResponse
#define SOAP_TYPE__sai__SetTLSCertificateResponse (64)
/* sai:SetTLSCertificateResponse */
class SOAP_CMAC _sai__SetTLSCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE__sai__SetTLSCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSCertificateResponse() : soap(NULL) { }
	virtual ~_sai__SetTLSCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTLSCertificate
#define SOAP_TYPE__sai__GetTLSCertificate (65)
/* sai:GetTLSCertificate */
class SOAP_CMAC _sai__GetTLSCertificate
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE__sai__GetTLSCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTLSCertificate() : soap(NULL) { }
	virtual ~_sai__GetTLSCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTLSCertificateResponse
#define SOAP_TYPE__sai__GetTLSCertificateResponse (66)
/* sai:GetTLSCertificateResponse */
class SOAP_CMAC _sai__GetTLSCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	sai__CertificateChainType *CertificateChain;	/* required element of type sai:CertificateChainType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE__sai__GetTLSCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTLSCertificateResponse() : CertificateChain(NULL), soap(NULL) { }
	virtual ~_sai__GetTLSCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__UpdateCoreFromUrl
#define SOAP_TYPE__sai__UpdateCoreFromUrl (67)
/* sai:UpdateCoreFromUrl */
class SOAP_CMAC _sai__UpdateCoreFromUrl
{
public:
	unsigned int tftpServerIp;	/* required element of type sai:IPv4AddressType */
	std::string *tftpServerName;	/* optional element of type xsd:string */
	unsigned short tftpServerPort;	/* required element of type xsd:unsignedShort */
	unsigned short MagicPacketPort;	/* required element of type xsd:unsignedShort */
	std::string packagePath;	/* required element of type xsd:string */
	sai__AmtVersion *AmtAppVersion;	/* required element of type sai:AmtVersion */
	sai__AmtVersion *UpdateAppVersion;	/* required element of type sai:AmtVersion */
	unsigned int MgmtConsoleAddr;	/* required element of type sai:IPv4AddressType */
	sai__UpdateCoreUrlKeyType *Key;	/* required element of type sai:UpdateCoreUrlKeyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE__sai__UpdateCoreFromUrl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__UpdateCoreFromUrl() : tftpServerName(NULL), AmtAppVersion(NULL), UpdateAppVersion(NULL), Key(NULL), soap(NULL) { }
	virtual ~_sai__UpdateCoreFromUrl() { }
};
#endif

#ifndef SOAP_TYPE__sai__UpdateCoreFromUrlResponse
#define SOAP_TYPE__sai__UpdateCoreFromUrlResponse (68)
/* sai:UpdateCoreFromUrlResponse */
class SOAP_CMAC _sai__UpdateCoreFromUrlResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE__sai__UpdateCoreFromUrlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__UpdateCoreFromUrlResponse() : soap(NULL) { }
	virtual ~_sai__UpdateCoreFromUrlResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningMode
#define SOAP_TYPE__sai__GetProvisioningMode (69)
/* sai:GetProvisioningMode */
class SOAP_CMAC _sai__GetProvisioningMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE__sai__GetProvisioningMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningMode() : soap(NULL) { }
	virtual ~_sai__GetProvisioningMode() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningModeResponse
#define SOAP_TYPE__sai__GetProvisioningModeResponse (70)
/* sai:GetProvisioningModeResponse */
class SOAP_CMAC _sai__GetProvisioningModeResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	enum sai__ProvisioningModeType ProvisioningMode;	/* required element of type sai:ProvisioningModeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE__sai__GetProvisioningModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningModeResponse() : soap(NULL) { }
	virtual ~_sai__GetProvisioningModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetProvisioningMode
#define SOAP_TYPE__sai__SetProvisioningMode (71)
/* sai:SetProvisioningMode */
class SOAP_CMAC _sai__SetProvisioningMode
{
public:
	enum sai__ProvisioningModeType ProvisioningMode;	/* required element of type sai:ProvisioningModeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE__sai__SetProvisioningMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetProvisioningMode() : soap(NULL) { }
	virtual ~_sai__SetProvisioningMode() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetProvisioningModeResponse
#define SOAP_TYPE__sai__SetProvisioningModeResponse (72)
/* sai:SetProvisioningModeResponse */
class SOAP_CMAC _sai__SetProvisioningModeResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE__sai__SetProvisioningModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetProvisioningModeResponse() : soap(NULL) { }
	virtual ~_sai__SetProvisioningModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__Unprovision
#define SOAP_TYPE__sai__Unprovision (73)
/* sai:Unprovision */
class SOAP_CMAC _sai__Unprovision
{
public:
	enum sai__ProvisioningModeType ProvisioningMode;	/* required element of type sai:ProvisioningModeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE__sai__Unprovision */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__Unprovision() : soap(NULL) { }
	virtual ~_sai__Unprovision() { }
};
#endif

#ifndef SOAP_TYPE__sai__UnprovisionResponse
#define SOAP_TYPE__sai__UnprovisionResponse (74)
/* sai:UnprovisionResponse */
class SOAP_CMAC _sai__UnprovisionResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE__sai__UnprovisionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__UnprovisionResponse() : soap(NULL) { }
	virtual ~_sai__UnprovisionResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CommitChanges
#define SOAP_TYPE__sai__CommitChanges (75)
/* sai:CommitChanges */
class SOAP_CMAC _sai__CommitChanges
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE__sai__CommitChanges */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CommitChanges() : soap(NULL) { }
	virtual ~_sai__CommitChanges() { }
};
#endif

#ifndef SOAP_TYPE__sai__CommitChangesResponse
#define SOAP_TYPE__sai__CommitChangesResponse (76)
/* sai:CommitChangesResponse */
class SOAP_CMAC _sai__CommitChangesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE__sai__CommitChangesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CommitChangesResponse() : soap(NULL) { }
	virtual ~_sai__CommitChangesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__ResetFlashWearOutProtection
#define SOAP_TYPE__sai__ResetFlashWearOutProtection (77)
/* sai:ResetFlashWearOutProtection */
class SOAP_CMAC _sai__ResetFlashWearOutProtection
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE__sai__ResetFlashWearOutProtection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__ResetFlashWearOutProtection() : soap(NULL) { }
	virtual ~_sai__ResetFlashWearOutProtection() { }
};
#endif

#ifndef SOAP_TYPE__sai__ResetFlashWearOutProtectionResponse
#define SOAP_TYPE__sai__ResetFlashWearOutProtectionResponse (78)
/* sai:ResetFlashWearOutProtectionResponse */
class SOAP_CMAC _sai__ResetFlashWearOutProtectionResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE__sai__ResetFlashWearOutProtectionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__ResetFlashWearOutProtectionResponse() : soap(NULL) { }
	virtual ~_sai__ResetFlashWearOutProtectionResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetCoreVersion
#define SOAP_TYPE__sai__GetCoreVersion (79)
/* sai:GetCoreVersion */
class SOAP_CMAC _sai__GetCoreVersion
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE__sai__GetCoreVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetCoreVersion() : soap(NULL) { }
	virtual ~_sai__GetCoreVersion() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetCoreVersionResponse
#define SOAP_TYPE__sai__GetCoreVersionResponse (80)
/* sai:GetCoreVersionResponse */
class SOAP_CMAC _sai__GetCoreVersionResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::string Version;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE__sai__GetCoreVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetCoreVersionResponse() : soap(NULL) { }
	virtual ~_sai__GetCoreVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddUserAclEntryEx
#define SOAP_TYPE__sai__AddUserAclEntryEx (81)
/* sai:AddUserAclEntryEx */
class SOAP_CMAC _sai__AddUserAclEntryEx
{
public:
	sai__UserAclEntryExType *EntryEx;	/* required element of type sai:UserAclEntryExType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE__sai__AddUserAclEntryEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddUserAclEntryEx() : EntryEx(NULL), soap(NULL) { }
	virtual ~_sai__AddUserAclEntryEx() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddUserAclEntryExResponse
#define SOAP_TYPE__sai__AddUserAclEntryExResponse (82)
/* sai:AddUserAclEntryExResponse */
class SOAP_CMAC _sai__AddUserAclEntryExResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE__sai__AddUserAclEntryExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddUserAclEntryExResponse() : soap(NULL) { }
	virtual ~_sai__AddUserAclEntryExResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetUserAclEntryEx
#define SOAP_TYPE__sai__GetUserAclEntryEx (83)
/* sai:GetUserAclEntryEx */
class SOAP_CMAC _sai__GetUserAclEntryEx
{
public:
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE__sai__GetUserAclEntryEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetUserAclEntryEx() : soap(NULL) { }
	virtual ~_sai__GetUserAclEntryEx() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetUserAclEntryExResponse
#define SOAP_TYPE__sai__GetUserAclEntryExResponse (84)
/* sai:GetUserAclEntryExResponse */
class SOAP_CMAC _sai__GetUserAclEntryExResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	sai__UserAclEntryExType *EntryEx;	/* required element of type sai:UserAclEntryExType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE__sai__GetUserAclEntryExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetUserAclEntryExResponse() : EntryEx(NULL), soap(NULL) { }
	virtual ~_sai__GetUserAclEntryExResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__UpdateUserAclEntryEx
#define SOAP_TYPE__sai__UpdateUserAclEntryEx (85)
/* sai:UpdateUserAclEntryEx */
class SOAP_CMAC _sai__UpdateUserAclEntryEx
{
public:
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	sai__UserAclEntryExType *EntryEx;	/* required element of type sai:UserAclEntryExType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE__sai__UpdateUserAclEntryEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__UpdateUserAclEntryEx() : EntryEx(NULL), soap(NULL) { }
	virtual ~_sai__UpdateUserAclEntryEx() { }
};
#endif

#ifndef SOAP_TYPE__sai__UpdateUserAclEntryExResponse
#define SOAP_TYPE__sai__UpdateUserAclEntryExResponse (86)
/* sai:UpdateUserAclEntryExResponse */
class SOAP_CMAC _sai__UpdateUserAclEntryExResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE__sai__UpdateUserAclEntryExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__UpdateUserAclEntryExResponse() : soap(NULL) { }
	virtual ~_sai__UpdateUserAclEntryExResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetAdminAclEntryEx
#define SOAP_TYPE__sai__SetAdminAclEntryEx (87)
/* sai:SetAdminAclEntryEx */
class SOAP_CMAC _sai__SetAdminAclEntryEx
{
public:
	sai__AdminAclEntryExType *EntryEx;	/* required element of type sai:AdminAclEntryExType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE__sai__SetAdminAclEntryEx */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetAdminAclEntryEx() : EntryEx(NULL), soap(NULL) { }
	virtual ~_sai__SetAdminAclEntryEx() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetAdminAclEntryExResponse
#define SOAP_TYPE__sai__SetAdminAclEntryExResponse (88)
/* sai:SetAdminAclEntryExResponse */
class SOAP_CMAC _sai__SetAdminAclEntryExResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE__sai__SetAdminAclEntryExResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetAdminAclEntryExResponse() : soap(NULL) { }
	virtual ~_sai__SetAdminAclEntryExResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetDigestRealm
#define SOAP_TYPE__sai__GetDigestRealm (89)
/* sai:GetDigestRealm */
class SOAP_CMAC _sai__GetDigestRealm
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE__sai__GetDigestRealm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetDigestRealm() : soap(NULL) { }
	virtual ~_sai__GetDigestRealm() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetDigestRealmResponse
#define SOAP_TYPE__sai__GetDigestRealmResponse (90)
/* sai:GetDigestRealmResponse */
class SOAP_CMAC _sai__GetDigestRealmResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::string DigestRealm;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE__sai__GetDigestRealmResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetDigestRealmResponse() : soap(NULL) { }
	virtual ~_sai__GetDigestRealmResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetKerberosOptions
#define SOAP_TYPE__sai__SetKerberosOptions (91)
/* sai:SetKerberosOptions */
class SOAP_CMAC _sai__SetKerberosOptions
{
public:
	sai__KerberosOptionsType *KerberosOptions;	/* optional element of type sai:KerberosOptionsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE__sai__SetKerberosOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetKerberosOptions() : KerberosOptions(NULL), soap(NULL) { }
	virtual ~_sai__SetKerberosOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetKerberosOptionsResponse
#define SOAP_TYPE__sai__SetKerberosOptionsResponse (92)
/* sai:SetKerberosOptionsResponse */
class SOAP_CMAC _sai__SetKerberosOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE__sai__SetKerberosOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetKerberosOptionsResponse() : soap(NULL) { }
	virtual ~_sai__SetKerberosOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetKerberosOptions
#define SOAP_TYPE__sai__GetKerberosOptions (93)
/* sai:GetKerberosOptions */
class SOAP_CMAC _sai__GetKerberosOptions
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE__sai__GetKerberosOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetKerberosOptions() : soap(NULL) { }
	virtual ~_sai__GetKerberosOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetKerberosOptionsResponse
#define SOAP_TYPE__sai__GetKerberosOptionsResponse (94)
/* sai:GetKerberosOptionsResponse */
class SOAP_CMAC _sai__GetKerberosOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	sai__KerberosOptionsType *KerberosOptions;	/* required element of type sai:KerberosOptionsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE__sai__GetKerberosOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetKerberosOptionsResponse() : KerberosOptions(NULL), soap(NULL) { }
	virtual ~_sai__GetKerberosOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetEnabledInterfaces
#define SOAP_TYPE__sai__SetEnabledInterfaces (95)
/* sai:SetEnabledInterfaces */
class SOAP_CMAC _sai__SetEnabledInterfaces
{
public:
	std::vector<enum sai__EnabledInterfacesType >EnabledInterfaces;	/* optional element of type sai:EnabledInterfacesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE__sai__SetEnabledInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetEnabledInterfaces() : soap(NULL) { }
	virtual ~_sai__SetEnabledInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetEnabledInterfacesResponse
#define SOAP_TYPE__sai__SetEnabledInterfacesResponse (96)
/* sai:SetEnabledInterfacesResponse */
class SOAP_CMAC _sai__SetEnabledInterfacesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE__sai__SetEnabledInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetEnabledInterfacesResponse() : soap(NULL) { }
	virtual ~_sai__SetEnabledInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetEnabledInterfaces
#define SOAP_TYPE__sai__GetEnabledInterfaces (97)
/* sai:GetEnabledInterfaces */
class SOAP_CMAC _sai__GetEnabledInterfaces
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE__sai__GetEnabledInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetEnabledInterfaces() : soap(NULL) { }
	virtual ~_sai__GetEnabledInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetEnabledInterfacesResponse
#define SOAP_TYPE__sai__GetEnabledInterfacesResponse (98)
/* sai:GetEnabledInterfacesResponse */
class SOAP_CMAC _sai__GetEnabledInterfacesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::vector<enum sai__EnabledInterfacesType >EnabledInterfaces;	/* optional element of type sai:EnabledInterfacesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE__sai__GetEnabledInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetEnabledInterfacesResponse() : soap(NULL) { }
	virtual ~_sai__GetEnabledInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTlsOptions
#define SOAP_TYPE__sai__SetTlsOptions (99)
/* sai:SetTlsOptions */
class SOAP_CMAC _sai__SetTlsOptions
{
public:
	std::vector<sai__TlsOptionsType * >TlsOptions;	/* sequence of 0 to 2 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE__sai__SetTlsOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTlsOptions() : soap(NULL) { }
	virtual ~_sai__SetTlsOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTlsOptionsResponse
#define SOAP_TYPE__sai__SetTlsOptionsResponse (100)
/* sai:SetTlsOptionsResponse */
class SOAP_CMAC _sai__SetTlsOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE__sai__SetTlsOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTlsOptionsResponse() : soap(NULL) { }
	virtual ~_sai__SetTlsOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTlsOptions
#define SOAP_TYPE__sai__GetTlsOptions (101)
/* sai:GetTlsOptions */
class SOAP_CMAC _sai__GetTlsOptions
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE__sai__GetTlsOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTlsOptions() : soap(NULL) { }
	virtual ~_sai__GetTlsOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTlsOptionsResponse
#define SOAP_TYPE__sai__GetTlsOptionsResponse (102)
/* sai:GetTlsOptionsResponse */
class SOAP_CMAC _sai__GetTlsOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::vector<sai__TlsOptionsType * >TlsOptions;	/* sequence of 0 to 2 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE__sai__GetTlsOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTlsOptionsResponse() : soap(NULL) { }
	virtual ~_sai__GetTlsOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddTrustedRootCertificate
#define SOAP_TYPE__sai__AddTrustedRootCertificate (103)
/* sai:AddTrustedRootCertificate */
class SOAP_CMAC _sai__AddTrustedRootCertificate
{
public:
	sai__CertificateType *Certificate;	/* required element of type sai:CertificateType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE__sai__AddTrustedRootCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddTrustedRootCertificate() : Certificate(NULL), soap(NULL) { }
	virtual ~_sai__AddTrustedRootCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddTrustedRootCertificateResponse
#define SOAP_TYPE__sai__AddTrustedRootCertificateResponse (104)
/* sai:AddTrustedRootCertificateResponse */
class SOAP_CMAC _sai__AddTrustedRootCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	unsigned int CertHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE__sai__AddTrustedRootCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddTrustedRootCertificateResponse() : soap(NULL) { }
	virtual ~_sai__AddTrustedRootCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTrustedRootCertificate
#define SOAP_TYPE__sai__GetTrustedRootCertificate (105)
/* sai:GetTrustedRootCertificate */
class SOAP_CMAC _sai__GetTrustedRootCertificate
{
public:
	unsigned int CertHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE__sai__GetTrustedRootCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTrustedRootCertificate() : soap(NULL) { }
	virtual ~_sai__GetTrustedRootCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTrustedRootCertificateResponse
#define SOAP_TYPE__sai__GetTrustedRootCertificateResponse (106)
/* sai:GetTrustedRootCertificateResponse */
class SOAP_CMAC _sai__GetTrustedRootCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	sai__CertificateType *Certificate;	/* required element of type sai:CertificateType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE__sai__GetTrustedRootCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTrustedRootCertificateResponse() : Certificate(NULL), soap(NULL) { }
	virtual ~_sai__GetTrustedRootCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__DeleteTrustedRootCertificate
#define SOAP_TYPE__sai__DeleteTrustedRootCertificate (107)
/* sai:DeleteTrustedRootCertificate */
class SOAP_CMAC _sai__DeleteTrustedRootCertificate
{
public:
	unsigned int CertHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE__sai__DeleteTrustedRootCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__DeleteTrustedRootCertificate() : soap(NULL) { }
	virtual ~_sai__DeleteTrustedRootCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__DeleteTrustedRootCertificateResponse
#define SOAP_TYPE__sai__DeleteTrustedRootCertificateResponse (108)
/* sai:DeleteTrustedRootCertificateResponse */
class SOAP_CMAC _sai__DeleteTrustedRootCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE__sai__DeleteTrustedRootCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__DeleteTrustedRootCertificateResponse() : soap(NULL) { }
	virtual ~_sai__DeleteTrustedRootCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumerateTrustedRootCertificates
#define SOAP_TYPE__sai__EnumerateTrustedRootCertificates (109)
/* sai:EnumerateTrustedRootCertificates */
class SOAP_CMAC _sai__EnumerateTrustedRootCertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE__sai__EnumerateTrustedRootCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumerateTrustedRootCertificates() : soap(NULL) { }
	virtual ~_sai__EnumerateTrustedRootCertificates() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumerateTrustedRootCertificatesResponse
#define SOAP_TYPE__sai__EnumerateTrustedRootCertificatesResponse (110)
/* sai:EnumerateTrustedRootCertificatesResponse */
class SOAP_CMAC _sai__EnumerateTrustedRootCertificatesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::vector<unsigned int >CertHandle;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE__sai__EnumerateTrustedRootCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumerateTrustedRootCertificatesResponse() : soap(NULL) { }
	virtual ~_sai__EnumerateTrustedRootCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTrustedFqdnCN
#define SOAP_TYPE__sai__SetTrustedFqdnCN (111)
/* sai:SetTrustedFqdnCN */
class SOAP_CMAC _sai__SetTrustedFqdnCN
{
public:
	std::vector<std::string >FqdnSuffix;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE__sai__SetTrustedFqdnCN */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTrustedFqdnCN() : soap(NULL) { }
	virtual ~_sai__SetTrustedFqdnCN() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTrustedFqdnCNResponse
#define SOAP_TYPE__sai__SetTrustedFqdnCNResponse (112)
/* sai:SetTrustedFqdnCNResponse */
class SOAP_CMAC _sai__SetTrustedFqdnCNResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE__sai__SetTrustedFqdnCNResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTrustedFqdnCNResponse() : soap(NULL) { }
	virtual ~_sai__SetTrustedFqdnCNResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTrustedFqdnCN
#define SOAP_TYPE__sai__GetTrustedFqdnCN (113)
/* sai:GetTrustedFqdnCN */
class SOAP_CMAC _sai__GetTrustedFqdnCN
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE__sai__GetTrustedFqdnCN */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTrustedFqdnCN() : soap(NULL) { }
	virtual ~_sai__GetTrustedFqdnCN() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTrustedFqdnCNResponse
#define SOAP_TYPE__sai__GetTrustedFqdnCNResponse (114)
/* sai:GetTrustedFqdnCNResponse */
class SOAP_CMAC _sai__GetTrustedFqdnCNResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::vector<std::string >FqdnSuffix;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE__sai__GetTrustedFqdnCNResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTrustedFqdnCNResponse() : soap(NULL) { }
	virtual ~_sai__GetTrustedFqdnCNResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetCRL
#define SOAP_TYPE__sai__SetCRL (115)
/* sai:SetCRL */
class SOAP_CMAC _sai__SetCRL
{
public:
	std::vector<sai__CrlType * >Crl;	/* optional element of type sai:CrlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE__sai__SetCRL */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetCRL() : soap(NULL) { }
	virtual ~_sai__SetCRL() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetCRLResponse
#define SOAP_TYPE__sai__SetCRLResponse (116)
/* sai:SetCRLResponse */
class SOAP_CMAC _sai__SetCRLResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE__sai__SetCRLResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetCRLResponse() : soap(NULL) { }
	virtual ~_sai__SetCRLResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetCRL
#define SOAP_TYPE__sai__GetCRL (117)
/* sai:GetCRL */
class SOAP_CMAC _sai__GetCRL
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE__sai__GetCRL */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetCRL() : soap(NULL) { }
	virtual ~_sai__GetCRL() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetCRLResponse
#define SOAP_TYPE__sai__GetCRLResponse (118)
/* sai:GetCRLResponse */
class SOAP_CMAC _sai__GetCRLResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	std::vector<sai__CrlType * >Crl;	/* optional element of type sai:CrlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE__sai__GetCRLResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetCRLResponse() : soap(NULL) { }
	virtual ~_sai__GetCRLResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetServerCertificateReq
#define SOAP_TYPE__sai__GetServerCertificateReq (119)
/* sai:GetServerCertificateReq */
class SOAP_CMAC _sai__GetServerCertificateReq
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE__sai__GetServerCertificateReq */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetServerCertificateReq() : soap(NULL) { }
	virtual ~_sai__GetServerCertificateReq() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetServerCertificateReqResponse
#define SOAP_TYPE__sai__GetServerCertificateReqResponse (120)
/* sai:GetServerCertificateReqResponse */
class SOAP_CMAC _sai__GetServerCertificateReqResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	xsd__base64Binary CertReq;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE__sai__GetServerCertificateReqResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetServerCertificateReqResponse() : soap(NULL) { }
	virtual ~_sai__GetServerCertificateReqResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetPkiCapabilities
#define SOAP_TYPE__sai__GetPkiCapabilities (121)
/* sai:GetPkiCapabilities */
class SOAP_CMAC _sai__GetPkiCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE__sai__GetPkiCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetPkiCapabilities() : soap(NULL) { }
	virtual ~_sai__GetPkiCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetPkiCapabilitiesResponse
#define SOAP_TYPE__sai__GetPkiCapabilitiesResponse (122)
/* sai:GetPkiCapabilitiesResponse */
class SOAP_CMAC _sai__GetPkiCapabilitiesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	sai__PkiCapsType *PkiCaps;	/* required element of type sai:PkiCapsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE__sai__GetPkiCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetPkiCapabilitiesResponse() : PkiCaps(NULL), soap(NULL) { }
	virtual ~_sai__GetPkiCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetPowerSavingOptions
#define SOAP_TYPE__sai__SetPowerSavingOptions (123)
/* sai:SetPowerSavingOptions */
class SOAP_CMAC _sai__SetPowerSavingOptions
{
public:
	enum sai__PowerStateType ActiveStateAC;	/* required element of type sai:PowerStateType */
	enum sai__PowerStateType *WakeOnNetAccessThresholdAC;	/* optional element of type sai:PowerStateType */
	unsigned short *WakeOnNetAccessSleepTimer;	/* optional element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE__sai__SetPowerSavingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetPowerSavingOptions() : WakeOnNetAccessThresholdAC(NULL), WakeOnNetAccessSleepTimer(NULL), soap(NULL) { }
	virtual ~_sai__SetPowerSavingOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetPowerSavingOptionsResponse
#define SOAP_TYPE__sai__SetPowerSavingOptionsResponse (124)
/* sai:SetPowerSavingOptionsResponse */
class SOAP_CMAC _sai__SetPowerSavingOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE__sai__SetPowerSavingOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetPowerSavingOptionsResponse() : soap(NULL) { }
	virtual ~_sai__SetPowerSavingOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetPowerSavingOptions
#define SOAP_TYPE__sai__GetPowerSavingOptions (125)
/* sai:GetPowerSavingOptions */
class SOAP_CMAC _sai__GetPowerSavingOptions
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE__sai__GetPowerSavingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetPowerSavingOptions() : soap(NULL) { }
	virtual ~_sai__GetPowerSavingOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetPowerSavingOptionsResponse
#define SOAP_TYPE__sai__GetPowerSavingOptionsResponse (126)
/* sai:GetPowerSavingOptionsResponse */
class SOAP_CMAC _sai__GetPowerSavingOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	enum sai__PowerStateType ActiveStateAC;	/* required element of type sai:PowerStateType */
	enum sai__PowerStateType *WakeOnNetAccessThresholdAC;	/* optional element of type sai:PowerStateType */
	unsigned short *WakeOnNetAccessSleepTimer;	/* optional element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE__sai__GetPowerSavingOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetPowerSavingOptionsResponse() : WakeOnNetAccessThresholdAC(NULL), WakeOnNetAccessSleepTimer(NULL), soap(NULL) { }
	virtual ~_sai__GetPowerSavingOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSPSK
#define SOAP_TYPE__sai__SetTLSPSK (127)
/* sai:SetTLSPSK */
class SOAP_CMAC _sai__SetTLSPSK
{
public:
	xsd__base64Binary PID;	/* required element of type xsd:base64Binary */
	xsd__base64Binary PPS;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE__sai__SetTLSPSK */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSPSK() : soap(NULL) { }
	virtual ~_sai__SetTLSPSK() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSPSKResponse
#define SOAP_TYPE__sai__SetTLSPSKResponse (128)
/* sai:SetTLSPSKResponse */
class SOAP_CMAC _sai__SetTLSPSKResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE__sai__SetTLSPSKResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSPSKResponse() : soap(NULL) { }
	virtual ~_sai__SetTLSPSKResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__PartialUnprovision
#define SOAP_TYPE__sai__PartialUnprovision (129)
/* sai:PartialUnprovision */
class SOAP_CMAC _sai__PartialUnprovision
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE__sai__PartialUnprovision */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__PartialUnprovision() : soap(NULL) { }
	virtual ~_sai__PartialUnprovision() { }
};
#endif

#ifndef SOAP_TYPE__sai__PartialUnprovisionResponse
#define SOAP_TYPE__sai__PartialUnprovisionResponse (130)
/* sai:PartialUnprovisionResponse */
class SOAP_CMAC _sai__PartialUnprovisionResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE__sai__PartialUnprovisionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__PartialUnprovisionResponse() : soap(NULL) { }
	virtual ~_sai__PartialUnprovisionResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetMEBxPassword
#define SOAP_TYPE__sai__SetMEBxPassword (131)
/* sai:SetMEBxPassword */
class SOAP_CMAC _sai__SetMEBxPassword
{
public:
	std::string Password;	/* required element of type sai:MEBxPasswordType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE__sai__SetMEBxPassword */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetMEBxPassword() : soap(NULL) { }
	virtual ~_sai__SetMEBxPassword() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetMEBxPasswordResponse
#define SOAP_TYPE__sai__SetMEBxPasswordResponse (132)
/* sai:SetMEBxPasswordResponse */
class SOAP_CMAC _sai__SetMEBxPasswordResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE__sai__SetMEBxPasswordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetMEBxPasswordResponse() : soap(NULL) { }
	virtual ~_sai__SetMEBxPasswordResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetProvisioningServerOTP
#define SOAP_TYPE__sai__SetProvisioningServerOTP (133)
/* sai:SetProvisioningServerOTP */
class SOAP_CMAC _sai__SetProvisioningServerOTP
{
public:
	xsd__base64Binary *OTP;	/* optional element of type sai:ProvisioningOTPType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE__sai__SetProvisioningServerOTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetProvisioningServerOTP() : OTP(NULL), soap(NULL) { }
	virtual ~_sai__SetProvisioningServerOTP() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetProvisioningServerOTPResponse
#define SOAP_TYPE__sai__SetProvisioningServerOTPResponse (134)
/* sai:SetProvisioningServerOTPResponse */
class SOAP_CMAC _sai__SetProvisioningServerOTPResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE__sai__SetProvisioningServerOTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetProvisioningServerOTPResponse() : soap(NULL) { }
	virtual ~_sai__SetProvisioningServerOTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningServerOTP
#define SOAP_TYPE__sai__GetProvisioningServerOTP (135)
/* sai:GetProvisioningServerOTP */
class SOAP_CMAC _sai__GetProvisioningServerOTP
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE__sai__GetProvisioningServerOTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningServerOTP() : soap(NULL) { }
	virtual ~_sai__GetProvisioningServerOTP() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningServerOTPResponse
#define SOAP_TYPE__sai__GetProvisioningServerOTPResponse (136)
/* sai:GetProvisioningServerOTPResponse */
class SOAP_CMAC _sai__GetProvisioningServerOTPResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	xsd__base64Binary OTP;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE__sai__GetProvisioningServerOTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningServerOTPResponse() : soap(NULL) { }
	virtual ~_sai__GetProvisioningServerOTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumerateCertificateHashEntries
#define SOAP_TYPE__sai__EnumerateCertificateHashEntries (137)
/* sai:EnumerateCertificateHashEntries */
class SOAP_CMAC _sai__EnumerateCertificateHashEntries
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE__sai__EnumerateCertificateHashEntries */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumerateCertificateHashEntries() : soap(NULL) { }
	virtual ~_sai__EnumerateCertificateHashEntries() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumerateCertificateHashEntriesResponse
#define SOAP_TYPE__sai__EnumerateCertificateHashEntriesResponse (138)
/* sai:EnumerateCertificateHashEntriesResponse */
class SOAP_CMAC _sai__EnumerateCertificateHashEntriesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::vector<unsigned int >Handles;	/* optional element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE__sai__EnumerateCertificateHashEntriesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumerateCertificateHashEntriesResponse() : soap(NULL) { }
	virtual ~_sai__EnumerateCertificateHashEntriesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetCertificateHashEntry
#define SOAP_TYPE__sai__GetCertificateHashEntry (139)
/* sai:GetCertificateHashEntry */
class SOAP_CMAC _sai__GetCertificateHashEntry
{
public:
	unsigned int Handle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE__sai__GetCertificateHashEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetCertificateHashEntry() : soap(NULL) { }
	virtual ~_sai__GetCertificateHashEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetCertificateHashEntryResponse
#define SOAP_TYPE__sai__GetCertificateHashEntryResponse (140)
/* sai:GetCertificateHashEntryResponse */
class SOAP_CMAC _sai__GetCertificateHashEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	sai__CertHashEntryType *CertHashEntry;	/* required element of type sai:CertHashEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE__sai__GetCertificateHashEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetCertificateHashEntryResponse() : CertHashEntry(NULL), soap(NULL) { }
	virtual ~_sai__GetCertificateHashEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddCertificateHashEntry
#define SOAP_TYPE__sai__AddCertificateHashEntry (141)
/* sai:AddCertificateHashEntry */
class SOAP_CMAC _sai__AddCertificateHashEntry
{
public:
	sai__CertHashEntryType *CertHashEntry;	/* required element of type sai:CertHashEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE__sai__AddCertificateHashEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddCertificateHashEntry() : CertHashEntry(NULL), soap(NULL) { }
	virtual ~_sai__AddCertificateHashEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__AddCertificateHashEntryResponse
#define SOAP_TYPE__sai__AddCertificateHashEntryResponse (142)
/* sai:AddCertificateHashEntryResponse */
class SOAP_CMAC _sai__AddCertificateHashEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	unsigned int Handle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE__sai__AddCertificateHashEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__AddCertificateHashEntryResponse() : soap(NULL) { }
	virtual ~_sai__AddCertificateHashEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__DeleteCertificateHashEntry
#define SOAP_TYPE__sai__DeleteCertificateHashEntry (143)
/* sai:DeleteCertificateHashEntry */
class SOAP_CMAC _sai__DeleteCertificateHashEntry
{
public:
	unsigned int Handle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE__sai__DeleteCertificateHashEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__DeleteCertificateHashEntry() : soap(NULL) { }
	virtual ~_sai__DeleteCertificateHashEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__DeleteCertificateHashEntryResponse
#define SOAP_TYPE__sai__DeleteCertificateHashEntryResponse (144)
/* sai:DeleteCertificateHashEntryResponse */
class SOAP_CMAC _sai__DeleteCertificateHashEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE__sai__DeleteCertificateHashEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__DeleteCertificateHashEntryResponse() : soap(NULL) { }
	virtual ~_sai__DeleteCertificateHashEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnableCertificateHashEntry
#define SOAP_TYPE__sai__EnableCertificateHashEntry (145)
/* sai:EnableCertificateHashEntry */
class SOAP_CMAC _sai__EnableCertificateHashEntry
{
public:
	unsigned int Handle;	/* required element of type xsd:unsignedInt */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE__sai__EnableCertificateHashEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnableCertificateHashEntry() : soap(NULL) { }
	virtual ~_sai__EnableCertificateHashEntry() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnableCertificateHashEntryResponse
#define SOAP_TYPE__sai__EnableCertificateHashEntryResponse (146)
/* sai:EnableCertificateHashEntryResponse */
class SOAP_CMAC _sai__EnableCertificateHashEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE__sai__EnableCertificateHashEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnableCertificateHashEntryResponse() : soap(NULL) { }
	virtual ~_sai__EnableCertificateHashEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetZeroTouchConfigurationMode
#define SOAP_TYPE__sai__GetZeroTouchConfigurationMode (147)
/* sai:GetZeroTouchConfigurationMode */
class SOAP_CMAC _sai__GetZeroTouchConfigurationMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE__sai__GetZeroTouchConfigurationMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetZeroTouchConfigurationMode() : soap(NULL) { }
	virtual ~_sai__GetZeroTouchConfigurationMode() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetZeroTouchConfigurationModeResponse
#define SOAP_TYPE__sai__GetZeroTouchConfigurationModeResponse (148)
/* sai:GetZeroTouchConfigurationModeResponse */
class SOAP_CMAC _sai__GetZeroTouchConfigurationModeResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE__sai__GetZeroTouchConfigurationModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetZeroTouchConfigurationModeResponse() : soap(NULL) { }
	virtual ~_sai__GetZeroTouchConfigurationModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetZeroTouchConfigurationMode
#define SOAP_TYPE__sai__SetZeroTouchConfigurationMode (149)
/* sai:SetZeroTouchConfigurationMode */
class SOAP_CMAC _sai__SetZeroTouchConfigurationMode
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE__sai__SetZeroTouchConfigurationMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetZeroTouchConfigurationMode() : soap(NULL) { }
	virtual ~_sai__SetZeroTouchConfigurationMode() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetZeroTouchConfigurationModeResponse
#define SOAP_TYPE__sai__SetZeroTouchConfigurationModeResponse (150)
/* sai:SetZeroTouchConfigurationModeResponse */
class SOAP_CMAC _sai__SetZeroTouchConfigurationModeResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE__sai__SetZeroTouchConfigurationModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetZeroTouchConfigurationModeResponse() : soap(NULL) { }
	virtual ~_sai__SetZeroTouchConfigurationModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningAuditRecord
#define SOAP_TYPE__sai__GetProvisioningAuditRecord (151)
/* sai:GetProvisioningAuditRecord */
class SOAP_CMAC _sai__GetProvisioningAuditRecord
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE__sai__GetProvisioningAuditRecord */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningAuditRecord() : soap(NULL) { }
	virtual ~_sai__GetProvisioningAuditRecord() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningAuditRecordResponse
#define SOAP_TYPE__sai__GetProvisioningAuditRecordResponse (152)
/* sai:GetProvisioningAuditRecordResponse */
class SOAP_CMAC _sai__GetProvisioningAuditRecordResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	sai__ProvisioningAuditRecordType *ProvisioningAuditRecord;	/* required element of type sai:ProvisioningAuditRecordType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE__sai__GetProvisioningAuditRecordResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningAuditRecordResponse() : ProvisioningAuditRecord(NULL), soap(NULL) { }
	virtual ~_sai__GetProvisioningAuditRecordResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningPID
#define SOAP_TYPE__sai__GetProvisioningPID (153)
/* sai:GetProvisioningPID */
class SOAP_CMAC _sai__GetProvisioningPID
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE__sai__GetProvisioningPID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningPID() : soap(NULL) { }
	virtual ~_sai__GetProvisioningPID() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetProvisioningPIDResponse
#define SOAP_TYPE__sai__GetProvisioningPIDResponse (154)
/* sai:GetProvisioningPIDResponse */
class SOAP_CMAC _sai__GetProvisioningPIDResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	xsd__base64Binary PID;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE__sai__GetProvisioningPIDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetProvisioningPIDResponse() : soap(NULL) { }
	virtual ~_sai__GetProvisioningPIDResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__ExtendProvisioningPeriod
#define SOAP_TYPE__sai__ExtendProvisioningPeriod (155)
/* sai:ExtendProvisioningPeriod */
class SOAP_CMAC _sai__ExtendProvisioningPeriod
{
public:
	unsigned int Duration;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE__sai__ExtendProvisioningPeriod */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__ExtendProvisioningPeriod() : soap(NULL) { }
	virtual ~_sai__ExtendProvisioningPeriod() { }
};
#endif

#ifndef SOAP_TYPE__sai__ExtendProvisioningPeriodResponse
#define SOAP_TYPE__sai__ExtendProvisioningPeriodResponse (156)
/* sai:ExtendProvisioningPeriodResponse */
class SOAP_CMAC _sai__ExtendProvisioningPeriodResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE__sai__ExtendProvisioningPeriodResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__ExtendProvisioningPeriodResponse() : soap(NULL) { }
	virtual ~_sai__ExtendProvisioningPeriodResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetRealmAuthOptions
#define SOAP_TYPE__sai__GetRealmAuthOptions (157)
/* sai:GetRealmAuthOptions */
class SOAP_CMAC _sai__GetRealmAuthOptions
{
public:
	enum sai__UserAclRealmType Realm;	/* required element of type sai:UserAclRealmType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE__sai__GetRealmAuthOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetRealmAuthOptions() : soap(NULL) { }
	virtual ~_sai__GetRealmAuthOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetRealmAuthOptionsResponse
#define SOAP_TYPE__sai__GetRealmAuthOptionsResponse (158)
/* sai:GetRealmAuthOptionsResponse */
class SOAP_CMAC _sai__GetRealmAuthOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	enum sai__HTTPAuthOptionType HTTPAuthOption;	/* required element of type sai:HTTPAuthOptionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE__sai__GetRealmAuthOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetRealmAuthOptionsResponse() : soap(NULL) { }
	virtual ~_sai__GetRealmAuthOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetRealmAuthOptions
#define SOAP_TYPE__sai__SetRealmAuthOptions (159)
/* sai:SetRealmAuthOptions */
class SOAP_CMAC _sai__SetRealmAuthOptions
{
public:
	enum sai__UserAclRealmType Realm;	/* required element of type sai:UserAclRealmType */
	enum sai__HTTPAuthOptionType HTTPAuthOption;	/* required element of type sai:HTTPAuthOptionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE__sai__SetRealmAuthOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetRealmAuthOptions() : soap(NULL) { }
	virtual ~_sai__SetRealmAuthOptions() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetRealmAuthOptionsResponse
#define SOAP_TYPE__sai__SetRealmAuthOptionsResponse (160)
/* sai:SetRealmAuthOptionsResponse */
class SOAP_CMAC _sai__SetRealmAuthOptionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type sai:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE__sai__SetRealmAuthOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetRealmAuthOptionsResponse() : soap(NULL) { }
	virtual ~_sai__SetRealmAuthOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetEnvironmentDetection
#define SOAP_TYPE__sai__SetEnvironmentDetection (161)
/* sai:SetEnvironmentDetection */
class SOAP_CMAC _sai__SetEnvironmentDetection
{
public:
	sai__EnvironmentDetectionType *Params;	/* required element of type sai:EnvironmentDetectionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE__sai__SetEnvironmentDetection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetEnvironmentDetection() : Params(NULL), soap(NULL) { }
	virtual ~_sai__SetEnvironmentDetection() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetEnvironmentDetectionResponse
#define SOAP_TYPE__sai__SetEnvironmentDetectionResponse (162)
/* sai:SetEnvironmentDetectionResponse */
class SOAP_CMAC _sai__SetEnvironmentDetectionResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE__sai__SetEnvironmentDetectionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetEnvironmentDetectionResponse() : soap(NULL) { }
	virtual ~_sai__SetEnvironmentDetectionResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetEnvironmentDetection
#define SOAP_TYPE__sai__GetEnvironmentDetection (163)
/* sai:GetEnvironmentDetection */
class SOAP_CMAC _sai__GetEnvironmentDetection
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE__sai__GetEnvironmentDetection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetEnvironmentDetection() : soap(NULL) { }
	virtual ~_sai__GetEnvironmentDetection() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetEnvironmentDetectionResponse
#define SOAP_TYPE__sai__GetEnvironmentDetectionResponse (164)
/* sai:GetEnvironmentDetectionResponse */
class SOAP_CMAC _sai__GetEnvironmentDetectionResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	sai__EnvironmentDetectionType *Params;	/* required element of type sai:EnvironmentDetectionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE__sai__GetEnvironmentDetectionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetEnvironmentDetectionResponse() : Params(NULL), soap(NULL) { }
	virtual ~_sai__GetEnvironmentDetectionResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumeratePowerPackages
#define SOAP_TYPE__sai__EnumeratePowerPackages (165)
/* sai:EnumeratePowerPackages */
class SOAP_CMAC _sai__EnumeratePowerPackages
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE__sai__EnumeratePowerPackages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumeratePowerPackages() : soap(NULL) { }
	virtual ~_sai__EnumeratePowerPackages() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnumeratePowerPackagesResponse
#define SOAP_TYPE__sai__EnumeratePowerPackagesResponse (166)
/* sai:EnumeratePowerPackagesResponse */
class SOAP_CMAC _sai__EnumeratePowerPackagesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::vector<xsd__base64Binary >PolicyGUID;	/* optional element of type cmn:GuidBuf */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE__sai__EnumeratePowerPackagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnumeratePowerPackagesResponse() : soap(NULL) { }
	virtual ~_sai__EnumeratePowerPackagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetActivePowerPackage
#define SOAP_TYPE__sai__GetActivePowerPackage (167)
/* sai:GetActivePowerPackage */
class SOAP_CMAC _sai__GetActivePowerPackage
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE__sai__GetActivePowerPackage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetActivePowerPackage() : soap(NULL) { }
	virtual ~_sai__GetActivePowerPackage() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetActivePowerPackageResponse
#define SOAP_TYPE__sai__GetActivePowerPackageResponse (168)
/* sai:GetActivePowerPackageResponse */
class SOAP_CMAC _sai__GetActivePowerPackageResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	xsd__base64Binary PolicyGUID;	/* required element of type cmn:GuidBuf */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE__sai__GetActivePowerPackageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetActivePowerPackageResponse() : soap(NULL) { }
	virtual ~_sai__GetActivePowerPackageResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetPowerPackage
#define SOAP_TYPE__sai__GetPowerPackage (169)
/* sai:GetPowerPackage */
class SOAP_CMAC _sai__GetPowerPackage
{
public:
	xsd__base64Binary PolicyGUID;	/* required element of type cmn:GuidBuf */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE__sai__GetPowerPackage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetPowerPackage() : soap(NULL) { }
	virtual ~_sai__GetPowerPackage() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetPowerPackageResponse
#define SOAP_TYPE__sai__GetPowerPackageResponse (170)
/* sai:GetPowerPackageResponse */
class SOAP_CMAC _sai__GetPowerPackageResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::string PolicyDescriptor;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE__sai__GetPowerPackageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetPowerPackageResponse() : soap(NULL) { }
	virtual ~_sai__GetPowerPackageResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetActivePowerPackage
#define SOAP_TYPE__sai__SetActivePowerPackage (171)
/* sai:SetActivePowerPackage */
class SOAP_CMAC _sai__SetActivePowerPackage
{
public:
	xsd__base64Binary PolicyGUID;	/* required element of type cmn:GuidBuf */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE__sai__SetActivePowerPackage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetActivePowerPackage() : soap(NULL) { }
	virtual ~_sai__SetActivePowerPackage() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetActivePowerPackageResponse
#define SOAP_TYPE__sai__SetActivePowerPackageResponse (172)
/* sai:SetActivePowerPackageResponse */
class SOAP_CMAC _sai__SetActivePowerPackageResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE__sai__SetActivePowerPackageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetActivePowerPackageResponse() : soap(NULL) { }
	virtual ~_sai__SetActivePowerPackageResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetGlobalPowerPolicy
#define SOAP_TYPE__sai__SetGlobalPowerPolicy (173)
/* sai:SetGlobalPowerPolicy */
class SOAP_CMAC _sai__SetGlobalPowerPolicy
{
public:
	sai__GlobalPowerPolicyType *GlobalPowerPolicy;	/* required element of type sai:GlobalPowerPolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE__sai__SetGlobalPowerPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetGlobalPowerPolicy() : GlobalPowerPolicy(NULL), soap(NULL) { }
	virtual ~_sai__SetGlobalPowerPolicy() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetGlobalPowerPolicyResponse
#define SOAP_TYPE__sai__SetGlobalPowerPolicyResponse (174)
/* sai:SetGlobalPowerPolicyResponse */
class SOAP_CMAC _sai__SetGlobalPowerPolicyResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE__sai__SetGlobalPowerPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetGlobalPowerPolicyResponse() : soap(NULL) { }
	virtual ~_sai__SetGlobalPowerPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetGlobalPowerPolicy
#define SOAP_TYPE__sai__GetGlobalPowerPolicy (175)
/* sai:GetGlobalPowerPolicy */
class SOAP_CMAC _sai__GetGlobalPowerPolicy
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE__sai__GetGlobalPowerPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetGlobalPowerPolicy() : soap(NULL) { }
	virtual ~_sai__GetGlobalPowerPolicy() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetGlobalPowerPolicyResponse
#define SOAP_TYPE__sai__GetGlobalPowerPolicyResponse (176)
/* sai:GetGlobalPowerPolicyResponse */
class SOAP_CMAC _sai__GetGlobalPowerPolicyResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	sai__GlobalPowerPolicyType *GlobalPowerPolicy;	/* required element of type sai:GlobalPowerPolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE__sai__GetGlobalPowerPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetGlobalPowerPolicyResponse() : GlobalPowerPolicy(NULL), soap(NULL) { }
	virtual ~_sai__GetGlobalPowerPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreAddKey
#define SOAP_TYPE__sai__CertStoreAddKey (177)
/* sai:CertStoreAddKey */
class SOAP_CMAC _sai__CertStoreAddKey
{
public:
	cstr__KeyPairType *KeyPair;	/* required element of type cstr:KeyPairType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE__sai__CertStoreAddKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreAddKey() : KeyPair(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreAddKey() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreAddKeyResponse
#define SOAP_TYPE__sai__CertStoreAddKeyResponse (178)
/* sai:CertStoreAddKeyResponse */
class SOAP_CMAC _sai__CertStoreAddKeyResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	unsigned int KeyPairHandle;	/* required element of type cstr:KeyPairHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE__sai__CertStoreAddKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreAddKeyResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreAddKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreEnumerateKeys
#define SOAP_TYPE__sai__CertStoreEnumerateKeys (179)
/* sai:CertStoreEnumerateKeys */
class SOAP_CMAC _sai__CertStoreEnumerateKeys
{
public:
	unsigned int *FindByCert;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE__sai__CertStoreEnumerateKeys */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreEnumerateKeys() : FindByCert(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreEnumerateKeys() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreEnumerateKeysResponse
#define SOAP_TYPE__sai__CertStoreEnumerateKeysResponse (180)
/* sai:CertStoreEnumerateKeysResponse */
class SOAP_CMAC _sai__CertStoreEnumerateKeysResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::vector<unsigned int >KeyPairHandles;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE__sai__CertStoreEnumerateKeysResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreEnumerateKeysResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreEnumerateKeysResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreGetKey
#define SOAP_TYPE__sai__CertStoreGetKey (181)
/* sai:CertStoreGetKey */
class SOAP_CMAC _sai__CertStoreGetKey
{
public:
	unsigned int KeyPairHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE__sai__CertStoreGetKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreGetKey() : soap(NULL) { }
	virtual ~_sai__CertStoreGetKey() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreGetKeyResponse
#define SOAP_TYPE__sai__CertStoreGetKeyResponse (182)
/* sai:CertStoreGetKeyResponse */
class SOAP_CMAC _sai__CertStoreGetKeyResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	cstr__KeyPairType *PublicKey;	/* required element of type cstr:KeyPairType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE__sai__CertStoreGetKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreGetKeyResponse() : PublicKey(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreGetKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreRemoveKey
#define SOAP_TYPE__sai__CertStoreRemoveKey (183)
/* sai:CertStoreRemoveKey */
class SOAP_CMAC _sai__CertStoreRemoveKey
{
public:
	unsigned int KeyPairHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE__sai__CertStoreRemoveKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreRemoveKey() : soap(NULL) { }
	virtual ~_sai__CertStoreRemoveKey() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreRemoveKeyResponse
#define SOAP_TYPE__sai__CertStoreRemoveKeyResponse (184)
/* sai:CertStoreRemoveKeyResponse */
class SOAP_CMAC _sai__CertStoreRemoveKeyResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE__sai__CertStoreRemoveKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreRemoveKeyResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreRemoveKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreAddCertificate
#define SOAP_TYPE__sai__CertStoreAddCertificate (185)
/* sai:CertStoreAddCertificate */
class SOAP_CMAC _sai__CertStoreAddCertificate
{
public:
	sai__CertificateType *Certificate;	/* required element of type sai:CertificateType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE__sai__CertStoreAddCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreAddCertificate() : Certificate(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreAddCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreAddCertificateResponse
#define SOAP_TYPE__sai__CertStoreAddCertificateResponse (186)
/* sai:CertStoreAddCertificateResponse */
class SOAP_CMAC _sai__CertStoreAddCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	unsigned int CertHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE__sai__CertStoreAddCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreAddCertificateResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreAddCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreEnumerateCertificates
#define SOAP_TYPE__sai__CertStoreEnumerateCertificates (187)
/* sai:CertStoreEnumerateCertificates */
class SOAP_CMAC _sai__CertStoreEnumerateCertificates
{
public:
	std::string *FindByDNName;	/* optional element of type xsd:string */
	std::string *FindByUsage;	/* optional element of type xsd:string */
	std::string *FindByIssuer;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE__sai__CertStoreEnumerateCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreEnumerateCertificates() : FindByDNName(NULL), FindByUsage(NULL), FindByIssuer(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreEnumerateCertificates() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreEnumerateCertificatesResponse
#define SOAP_TYPE__sai__CertStoreEnumerateCertificatesResponse (188)
/* sai:CertStoreEnumerateCertificatesResponse */
class SOAP_CMAC _sai__CertStoreEnumerateCertificatesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::vector<unsigned int >CertHandles;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE__sai__CertStoreEnumerateCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreEnumerateCertificatesResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreEnumerateCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreGetCertificate
#define SOAP_TYPE__sai__CertStoreGetCertificate (189)
/* sai:CertStoreGetCertificate */
class SOAP_CMAC _sai__CertStoreGetCertificate
{
public:
	unsigned int CertHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE__sai__CertStoreGetCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreGetCertificate() : soap(NULL) { }
	virtual ~_sai__CertStoreGetCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreGetCertificateResponse
#define SOAP_TYPE__sai__CertStoreGetCertificateResponse (190)
/* sai:CertStoreGetCertificateResponse */
class SOAP_CMAC _sai__CertStoreGetCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	sai__CertificateType *Certificate;	/* required element of type sai:CertificateType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE__sai__CertStoreGetCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreGetCertificateResponse() : Certificate(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreGetCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreRemoveCertificate
#define SOAP_TYPE__sai__CertStoreRemoveCertificate (191)
/* sai:CertStoreRemoveCertificate */
class SOAP_CMAC _sai__CertStoreRemoveCertificate
{
public:
	unsigned int CertHandle;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE__sai__CertStoreRemoveCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreRemoveCertificate() : soap(NULL) { }
	virtual ~_sai__CertStoreRemoveCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreRemoveCertificateResponse
#define SOAP_TYPE__sai__CertStoreRemoveCertificateResponse (192)
/* sai:CertStoreRemoveCertificateResponse */
class SOAP_CMAC _sai__CertStoreRemoveCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE__sai__CertStoreRemoveCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreRemoveCertificateResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreRemoveCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreGetPKCS10Request
#define SOAP_TYPE__sai__CertStoreGetPKCS10Request (193)
/* sai:CertStoreGetPKCS10Request */
class SOAP_CMAC _sai__CertStoreGetPKCS10Request
{
public:
	unsigned int KeyPairHandle;	/* required element of type sai:CertificateHandleType */
	std::string *DNName;	/* optional element of type xsd:string */
	std::string *Usage;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE__sai__CertStoreGetPKCS10Request */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreGetPKCS10Request() : DNName(NULL), Usage(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreGetPKCS10Request() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreGetPKCS10RequestResponse
#define SOAP_TYPE__sai__CertStoreGetPKCS10RequestResponse (194)
/* sai:CertStoreGetPKCS10RequestResponse */
class SOAP_CMAC _sai__CertStoreGetPKCS10RequestResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	xsd__base64Binary CertificateRequest;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE__sai__CertStoreGetPKCS10RequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreGetPKCS10RequestResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreGetPKCS10RequestResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreUpdateCertificate
#define SOAP_TYPE__sai__CertStoreUpdateCertificate (195)
/* sai:CertStoreUpdateCertificate */
class SOAP_CMAC _sai__CertStoreUpdateCertificate
{
public:
	unsigned int CertHandle;	/* required element of type sai:CertificateHandleType */
	sai__CertificateType *Certificate;	/* required element of type sai:CertificateType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE__sai__CertStoreUpdateCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreUpdateCertificate() : Certificate(NULL), soap(NULL) { }
	virtual ~_sai__CertStoreUpdateCertificate() { }
};
#endif

#ifndef SOAP_TYPE__sai__CertStoreUpdateCertificateResponse
#define SOAP_TYPE__sai__CertStoreUpdateCertificateResponse (196)
/* sai:CertStoreUpdateCertificateResponse */
class SOAP_CMAC _sai__CertStoreUpdateCertificateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE__sai__CertStoreUpdateCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__CertStoreUpdateCertificateResponse() : soap(NULL) { }
	virtual ~_sai__CertStoreUpdateCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSCredentials
#define SOAP_TYPE__sai__SetTLSCredentials (197)
/* sai:SetTLSCredentials */
class SOAP_CMAC _sai__SetTLSCredentials
{
public:
	unsigned int *CertHandle;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE__sai__SetTLSCredentials */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSCredentials() : CertHandle(NULL), soap(NULL) { }
	virtual ~_sai__SetTLSCredentials() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetTLSCredentialsResponse
#define SOAP_TYPE__sai__SetTLSCredentialsResponse (198)
/* sai:SetTLSCredentialsResponse */
class SOAP_CMAC _sai__SetTLSCredentialsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE__sai__SetTLSCredentialsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetTLSCredentialsResponse() : soap(NULL) { }
	virtual ~_sai__SetTLSCredentialsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTLSCredentials
#define SOAP_TYPE__sai__GetTLSCredentials (199)
/* sai:GetTLSCredentials */
class SOAP_CMAC _sai__GetTLSCredentials
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE__sai__GetTLSCredentials */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTLSCredentials() : soap(NULL) { }
	virtual ~_sai__GetTLSCredentials() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetTLSCredentialsResponse
#define SOAP_TYPE__sai__GetTLSCredentialsResponse (200)
/* sai:GetTLSCredentialsResponse */
class SOAP_CMAC _sai__GetTLSCredentialsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	unsigned int *CertHandle;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE__sai__GetTLSCredentialsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetTLSCredentialsResponse() : CertHandle(NULL), soap(NULL) { }
	virtual ~_sai__GetTLSCredentialsResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnableVpnRouting
#define SOAP_TYPE__sai__EnableVpnRouting (201)
/* sai:EnableVpnRouting */
class SOAP_CMAC _sai__EnableVpnRouting
{
public:
	bool Enable;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE__sai__EnableVpnRouting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnableVpnRouting() : soap(NULL) { }
	virtual ~_sai__EnableVpnRouting() { }
};
#endif

#ifndef SOAP_TYPE__sai__EnableVpnRoutingResponse
#define SOAP_TYPE__sai__EnableVpnRoutingResponse (202)
/* sai:EnableVpnRoutingResponse */
class SOAP_CMAC _sai__EnableVpnRoutingResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE__sai__EnableVpnRoutingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__EnableVpnRoutingResponse() : soap(NULL) { }
	virtual ~_sai__EnableVpnRoutingResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetConfigurationServerFQDN
#define SOAP_TYPE__sai__SetConfigurationServerFQDN (203)
/* sai:SetConfigurationServerFQDN */
class SOAP_CMAC _sai__SetConfigurationServerFQDN
{
public:
	std::string fqdn;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE__sai__SetConfigurationServerFQDN */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetConfigurationServerFQDN() : soap(NULL) { }
	virtual ~_sai__SetConfigurationServerFQDN() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetConfigurationServerFQDNResponse
#define SOAP_TYPE__sai__SetConfigurationServerFQDNResponse (204)
/* sai:SetConfigurationServerFQDNResponse */
class SOAP_CMAC _sai__SetConfigurationServerFQDNResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE__sai__SetConfigurationServerFQDNResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetConfigurationServerFQDNResponse() : soap(NULL) { }
	virtual ~_sai__SetConfigurationServerFQDNResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetConfigurationServerFQDN
#define SOAP_TYPE__sai__GetConfigurationServerFQDN (205)
/* sai:GetConfigurationServerFQDN */
class SOAP_CMAC _sai__GetConfigurationServerFQDN
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE__sai__GetConfigurationServerFQDN */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetConfigurationServerFQDN() : soap(NULL) { }
	virtual ~_sai__GetConfigurationServerFQDN() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetConfigurationServerFQDNResponse
#define SOAP_TYPE__sai__GetConfigurationServerFQDNResponse (206)
/* sai:GetConfigurationServerFQDNResponse */
class SOAP_CMAC _sai__GetConfigurationServerFQDNResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::string fqdn;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE__sai__GetConfigurationServerFQDNResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetConfigurationServerFQDNResponse() : soap(NULL) { }
	virtual ~_sai__GetConfigurationServerFQDNResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetAclEnabledState
#define SOAP_TYPE__sai__SetAclEnabledState (207)
/* sai:SetAclEnabledState */
class SOAP_CMAC _sai__SetAclEnabledState
{
public:
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE__sai__SetAclEnabledState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetAclEnabledState() : soap(NULL) { }
	virtual ~_sai__SetAclEnabledState() { }
};
#endif

#ifndef SOAP_TYPE__sai__SetAclEnabledStateResponse
#define SOAP_TYPE__sai__SetAclEnabledStateResponse (208)
/* sai:SetAclEnabledStateResponse */
class SOAP_CMAC _sai__SetAclEnabledStateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE__sai__SetAclEnabledStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__SetAclEnabledStateResponse() : soap(NULL) { }
	virtual ~_sai__SetAclEnabledStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetAclEnabledState
#define SOAP_TYPE__sai__GetAclEnabledState (209)
/* sai:GetAclEnabledState */
class SOAP_CMAC _sai__GetAclEnabledState
{
public:
	unsigned int Handle;	/* required element of type sai:UserAclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE__sai__GetAclEnabledState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetAclEnabledState() : soap(NULL) { }
	virtual ~_sai__GetAclEnabledState() { }
};
#endif

#ifndef SOAP_TYPE__sai__GetAclEnabledStateResponse
#define SOAP_TYPE__sai__GetAclEnabledStateResponse (210)
/* sai:GetAclEnabledStateResponse */
class SOAP_CMAC _sai__GetAclEnabledStateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE__sai__GetAclEnabledStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _sai__GetAclEnabledStateResponse() : soap(NULL) { }
	virtual ~_sai__GetAclEnabledStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__UserCredentialsType
#define SOAP_TYPE_xcfg__UserCredentialsType (211)
/* xcfg:UserCredentialsType */
class SOAP_CMAC xcfg__UserCredentialsType
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string Password;	/* required element of type xsd:string */
	std::string *Domain;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE_xcfg__UserCredentialsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__UserCredentialsType() : Domain(NULL), soap(NULL) { }
	virtual ~xcfg__UserCredentialsType() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__CertificateNameType
#define SOAP_TYPE_xcfg__CertificateNameType (212)
/* xcfg:CertificateNameType */
class SOAP_CMAC xcfg__CertificateNameType
{
public:
	std::string ServerOrCertName;	/* required element of type xsd:string */
	enum xcfg__CertNameOptionsType Options;	/* required element of type xcfg:CertNameOptionsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE_xcfg__CertificateNameType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__CertificateNameType() : soap(NULL) { }
	virtual ~xcfg__CertificateNameType() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__ManualPACType
#define SOAP_TYPE_xcfg__ManualPACType (213)
/* xcfg:ManualPACType */
class SOAP_CMAC xcfg__ManualPACType
{
public:
	xsd__base64Binary PACData;	/* required element of type xsd:base64Binary */
	std::string *Password;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_xcfg__ManualPACType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__ManualPACType() : Password(NULL), soap(NULL) { }
	virtual ~xcfg__ManualPACType() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__ServerIdentityType
#define SOAP_TYPE_xcfg__ServerIdentityType (214)
/* xcfg:ServerIdentityType */
class SOAP_CMAC xcfg__ServerIdentityType
{
public:
	unsigned int *CertificateIssuer;	/* optional element of type sai:CertificateHandleType */
	xcfg__CertificateNameType *ServerNameOptions;	/* optional element of type xcfg:CertificateNameType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_xcfg__ServerIdentityType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__ServerIdentityType() : CertificateIssuer(NULL), ServerNameOptions(NULL), soap(NULL) { }
	virtual ~xcfg__ServerIdentityType() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfileTLSType
#define SOAP_TYPE_xcfg__XProfileTLSType (215)
/* xcfg:XProfileTLSType */
class SOAP_CMAC xcfg__XProfileTLSType
{
public:
	std::string Username;	/* required element of type xsd:string */
	xcfg__ServerIdentityType *ServerIdentity;	/* required element of type xcfg:ServerIdentityType */
	unsigned int ClientCertificate;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE_xcfg__XProfileTLSType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfileTLSType() : ServerIdentity(NULL), soap(NULL) { }
	virtual ~xcfg__XProfileTLSType() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfileTTLS_USCOREMSCHAPv2Type
#define SOAP_TYPE_xcfg__XProfileTTLS_USCOREMSCHAPv2Type (216)
/* xcfg:XProfileTTLS_MSCHAPv2Type */
class SOAP_CMAC xcfg__XProfileTTLS_USCOREMSCHAPv2Type
{
public:
	std::string *RoamingIdentity;	/* optional element of type xsd:string */
	xcfg__ServerIdentityType *ServerIdentity;	/* required element of type xcfg:ServerIdentityType */
	xcfg__UserCredentialsType *UserCredentials;	/* required element of type xcfg:UserCredentialsType */
	unsigned int *ClientCertificate;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE_xcfg__XProfileTTLS_USCOREMSCHAPv2Type */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfileTTLS_USCOREMSCHAPv2Type() : RoamingIdentity(NULL), ServerIdentity(NULL), UserCredentials(NULL), ClientCertificate(NULL), soap(NULL) { }
	virtual ~xcfg__XProfileTTLS_USCOREMSCHAPv2Type() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfilePEAP_USCOREMSCHAPv2Type
#define SOAP_TYPE_xcfg__XProfilePEAP_USCOREMSCHAPv2Type (217)
/* xcfg:XProfilePEAP_MSCHAPv2Type */
class SOAP_CMAC xcfg__XProfilePEAP_USCOREMSCHAPv2Type
{
public:
	std::string *RoamingIdentity;	/* optional element of type xsd:string */
	xcfg__ServerIdentityType *ServerIdentity;	/* required element of type xcfg:ServerIdentityType */
	xcfg__UserCredentialsType *UserCredentials;	/* required element of type xcfg:UserCredentialsType */
	unsigned int *ClientCertificate;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE_xcfg__XProfilePEAP_USCOREMSCHAPv2Type */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfilePEAP_USCOREMSCHAPv2Type() : RoamingIdentity(NULL), ServerIdentity(NULL), UserCredentials(NULL), ClientCertificate(NULL), soap(NULL) { }
	virtual ~xcfg__XProfilePEAP_USCOREMSCHAPv2Type() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfileEAP_USCOREGTCType
#define SOAP_TYPE_xcfg__XProfileEAP_USCOREGTCType (218)
/* xcfg:XProfileEAP_GTCType */
class SOAP_CMAC xcfg__XProfileEAP_USCOREGTCType
{
public:
	xcfg__UserCredentialsType *UserCredentials;	/* required element of type xcfg:UserCredentialsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_xcfg__XProfileEAP_USCOREGTCType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfileEAP_USCOREGTCType() : UserCredentials(NULL), soap(NULL) { }
	virtual ~xcfg__XProfileEAP_USCOREGTCType() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfileEAPFAST_USCOREMSCHAPv2Type
#define SOAP_TYPE_xcfg__XProfileEAPFAST_USCOREMSCHAPv2Type (219)
/* xcfg:XProfileEAPFAST_MSCHAPv2Type */
class SOAP_CMAC xcfg__XProfileEAPFAST_USCOREMSCHAPv2Type
{
public:
	std::string *RoamingIdentity;	/* optional element of type xsd:string */
	xcfg__ServerIdentityType *ServerIdentity;	/* required element of type xcfg:ServerIdentityType */
	xcfg__UserCredentialsType *UserCredentials;	/* required element of type xcfg:UserCredentialsType */
	xcfg__ManualPACType *ProtectedAccessCredentials;	/* optional element of type xcfg:ManualPACType */
	unsigned int *ClientCertificate;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE_xcfg__XProfileEAPFAST_USCOREMSCHAPv2Type */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfileEAPFAST_USCOREMSCHAPv2Type() : RoamingIdentity(NULL), ServerIdentity(NULL), UserCredentials(NULL), ProtectedAccessCredentials(NULL), ClientCertificate(NULL), soap(NULL) { }
	virtual ~xcfg__XProfileEAPFAST_USCOREMSCHAPv2Type() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfileEAPFAST_USCOREGTCType
#define SOAP_TYPE_xcfg__XProfileEAPFAST_USCOREGTCType (220)
/* xcfg:XProfileEAPFAST_GTCType */
class SOAP_CMAC xcfg__XProfileEAPFAST_USCOREGTCType
{
public:
	std::string *RoamingIdentity;	/* optional element of type xsd:string */
	xcfg__ServerIdentityType *ServerIdentity;	/* required element of type xcfg:ServerIdentityType */
	xcfg__UserCredentialsType *UserCredentials;	/* required element of type xcfg:UserCredentialsType */
	xcfg__ManualPACType *ProtectedAccessCredentials;	/* optional element of type xcfg:ManualPACType */
	unsigned int *ClientCertificate;	/* optional element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE_xcfg__XProfileEAPFAST_USCOREGTCType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfileEAPFAST_USCOREGTCType() : RoamingIdentity(NULL), ServerIdentity(NULL), UserCredentials(NULL), ProtectedAccessCredentials(NULL), ClientCertificate(NULL), soap(NULL) { }
	virtual ~xcfg__XProfileEAPFAST_USCOREGTCType() { }
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfileEAPFAST_USCORETLSType
#define SOAP_TYPE_xcfg__XProfileEAPFAST_USCORETLSType (221)
/* xcfg:XProfileEAPFAST_TLSType */
class SOAP_CMAC xcfg__XProfileEAPFAST_USCORETLSType
{
public:
	std::string *RoamingIdentity;	/* optional element of type xsd:string */
	xcfg__ServerIdentityType *ServerIdentity;	/* required element of type xcfg:ServerIdentityType */
	xcfg__UserCredentialsType *UserCredentials;	/* required element of type xcfg:UserCredentialsType */
	xcfg__ManualPACType *ProtectedAccessCredentials;	/* optional element of type xcfg:ManualPACType */
	unsigned int ClientCertificate;	/* required element of type sai:CertificateHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE_xcfg__XProfileEAPFAST_USCORETLSType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfileEAPFAST_USCORETLSType() : RoamingIdentity(NULL), ServerIdentity(NULL), UserCredentials(NULL), ProtectedAccessCredentials(NULL), soap(NULL) { }
	virtual ~xcfg__XProfileEAPFAST_USCORETLSType() { }
};
#endif

#ifndef SOAP_TYPE__xcfg__union_XProfileType
#define SOAP_TYPE__xcfg__union_XProfileType (725)
/* xsd:choice */
union _xcfg__union_XProfileType
{
#define SOAP_UNION__xcfg__union_XProfileType_TLS	(1)
	xcfg__XProfileTLSType *TLS;
#define SOAP_UNION__xcfg__union_XProfileType_TTLS_USCOREMSCHAPv2	(2)
	xcfg__XProfileTTLS_USCOREMSCHAPv2Type *TTLS_USCOREMSCHAPv2;
#define SOAP_UNION__xcfg__union_XProfileType_PEAP_USCOREMSCHAPv2	(3)
	xcfg__XProfilePEAP_USCOREMSCHAPv2Type *PEAP_USCOREMSCHAPv2;
#define SOAP_UNION__xcfg__union_XProfileType_EAP_USCOREGTC	(4)
	xcfg__XProfileEAP_USCOREGTCType *EAP_USCOREGTC;
#define SOAP_UNION__xcfg__union_XProfileType_EAPFAST_USCOREMSCHAPv2	(5)
	xcfg__XProfileEAPFAST_USCOREMSCHAPv2Type *EAPFAST_USCOREMSCHAPv2;
#define SOAP_UNION__xcfg__union_XProfileType_EAPFAST_USCOREGTC	(6)
	xcfg__XProfileEAPFAST_USCOREGTCType *EAPFAST_USCOREGTC;
#define SOAP_UNION__xcfg__union_XProfileType_EAPFAST_USCORETLS	(7)
	xcfg__XProfileEAPFAST_USCORETLSType *EAPFAST_USCORETLS;
};
#endif

#ifndef SOAP_TYPE_xcfg__XProfileType
#define SOAP_TYPE_xcfg__XProfileType (222)
/* xcfg:XProfileType */
class SOAP_CMAC xcfg__XProfileType
{
public:
	int __union_XProfileType;	/* union discriminant (of union defined below) */
	union _xcfg__union_XProfileType union_XProfileType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE_xcfg__XProfileType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xcfg__XProfileType() : soap(NULL) { }
	virtual ~xcfg__XProfileType() { }
};
#endif

#ifndef SOAP_TYPE_net__StaticIPv4ParametersType
#define SOAP_TYPE_net__StaticIPv4ParametersType (223)
/* net:StaticIPv4ParametersType */
class SOAP_CMAC net__StaticIPv4ParametersType
{
public:
	unsigned int LocalAddress;	/* required element of type net:IPv4AddressType */
	unsigned int SubnetMask;	/* required element of type net:IPv4AddressType */
	unsigned int DefaultGatewayAddress;	/* required element of type net:IPv4AddressType */
	unsigned int PrimaryDnsAddress;	/* required element of type net:IPv4AddressType */
	unsigned int SecondaryDnsAddress;	/* required element of type net:IPv4AddressType */
	std::string *DomainName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_net__StaticIPv4ParametersType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         net__StaticIPv4ParametersType() : DomainName(NULL), soap(NULL) { }
	virtual ~net__StaticIPv4ParametersType() { }
};
#endif

#ifndef SOAP_TYPE_net__IPv4ParametersType
#define SOAP_TYPE_net__IPv4ParametersType (224)
/* net:IPv4ParametersType */
class SOAP_CMAC net__IPv4ParametersType
{
public:
	unsigned int LocalAddress;	/* required element of type net:IPv4AddressType */
	unsigned int SubnetMask;	/* required element of type net:IPv4AddressType */
	unsigned int DefaultGatewayAddress;	/* required element of type net:IPv4AddressType */
	unsigned int PrimaryDnsAddress;	/* required element of type net:IPv4AddressType */
	unsigned int SecondaryDnsAddress;	/* required element of type net:IPv4AddressType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE_net__IPv4ParametersType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         net__IPv4ParametersType() : soap(NULL) { }
	virtual ~net__IPv4ParametersType() { }
};
#endif

#ifndef SOAP_TYPE_net__InterfaceDescriptorSetType
#define SOAP_TYPE_net__InterfaceDescriptorSetType (225)
/* net:InterfaceDescriptorSetType */
class SOAP_CMAC net__InterfaceDescriptorSetType
{
public:
	enum net__InterfaceModeType InterfaceMode;	/* required element of type net:InterfaceModeType */
	unsigned char LinkPolicy;	/* required element of type net:LinkPolicyType */
	net__IPv4ParametersType *IPv4Parameters;	/* optional element of type net:IPv4ParametersType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE_net__InterfaceDescriptorSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         net__InterfaceDescriptorSetType() : IPv4Parameters(NULL), soap(NULL) { }
	virtual ~net__InterfaceDescriptorSetType() { }
};
#endif

#ifndef SOAP_TYPE_net__InterfaceDescriptorGetType
#define SOAP_TYPE_net__InterfaceDescriptorGetType (226)
/* net:InterfaceDescriptorGetType */
class SOAP_CMAC net__InterfaceDescriptorGetType
{
public:
	std::string HardwareAddressDescription;	/* required element of type xsd:string */
	std::string MACAddress;	/* required element of type net:MACAddressType */
	enum net__InterfaceModeType InterfaceMode;	/* required element of type net:InterfaceModeType */
	unsigned char LinkPolicy;	/* required element of type net:LinkPolicyType */
	bool DhcpEnabled;	/* required element of type xsd:boolean */
	net__IPv4ParametersType *IPv4Parameters;	/* optional element of type net:IPv4ParametersType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE_net__InterfaceDescriptorGetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         net__InterfaceDescriptorGetType() : IPv4Parameters(NULL), soap(NULL) { }
	virtual ~net__InterfaceDescriptorGetType() { }
};
#endif

#ifndef SOAP_TYPE__net__SetHostName
#define SOAP_TYPE__net__SetHostName (227)
/* net:SetHostName */
class SOAP_CMAC _net__SetHostName
{
public:
	std::string HostName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE__net__SetHostName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetHostName() : soap(NULL) { }
	virtual ~_net__SetHostName() { }
};
#endif

#ifndef SOAP_TYPE__net__SetHostNameResponse
#define SOAP_TYPE__net__SetHostNameResponse (228)
/* net:SetHostNameResponse */
class SOAP_CMAC _net__SetHostNameResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE__net__SetHostNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetHostNameResponse() : soap(NULL) { }
	virtual ~_net__SetHostNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__GetHostName
#define SOAP_TYPE__net__GetHostName (229)
/* net:GetHostName */
class SOAP_CMAC _net__GetHostName
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE__net__GetHostName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetHostName() : soap(NULL) { }
	virtual ~_net__GetHostName() { }
};
#endif

#ifndef SOAP_TYPE__net__GetHostNameResponse
#define SOAP_TYPE__net__GetHostNameResponse (230)
/* net:GetHostNameResponse */
class SOAP_CMAC _net__GetHostNameResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	std::string HostName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE__net__GetHostNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetHostNameResponse() : soap(NULL) { }
	virtual ~_net__GetHostNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__SetDomainName
#define SOAP_TYPE__net__SetDomainName (231)
/* net:SetDomainName */
class SOAP_CMAC _net__SetDomainName
{
public:
	std::string DomainName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE__net__SetDomainName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetDomainName() : soap(NULL) { }
	virtual ~_net__SetDomainName() { }
};
#endif

#ifndef SOAP_TYPE__net__SetDomainNameResponse
#define SOAP_TYPE__net__SetDomainNameResponse (232)
/* net:SetDomainNameResponse */
class SOAP_CMAC _net__SetDomainNameResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE__net__SetDomainNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetDomainNameResponse() : soap(NULL) { }
	virtual ~_net__SetDomainNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__GetDomainName
#define SOAP_TYPE__net__GetDomainName (233)
/* net:GetDomainName */
class SOAP_CMAC _net__GetDomainName
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE__net__GetDomainName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetDomainName() : soap(NULL) { }
	virtual ~_net__GetDomainName() { }
};
#endif

#ifndef SOAP_TYPE__net__GetDomainNameResponse
#define SOAP_TYPE__net__GetDomainNameResponse (234)
/* net:GetDomainNameResponse */
class SOAP_CMAC _net__GetDomainNameResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	std::string DomainName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE__net__GetDomainNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetDomainNameResponse() : soap(NULL) { }
	virtual ~_net__GetDomainNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__SetTcpIpParameters
#define SOAP_TYPE__net__SetTcpIpParameters (235)
/* net:SetTcpIpParameters */
class SOAP_CMAC _net__SetTcpIpParameters
{
public:
	enum net__DhcpModeType DhcpMode;	/* required element of type net:DhcpModeType */
	net__StaticIPv4ParametersType *StaticIPv4Parameters;	/* optional element of type net:StaticIPv4ParametersType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE__net__SetTcpIpParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetTcpIpParameters() : StaticIPv4Parameters(NULL), soap(NULL) { }
	virtual ~_net__SetTcpIpParameters() { }
};
#endif

#ifndef SOAP_TYPE__net__SetTcpIpParametersResponse
#define SOAP_TYPE__net__SetTcpIpParametersResponse (236)
/* net:SetTcpIpParametersResponse */
class SOAP_CMAC _net__SetTcpIpParametersResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE__net__SetTcpIpParametersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetTcpIpParametersResponse() : soap(NULL) { }
	virtual ~_net__SetTcpIpParametersResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__GetTcpIpParameters
#define SOAP_TYPE__net__GetTcpIpParameters (237)
/* net:GetTcpIpParameters */
class SOAP_CMAC _net__GetTcpIpParameters
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE__net__GetTcpIpParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetTcpIpParameters() : soap(NULL) { }
	virtual ~_net__GetTcpIpParameters() { }
};
#endif

#ifndef SOAP_TYPE__net__GetTcpIpParametersResponse
#define SOAP_TYPE__net__GetTcpIpParametersResponse (238)
/* net:GetTcpIpParametersResponse */
class SOAP_CMAC _net__GetTcpIpParametersResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	enum net__DhcpModeType DhcpMode;	/* required element of type net:DhcpModeType */
	net__StaticIPv4ParametersType *StaticIPv4Parameters;	/* required element of type net:StaticIPv4ParametersType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE__net__GetTcpIpParametersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetTcpIpParametersResponse() : StaticIPv4Parameters(NULL), soap(NULL) { }
	virtual ~_net__GetTcpIpParametersResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__SetVlanParameters
#define SOAP_TYPE__net__SetVlanParameters (239)
/* net:SetVlanParameters */
class SOAP_CMAC _net__SetVlanParameters
{
public:
	unsigned int *InterfaceHandle;	/* optional element of type cmn:InterfaceHandleType */
	bool VlanMode;	/* required element of type xsd:boolean */
	unsigned short VlanTag;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE__net__SetVlanParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetVlanParameters() : InterfaceHandle(NULL), soap(NULL) { }
	virtual ~_net__SetVlanParameters() { }
};
#endif

#ifndef SOAP_TYPE__net__SetVlanParametersResponse
#define SOAP_TYPE__net__SetVlanParametersResponse (240)
/* net:SetVlanParametersResponse */
class SOAP_CMAC _net__SetVlanParametersResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE__net__SetVlanParametersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetVlanParametersResponse() : soap(NULL) { }
	virtual ~_net__SetVlanParametersResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__GetVlanParameters
#define SOAP_TYPE__net__GetVlanParameters (241)
/* net:GetVlanParameters */
class SOAP_CMAC _net__GetVlanParameters
{
public:
	unsigned int *InterfaceHandle;	/* optional element of type cmn:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE__net__GetVlanParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetVlanParameters() : InterfaceHandle(NULL), soap(NULL) { }
	virtual ~_net__GetVlanParameters() { }
};
#endif

#ifndef SOAP_TYPE__net__GetVlanParametersResponse
#define SOAP_TYPE__net__GetVlanParametersResponse (242)
/* net:GetVlanParametersResponse */
class SOAP_CMAC _net__GetVlanParametersResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	bool VlanMode;	/* required element of type xsd:boolean */
	unsigned short VlanTag;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE__net__GetVlanParametersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetVlanParametersResponse() : soap(NULL) { }
	virtual ~_net__GetVlanParametersResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__SetPingResponse
#define SOAP_TYPE__net__SetPingResponse (243)
/* net:SetPingResponse */
class SOAP_CMAC _net__SetPingResponse
{
public:
	bool enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE__net__SetPingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetPingResponse() : soap(NULL) { }
	virtual ~_net__SetPingResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__SetPingResponseResponse
#define SOAP_TYPE__net__SetPingResponseResponse (244)
/* net:SetPingResponseResponse */
class SOAP_CMAC _net__SetPingResponseResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE__net__SetPingResponseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetPingResponseResponse() : soap(NULL) { }
	virtual ~_net__SetPingResponseResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__GetPingResponse
#define SOAP_TYPE__net__GetPingResponse (245)
/* net:GetPingResponse */
class SOAP_CMAC _net__GetPingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE__net__GetPingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetPingResponse() : soap(NULL) { }
	virtual ~_net__GetPingResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__GetPingResponseResponse
#define SOAP_TYPE__net__GetPingResponseResponse (246)
/* net:GetPingResponseResponse */
class SOAP_CMAC _net__GetPingResponseResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type net:PT_STATUS */
	bool enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE__net__GetPingResponseResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetPingResponseResponse() : soap(NULL) { }
	virtual ~_net__GetPingResponseResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__EnumerateInterfaces
#define SOAP_TYPE__net__EnumerateInterfaces (247)
/* net:EnumerateInterfaces */
class SOAP_CMAC _net__EnumerateInterfaces
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE__net__EnumerateInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__EnumerateInterfaces() : soap(NULL) { }
	virtual ~_net__EnumerateInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__net__EnumerateInterfacesResponse
#define SOAP_TYPE__net__EnumerateInterfacesResponse (248)
/* net:EnumerateInterfacesResponse */
class SOAP_CMAC _net__EnumerateInterfacesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::vector<unsigned int >InterfaceHandles;	/* optional element of type net:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE__net__EnumerateInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__EnumerateInterfacesResponse() : soap(NULL) { }
	virtual ~_net__EnumerateInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__GetInterfaceSettings
#define SOAP_TYPE__net__GetInterfaceSettings (249)
/* net:GetInterfaceSettings */
class SOAP_CMAC _net__GetInterfaceSettings
{
public:
	unsigned int InterfaceHandle;	/* required element of type net:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE__net__GetInterfaceSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetInterfaceSettings() : soap(NULL) { }
	virtual ~_net__GetInterfaceSettings() { }
};
#endif

#ifndef SOAP_TYPE__net__GetInterfaceSettingsResponse
#define SOAP_TYPE__net__GetInterfaceSettingsResponse (250)
/* net:GetInterfaceSettingsResponse */
class SOAP_CMAC _net__GetInterfaceSettingsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	net__InterfaceDescriptorGetType *InterfaceDescriptor;	/* required element of type net:InterfaceDescriptorGetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE__net__GetInterfaceSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__GetInterfaceSettingsResponse() : InterfaceDescriptor(NULL), soap(NULL) { }
	virtual ~_net__GetInterfaceSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__SetInterfaceSettings
#define SOAP_TYPE__net__SetInterfaceSettings (251)
/* net:SetInterfaceSettings */
class SOAP_CMAC _net__SetInterfaceSettings
{
public:
	unsigned int InterfaceHandle;	/* required element of type net:InterfaceHandleType */
	net__InterfaceDescriptorSetType *InterfaceDescriptor;	/* required element of type net:InterfaceDescriptorSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE__net__SetInterfaceSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetInterfaceSettings() : InterfaceDescriptor(NULL), soap(NULL) { }
	virtual ~_net__SetInterfaceSettings() { }
};
#endif

#ifndef SOAP_TYPE__net__SetInterfaceSettingsResponse
#define SOAP_TYPE__net__SetInterfaceSettingsResponse (252)
/* net:SetInterfaceSettingsResponse */
class SOAP_CMAC _net__SetInterfaceSettingsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE__net__SetInterfaceSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__SetInterfaceSettingsResponse() : soap(NULL) { }
	virtual ~_net__SetInterfaceSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__Get8021XWiredProfile
#define SOAP_TYPE__net__Get8021XWiredProfile (253)
/* net:Get8021XWiredProfile */
class SOAP_CMAC _net__Get8021XWiredProfile
{
public:
	unsigned int InterfaceHandle;	/* required element of type cmn:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE__net__Get8021XWiredProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Get8021XWiredProfile() : soap(NULL) { }
	virtual ~_net__Get8021XWiredProfile() { }
};
#endif

#ifndef SOAP_TYPE__net__Get8021XWiredProfileResponse
#define SOAP_TYPE__net__Get8021XWiredProfileResponse (254)
/* net:Get8021XWiredProfileResponse */
class SOAP_CMAC _net__Get8021XWiredProfileResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	xcfg__XProfileType *XProfile;	/* optional element of type xcfg:XProfileType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE__net__Get8021XWiredProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Get8021XWiredProfileResponse() : XProfile(NULL), soap(NULL) { }
	virtual ~_net__Get8021XWiredProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__Set8021XWiredProfile
#define SOAP_TYPE__net__Set8021XWiredProfile (255)
/* net:Set8021XWiredProfile */
class SOAP_CMAC _net__Set8021XWiredProfile
{
public:
	unsigned int InterfaceHandle;	/* required element of type cmn:InterfaceHandleType */
	xcfg__XProfileType *XProfile;	/* optional element of type xcfg:XProfileType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE__net__Set8021XWiredProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Set8021XWiredProfile() : XProfile(NULL), soap(NULL) { }
	virtual ~_net__Set8021XWiredProfile() { }
};
#endif

#ifndef SOAP_TYPE__net__Set8021XWiredProfileResponse
#define SOAP_TYPE__net__Set8021XWiredProfileResponse (256)
/* net:Set8021XWiredProfileResponse */
class SOAP_CMAC _net__Set8021XWiredProfileResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE__net__Set8021XWiredProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Set8021XWiredProfileResponse() : soap(NULL) { }
	virtual ~_net__Set8021XWiredProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__Set8021XActiveS0
#define SOAP_TYPE__net__Set8021XActiveS0 (257)
/* net:Set8021XActiveS0 */
class SOAP_CMAC _net__Set8021XActiveS0
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE__net__Set8021XActiveS0 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Set8021XActiveS0() : soap(NULL) { }
	virtual ~_net__Set8021XActiveS0() { }
};
#endif

#ifndef SOAP_TYPE__net__Set8021XActiveS0Response
#define SOAP_TYPE__net__Set8021XActiveS0Response (258)
/* net:Set8021XActiveS0Response */
class SOAP_CMAC _net__Set8021XActiveS0Response
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE__net__Set8021XActiveS0Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Set8021XActiveS0Response() : soap(NULL) { }
	virtual ~_net__Set8021XActiveS0Response() { }
};
#endif

#ifndef SOAP_TYPE__net__Get8021XActiveS0
#define SOAP_TYPE__net__Get8021XActiveS0 (259)
/* net:Get8021XActiveS0 */
class SOAP_CMAC _net__Get8021XActiveS0
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE__net__Get8021XActiveS0 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Get8021XActiveS0() : soap(NULL) { }
	virtual ~_net__Get8021XActiveS0() { }
};
#endif

#ifndef SOAP_TYPE__net__Get8021XActiveS0Response
#define SOAP_TYPE__net__Get8021XActiveS0Response (260)
/* net:Get8021XActiveS0Response */
class SOAP_CMAC _net__Get8021XActiveS0Response
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE__net__Get8021XActiveS0Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Get8021XActiveS0Response() : soap(NULL) { }
	virtual ~_net__Get8021XActiveS0Response() { }
};
#endif

#ifndef SOAP_TYPE__net__Set8021XPxeTimeout
#define SOAP_TYPE__net__Set8021XPxeTimeout (261)
/* net:Set8021XPxeTimeout */
class SOAP_CMAC _net__Set8021XPxeTimeout
{
public:
	unsigned int *Timeout;	/* optional element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE__net__Set8021XPxeTimeout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Set8021XPxeTimeout() : Timeout(NULL), soap(NULL) { }
	virtual ~_net__Set8021XPxeTimeout() { }
};
#endif

#ifndef SOAP_TYPE__net__Set8021XPxeTimeoutResponse
#define SOAP_TYPE__net__Set8021XPxeTimeoutResponse (262)
/* net:Set8021XPxeTimeoutResponse */
class SOAP_CMAC _net__Set8021XPxeTimeoutResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE__net__Set8021XPxeTimeoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Set8021XPxeTimeoutResponse() : soap(NULL) { }
	virtual ~_net__Set8021XPxeTimeoutResponse() { }
};
#endif

#ifndef SOAP_TYPE__net__Get8021XPxeTimeout
#define SOAP_TYPE__net__Get8021XPxeTimeout (263)
/* net:Get8021XPxeTimeout */
class SOAP_CMAC _net__Get8021XPxeTimeout
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE__net__Get8021XPxeTimeout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Get8021XPxeTimeout() : soap(NULL) { }
	virtual ~_net__Get8021XPxeTimeout() { }
};
#endif

#ifndef SOAP_TYPE__net__Get8021XPxeTimeoutResponse
#define SOAP_TYPE__net__Get8021XPxeTimeoutResponse (264)
/* net:Get8021XPxeTimeoutResponse */
class SOAP_CMAC _net__Get8021XPxeTimeoutResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	unsigned int Timeout;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE__net__Get8021XPxeTimeoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _net__Get8021XPxeTimeoutResponse() : soap(NULL) { }
	virtual ~_net__Get8021XPxeTimeoutResponse() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageEaclEntryType
#define SOAP_TYPE_stra__StorageEaclEntryType (265)
/* stra:StorageEaclEntryType */
class SOAP_CMAC stra__StorageEaclEntryType
{
public:
	std::string EnterpriseName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE_stra__StorageEaclEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageEaclEntryType() : soap(NULL) { }
	virtual ~stra__StorageEaclEntryType() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageEaclEntryHandleListType
#define SOAP_TYPE_stra__StorageEaclEntryHandleListType (266)
/* stra:StorageEaclEntryHandleListType */
class SOAP_CMAC stra__StorageEaclEntryHandleListType
{
public:
	std::vector<unsigned int >Handle;	/* sequence of 0 to 8 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE_stra__StorageEaclEntryHandleListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageEaclEntryHandleListType() : soap(NULL) { }
	virtual ~stra__StorageEaclEntryHandleListType() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageAllocEntryType
#define SOAP_TYPE_stra__StorageAllocEntryType (267)
/* stra:StorageAllocEntryType */
class SOAP_CMAC stra__StorageAllocEntryType
{
public:
	enum stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE AttrType;	/* required element of type stra:ISVS_APP_ATTR_TYPE */
	class stra__StorageAllocSnrpEntryType *StorageAllocSnrpEntry;	/* required element of type stra:StorageAllocSnrpEntryType */
	bool IsPartner;	/* required element of type xsd:boolean */
	unsigned int TotalAllocationSize;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_stra__StorageAllocEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageAllocEntryType() : StorageAllocSnrpEntry(NULL), soap(NULL) { }
	virtual ~stra__StorageAllocEntryType() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageAllocSnrpEntryType
#define SOAP_TYPE_stra__StorageAllocSnrpEntryType (268)
/* stra:StorageAllocSnrpEntryType */
class SOAP_CMAC stra__StorageAllocSnrpEntryType
{
public:
	std::string ApplicationName;	/* required element of type xsd:string */
	std::string VendorName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_stra__StorageAllocSnrpEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageAllocSnrpEntryType() : soap(NULL) { }
	virtual ~stra__StorageAllocSnrpEntryType() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageAllocEntryHandleListType
#define SOAP_TYPE_stra__StorageAllocEntryHandleListType (269)
/* stra:StorageAllocEntryHandleListType */
class SOAP_CMAC stra__StorageAllocEntryHandleListType
{
public:
	std::vector<unsigned int >Handle;	/* sequence of 0 to 32 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_stra__StorageAllocEntryHandleListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageAllocEntryHandleListType() : soap(NULL) { }
	virtual ~stra__StorageAllocEntryHandleListType() { }
};
#endif

#ifndef SOAP_TYPE_stra__GUID
#define SOAP_TYPE_stra__GUID (270)
/* stra:GUID */
class SOAP_CMAC stra__GUID
{
public:
	std::vector<unsigned char >Byte;	/* sequence of 16 to 16 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_stra__GUID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__GUID() : soap(NULL) { }
	virtual ~stra__GUID() { }
};
#endif

#ifndef SOAP_TYPE_stra__GlobalStorageAttributesType
#define SOAP_TYPE_stra__GlobalStorageAttributesType (271)
/* stra:GlobalStorageAttributesType */
class SOAP_CMAC stra__GlobalStorageAttributesType
{
public:
	unsigned int TotalStorage;	/* required element of type xsd:unsignedInt */
	unsigned int TotalAllocatedStorage;	/* required element of type xsd:unsignedInt */
	unsigned int MaxPartnerStorage;	/* required element of type xsd:unsignedInt */
	unsigned int TotalPartnerAllocatedStorage;	/* required element of type xsd:unsignedInt */
	unsigned int MaxNonPartnerStorage;	/* required element of type xsd:unsignedInt */
	unsigned short MaxFpaclEntries;	/* required element of type xsd:unsignedShort */
	unsigned short MaxAslEntries;	/* required element of type xsd:unsignedShort */
	unsigned short MaxEaclEntries;	/* required element of type xsd:unsignedShort */
	unsigned short MaxGroupsPerBlock;	/* required element of type xsd:unsignedShort */
	unsigned short MaxMembersPerGroup;	/* required element of type xsd:unsignedShort */
	unsigned short MaxNonPartnerTotalAllocationSize;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE_stra__GlobalStorageAttributesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__GlobalStorageAttributesType() : soap(NULL) { }
	virtual ~stra__GlobalStorageAttributesType() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageApplicationHandleListType
#define SOAP_TYPE_stra__StorageApplicationHandleListType (272)
/* stra:StorageApplicationHandleListType */
class SOAP_CMAC stra__StorageApplicationHandleListType
{
public:
	std::vector<unsigned int >Handle;	/* sequence of 0 to 32 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_stra__StorageApplicationHandleListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageApplicationHandleListType() : soap(NULL) { }
	virtual ~stra__StorageApplicationHandleListType() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageSnrpApplicationAttributeType
#define SOAP_TYPE_stra__StorageSnrpApplicationAttributeType (273)
/* stra:StorageSnrpApplicationAttributeType */
class SOAP_CMAC stra__StorageSnrpApplicationAttributeType
{
public:
	stra__GUID *UUID;	/* required element of type stra:GUID */
	std::string VendorName;	/* required element of type xsd:string */
	std::string ApplicationName;	/* required element of type xsd:string */
	std::string EnterpriseName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_stra__StorageSnrpApplicationAttributeType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageSnrpApplicationAttributeType() : UUID(NULL), soap(NULL) { }
	virtual ~stra__StorageSnrpApplicationAttributeType() { }
};
#endif

#ifndef SOAP_TYPE_stra__StorageApplicationAttributesType
#define SOAP_TYPE_stra__StorageApplicationAttributesType (274)
/* stra:StorageApplicationAttributesType */
class SOAP_CMAC stra__StorageApplicationAttributesType
{
public:
	enum stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE AttrType;	/* required element of type stra:ISVS_APP_ATTR_TYPE */
	stra__StorageSnrpApplicationAttributeType *ApplicationAttr;	/* required element of type stra:StorageSnrpApplicationAttributeType */
	unsigned int CurrentAllocationSize;	/* required element of type xsd:unsignedInt */
	bool ActiveSession;	/* required element of type xsd:boolean */
	bool Partner;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE_stra__StorageApplicationAttributesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         stra__StorageApplicationAttributesType() : ApplicationAttr(NULL), soap(NULL) { }
	virtual ~stra__StorageApplicationAttributesType() { }
};
#endif

#ifndef SOAP_TYPE__stra__GetGlobalStorageAttributes
#define SOAP_TYPE__stra__GetGlobalStorageAttributes (275)
/* stra:GetGlobalStorageAttributes */
class SOAP_CMAC _stra__GetGlobalStorageAttributes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE__stra__GetGlobalStorageAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__GetGlobalStorageAttributes() : soap(NULL) { }
	virtual ~_stra__GetGlobalStorageAttributes() { }
};
#endif

#ifndef SOAP_TYPE__stra__GetGlobalStorageAttributesResponse
#define SOAP_TYPE__stra__GetGlobalStorageAttributesResponse (276)
/* stra:GetGlobalStorageAttributesResponse */
class SOAP_CMAC _stra__GetGlobalStorageAttributesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	stra__GlobalStorageAttributesType *Attributes;	/* optional element of type stra:GlobalStorageAttributesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE__stra__GetGlobalStorageAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__GetGlobalStorageAttributesResponse() : Attributes(NULL), soap(NULL) { }
	virtual ~_stra__GetGlobalStorageAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__SetGlobalStorageAttributes
#define SOAP_TYPE__stra__SetGlobalStorageAttributes (277)
/* stra:SetGlobalStorageAttributes */
class SOAP_CMAC _stra__SetGlobalStorageAttributes
{
public:
	unsigned int *MaxPartnerStorage;	/* optional element of type xsd:unsignedInt */
	unsigned short *MaxNonPartnerTotalAllocationSize;	/* optional element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE__stra__SetGlobalStorageAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__SetGlobalStorageAttributes() : MaxPartnerStorage(NULL), MaxNonPartnerTotalAllocationSize(NULL), soap(NULL) { }
	virtual ~_stra__SetGlobalStorageAttributes() { }
};
#endif

#ifndef SOAP_TYPE__stra__SetGlobalStorageAttributesResponse
#define SOAP_TYPE__stra__SetGlobalStorageAttributesResponse (278)
/* stra:SetGlobalStorageAttributesResponse */
class SOAP_CMAC _stra__SetGlobalStorageAttributesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE__stra__SetGlobalStorageAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__SetGlobalStorageAttributesResponse() : soap(NULL) { }
	virtual ~_stra__SetGlobalStorageAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__AdminGetRegisteredApplications
#define SOAP_TYPE__stra__AdminGetRegisteredApplications (279)
/* stra:AdminGetRegisteredApplications */
class SOAP_CMAC _stra__AdminGetRegisteredApplications
{
public:
	unsigned int StartIndex;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE__stra__AdminGetRegisteredApplications */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AdminGetRegisteredApplications() : soap(NULL) { }
	virtual ~_stra__AdminGetRegisteredApplications() { }
};
#endif

#ifndef SOAP_TYPE__stra__AdminGetRegisteredApplicationsResponse
#define SOAP_TYPE__stra__AdminGetRegisteredApplicationsResponse (280)
/* stra:AdminGetRegisteredApplicationsResponse */
class SOAP_CMAC _stra__AdminGetRegisteredApplicationsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	unsigned int TotalCount;	/* required element of type xsd:unsignedInt */
	unsigned int HandlesCount;	/* required element of type xsd:unsignedInt */
	stra__StorageApplicationHandleListType *ApplicationHandles;	/* optional element of type stra:StorageApplicationHandleListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE__stra__AdminGetRegisteredApplicationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AdminGetRegisteredApplicationsResponse() : ApplicationHandles(NULL), soap(NULL) { }
	virtual ~_stra__AdminGetRegisteredApplicationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__AdminGetApplicationAttributes
#define SOAP_TYPE__stra__AdminGetApplicationAttributes (281)
/* stra:AdminGetApplicationAttributes */
class SOAP_CMAC _stra__AdminGetApplicationAttributes
{
public:
	unsigned int Handle;	/* required element of type stra:StorageApplicationHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE__stra__AdminGetApplicationAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AdminGetApplicationAttributes() : soap(NULL) { }
	virtual ~_stra__AdminGetApplicationAttributes() { }
};
#endif

#ifndef SOAP_TYPE__stra__AdminGetApplicationAttributesResponse
#define SOAP_TYPE__stra__AdminGetApplicationAttributesResponse (282)
/* stra:AdminGetApplicationAttributesResponse */
class SOAP_CMAC _stra__AdminGetApplicationAttributesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	stra__StorageApplicationAttributesType *Attributes;	/* optional element of type stra:StorageApplicationAttributesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE__stra__AdminGetApplicationAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AdminGetApplicationAttributesResponse() : Attributes(NULL), soap(NULL) { }
	virtual ~_stra__AdminGetApplicationAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__AdminRemoveApplication
#define SOAP_TYPE__stra__AdminRemoveApplication (283)
/* stra:AdminRemoveApplication */
class SOAP_CMAC _stra__AdminRemoveApplication
{
public:
	unsigned int Handle;	/* required element of type stra:StorageApplicationHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE__stra__AdminRemoveApplication */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AdminRemoveApplication() : soap(NULL) { }
	virtual ~_stra__AdminRemoveApplication() { }
};
#endif

#ifndef SOAP_TYPE__stra__AdminRemoveApplicationResponse
#define SOAP_TYPE__stra__AdminRemoveApplicationResponse (284)
/* stra:AdminRemoveApplicationResponse */
class SOAP_CMAC _stra__AdminRemoveApplicationResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE__stra__AdminRemoveApplicationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AdminRemoveApplicationResponse() : soap(NULL) { }
	virtual ~_stra__AdminRemoveApplicationResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__AddStorageEaclEntry
#define SOAP_TYPE__stra__AddStorageEaclEntry (285)
/* stra:AddStorageEaclEntry */
class SOAP_CMAC _stra__AddStorageEaclEntry
{
public:
	stra__StorageEaclEntryType *Entry;	/* required element of type stra:StorageEaclEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE__stra__AddStorageEaclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AddStorageEaclEntry() : Entry(NULL), soap(NULL) { }
	virtual ~_stra__AddStorageEaclEntry() { }
};
#endif

#ifndef SOAP_TYPE__stra__AddStorageEaclEntryResponse
#define SOAP_TYPE__stra__AddStorageEaclEntryResponse (286)
/* stra:AddStorageEaclEntryResponse */
class SOAP_CMAC _stra__AddStorageEaclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	unsigned int Handle;	/* required element of type stra:StorageEaclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE__stra__AddStorageEaclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AddStorageEaclEntryResponse() : soap(NULL) { }
	virtual ~_stra__AddStorageEaclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__EnumerateStorageEaclEntries
#define SOAP_TYPE__stra__EnumerateStorageEaclEntries (287)
/* stra:EnumerateStorageEaclEntries */
class SOAP_CMAC _stra__EnumerateStorageEaclEntries
{
public:
	unsigned short StartIndex;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE__stra__EnumerateStorageEaclEntries */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__EnumerateStorageEaclEntries() : soap(NULL) { }
	virtual ~_stra__EnumerateStorageEaclEntries() { }
};
#endif

#ifndef SOAP_TYPE__stra__EnumerateStorageEaclEntriesResponse
#define SOAP_TYPE__stra__EnumerateStorageEaclEntriesResponse (288)
/* stra:EnumerateStorageEaclEntriesResponse */
class SOAP_CMAC _stra__EnumerateStorageEaclEntriesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	unsigned short TotalCount;	/* required element of type xsd:unsignedShort */
	unsigned short HandlesCount;	/* required element of type xsd:unsignedShort */
	stra__StorageEaclEntryHandleListType *Handles;	/* required element of type stra:StorageEaclEntryHandleListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE__stra__EnumerateStorageEaclEntriesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__EnumerateStorageEaclEntriesResponse() : Handles(NULL), soap(NULL) { }
	virtual ~_stra__EnumerateStorageEaclEntriesResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__GetStorageEaclEntry
#define SOAP_TYPE__stra__GetStorageEaclEntry (289)
/* stra:GetStorageEaclEntry */
class SOAP_CMAC _stra__GetStorageEaclEntry
{
public:
	unsigned int Handle;	/* required element of type stra:StorageEaclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE__stra__GetStorageEaclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__GetStorageEaclEntry() : soap(NULL) { }
	virtual ~_stra__GetStorageEaclEntry() { }
};
#endif

#ifndef SOAP_TYPE__stra__GetStorageEaclEntryResponse
#define SOAP_TYPE__stra__GetStorageEaclEntryResponse (290)
/* stra:GetStorageEaclEntryResponse */
class SOAP_CMAC _stra__GetStorageEaclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	stra__StorageEaclEntryType *Entry;	/* required element of type stra:StorageEaclEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE__stra__GetStorageEaclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__GetStorageEaclEntryResponse() : Entry(NULL), soap(NULL) { }
	virtual ~_stra__GetStorageEaclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__RemoveStorageEaclEntry
#define SOAP_TYPE__stra__RemoveStorageEaclEntry (291)
/* stra:RemoveStorageEaclEntry */
class SOAP_CMAC _stra__RemoveStorageEaclEntry
{
public:
	unsigned int Handle;	/* required element of type stra:StorageEaclEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE__stra__RemoveStorageEaclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__RemoveStorageEaclEntry() : soap(NULL) { }
	virtual ~_stra__RemoveStorageEaclEntry() { }
};
#endif

#ifndef SOAP_TYPE__stra__RemoveStorageEaclEntryResponse
#define SOAP_TYPE__stra__RemoveStorageEaclEntryResponse (292)
/* stra:RemoveStorageEaclEntryResponse */
class SOAP_CMAC _stra__RemoveStorageEaclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE__stra__RemoveStorageEaclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__RemoveStorageEaclEntryResponse() : soap(NULL) { }
	virtual ~_stra__RemoveStorageEaclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__AddStorageFpaclEntry
#define SOAP_TYPE__stra__AddStorageFpaclEntry (293)
/* stra:AddStorageFpaclEntry */
class SOAP_CMAC _stra__AddStorageFpaclEntry
{
public:
	stra__StorageAllocEntryType *Entry;	/* required element of type stra:StorageAllocEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE__stra__AddStorageFpaclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AddStorageFpaclEntry() : Entry(NULL), soap(NULL) { }
	virtual ~_stra__AddStorageFpaclEntry() { }
};
#endif

#ifndef SOAP_TYPE__stra__AddStorageFpaclEntryResponse
#define SOAP_TYPE__stra__AddStorageFpaclEntryResponse (294)
/* stra:AddStorageFpaclEntryResponse */
class SOAP_CMAC _stra__AddStorageFpaclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	unsigned int Handle;	/* required element of type stra:StorageAllocEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE__stra__AddStorageFpaclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__AddStorageFpaclEntryResponse() : soap(NULL) { }
	virtual ~_stra__AddStorageFpaclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__EnumerateStorageAllocEntries
#define SOAP_TYPE__stra__EnumerateStorageAllocEntries (295)
/* stra:EnumerateStorageAllocEntries */
class SOAP_CMAC _stra__EnumerateStorageAllocEntries
{
public:
	unsigned short StartIndex;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE__stra__EnumerateStorageAllocEntries */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__EnumerateStorageAllocEntries() : soap(NULL) { }
	virtual ~_stra__EnumerateStorageAllocEntries() { }
};
#endif

#ifndef SOAP_TYPE__stra__EnumerateStorageAllocEntriesResponse
#define SOAP_TYPE__stra__EnumerateStorageAllocEntriesResponse (296)
/* stra:EnumerateStorageAllocEntriesResponse */
class SOAP_CMAC _stra__EnumerateStorageAllocEntriesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	unsigned short TotalCount;	/* required element of type xsd:unsignedShort */
	unsigned short HandlesCount;	/* required element of type xsd:unsignedShort */
	stra__StorageAllocEntryHandleListType *Handles;	/* required element of type stra:StorageAllocEntryHandleListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE__stra__EnumerateStorageAllocEntriesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__EnumerateStorageAllocEntriesResponse() : Handles(NULL), soap(NULL) { }
	virtual ~_stra__EnumerateStorageAllocEntriesResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__GetStorageAllocEntry
#define SOAP_TYPE__stra__GetStorageAllocEntry (297)
/* stra:GetStorageAllocEntry */
class SOAP_CMAC _stra__GetStorageAllocEntry
{
public:
	unsigned int Handle;	/* required element of type stra:StorageAllocEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE__stra__GetStorageAllocEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__GetStorageAllocEntry() : soap(NULL) { }
	virtual ~_stra__GetStorageAllocEntry() { }
};
#endif

#ifndef SOAP_TYPE__stra__GetStorageAllocEntryResponse
#define SOAP_TYPE__stra__GetStorageAllocEntryResponse (298)
/* stra:GetStorageAllocEntryResponse */
class SOAP_CMAC _stra__GetStorageAllocEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	stra__StorageAllocEntryType *Entry;	/* required element of type stra:StorageAllocEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE__stra__GetStorageAllocEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__GetStorageAllocEntryResponse() : Entry(NULL), soap(NULL) { }
	virtual ~_stra__GetStorageAllocEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__UpdateStorageFpaclEntry
#define SOAP_TYPE__stra__UpdateStorageFpaclEntry (299)
/* stra:UpdateStorageFpaclEntry */
class SOAP_CMAC _stra__UpdateStorageFpaclEntry
{
public:
	unsigned int Handle;	/* required element of type stra:StorageAllocEntryHandleType */
	unsigned int NewAllocationSize;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE__stra__UpdateStorageFpaclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__UpdateStorageFpaclEntry() : soap(NULL) { }
	virtual ~_stra__UpdateStorageFpaclEntry() { }
};
#endif

#ifndef SOAP_TYPE__stra__UpdateStorageFpaclEntryResponse
#define SOAP_TYPE__stra__UpdateStorageFpaclEntryResponse (300)
/* stra:UpdateStorageFpaclEntryResponse */
class SOAP_CMAC _stra__UpdateStorageFpaclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE__stra__UpdateStorageFpaclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__UpdateStorageFpaclEntryResponse() : soap(NULL) { }
	virtual ~_stra__UpdateStorageFpaclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE__stra__RemoveStorageFpaclEntry
#define SOAP_TYPE__stra__RemoveStorageFpaclEntry (301)
/* stra:RemoveStorageFpaclEntry */
class SOAP_CMAC _stra__RemoveStorageFpaclEntry
{
public:
	unsigned int Handle;	/* required element of type stra:StorageAllocEntryHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE__stra__RemoveStorageFpaclEntry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__RemoveStorageFpaclEntry() : soap(NULL) { }
	virtual ~_stra__RemoveStorageFpaclEntry() { }
};
#endif

#ifndef SOAP_TYPE__stra__RemoveStorageFpaclEntryResponse
#define SOAP_TYPE__stra__RemoveStorageFpaclEntryResponse (302)
/* stra:RemoveStorageFpaclEntryResponse */
class SOAP_CMAC _stra__RemoveStorageFpaclEntryResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type stra:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE__stra__RemoveStorageFpaclEntryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _stra__RemoveStorageFpaclEntryResponse() : soap(NULL) { }
	virtual ~_stra__RemoveStorageFpaclEntryResponse() { }
};
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionPolicyIDArrayType
#define SOAP_TYPE_emi__AlertSubscriptionPolicyIDArrayType (303)
/* emi:AlertSubscriptionPolicyIDArrayType */
class SOAP_CMAC emi__AlertSubscriptionPolicyIDArrayType
{
public:
	std::vector<unsigned char >AlertSubscriptionPolicyID;	/* optional element of type emi:AlertSubscriptionPolicyIDType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_emi__AlertSubscriptionPolicyIDArrayType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__AlertSubscriptionPolicyIDArrayType() : soap(NULL) { }
	virtual ~emi__AlertSubscriptionPolicyIDArrayType() { }
};
#endif

#ifndef SOAP_TYPE_emi__ByteData
#define SOAP_TYPE_emi__ByteData (304)
/* emi:ByteData */
class SOAP_CMAC emi__ByteData
{
public:
	std::vector<unsigned char >Byte;	/* sequence of 8 to 8 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE_emi__ByteData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__ByteData() : soap(NULL) { }
	virtual ~emi__ByteData() { }
};
#endif

#ifndef SOAP_TYPE_emi__EventLogRecordType
#define SOAP_TYPE_emi__EventLogRecordType (305)
/* emi:EventLogRecordType */
class SOAP_CMAC emi__EventLogRecordType
{
public:
	unsigned int TimeStamp;	/* required element of type emi:TimeType */
	unsigned char DeviceAddress;	/* required element of type xsd:unsignedByte */
	unsigned char EventSensorType;	/* required element of type xsd:unsignedByte */
	unsigned char EventType;	/* required element of type xsd:unsignedByte */
	unsigned char EventOffset;	/* required element of type xsd:unsignedByte */
	unsigned char EventSourceType;	/* required element of type xsd:unsignedByte */
	enum emi__EventSeverityType EventSeverity;	/* required element of type emi:EventSeverityType */
	unsigned char SensorNumber;	/* required element of type xsd:unsignedByte */
	unsigned char Entity;	/* required element of type xsd:unsignedByte */
	unsigned char EntityInstance;	/* required element of type xsd:unsignedByte */
	emi__ByteData *EventData;	/* required element of type emi:ByteData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_emi__EventLogRecordType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__EventLogRecordType() : EventData(NULL), soap(NULL) { }
	virtual ~emi__EventLogRecordType() { }
};
#endif

#ifndef SOAP_TYPE_emi__EventFilterType
#define SOAP_TYPE_emi__EventFilterType (306)
/* emi:EventFilterType */
class SOAP_CMAC emi__EventFilterType
{
public:
	unsigned char FilterConfiguration;	/* required element of type xsd:unsignedByte */
	unsigned char FilterAction;	/* required element of type xsd:unsignedByte */
	unsigned char AlertSubscriptionPolicyID;	/* required element of type emi:AlertSubscriptionPolicyIDType */
	unsigned char DeviceAddress;	/* required element of type xsd:unsignedByte */
	unsigned char EventSensorType;	/* required element of type xsd:unsignedByte */
	unsigned char EventType;	/* required element of type xsd:unsignedByte */
	unsigned char EventOffset;	/* required element of type xsd:unsignedByte */
	unsigned char EventSourceType;	/* required element of type xsd:unsignedByte */
	enum emi__EventSeverityType EventSeverity;	/* required element of type emi:EventSeverityType */
	unsigned char SensorNumber;	/* required element of type xsd:unsignedByte */
	unsigned char Entity;	/* required element of type xsd:unsignedByte */
	unsigned char EntityInstance;	/* required element of type xsd:unsignedByte */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_emi__EventFilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__EventFilterType() : soap(NULL) { }
	virtual ~emi__EventFilterType() { }
};
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionType
#define SOAP_TYPE_emi__AlertSubscriptionType (307)
/* emi:AlertSubscriptionType */
class SOAP_CMAC emi__AlertSubscriptionType
{
public:
	unsigned char AlertSubscriptionPolicyID;	/* required element of type emi:AlertSubscriptionPolicyIDType */
	unsigned int DestinationAddress;	/* required element of type emi:IPv4AddressType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_emi__AlertSubscriptionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__AlertSubscriptionType() : soap(NULL) { }
	virtual ~emi__AlertSubscriptionType() { }
};
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionHandleArrayType
#define SOAP_TYPE_emi__AlertSubscriptionHandleArrayType (308)
/* emi:AlertSubscriptionHandleArrayType */
class SOAP_CMAC emi__AlertSubscriptionHandleArrayType
{
public:
	std::vector<unsigned int >AlertSubscriptionHandle;	/* optional element of type emi:AlertSubscriptionHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_emi__AlertSubscriptionHandleArrayType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__AlertSubscriptionHandleArrayType() : soap(NULL) { }
	virtual ~emi__AlertSubscriptionHandleArrayType() { }
};
#endif

#ifndef SOAP_TYPE_emi__EventFilterHandleArrayType
#define SOAP_TYPE_emi__EventFilterHandleArrayType (309)
/* emi:EventFilterHandleArrayType */
class SOAP_CMAC emi__EventFilterHandleArrayType
{
public:
	std::vector<unsigned int >EventFilterHandle;	/* optional element of type emi:EventFilterHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE_emi__EventFilterHandleArrayType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__EventFilterHandleArrayType() : soap(NULL) { }
	virtual ~emi__EventFilterHandleArrayType() { }
};
#endif

#ifndef SOAP_TYPE_emi__EventLogRecordArrayType
#define SOAP_TYPE_emi__EventLogRecordArrayType (310)
/* emi:EventLogRecordArrayType */
class SOAP_CMAC emi__EventLogRecordArrayType
{
public:
	std::vector<emi__EventLogRecordType * >EventLogRecord;	/* optional element of type emi:EventLogRecordType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE_emi__EventLogRecordArrayType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__EventLogRecordArrayType() : soap(NULL) { }
	virtual ~emi__EventLogRecordArrayType() { }
};
#endif

#ifndef SOAP_TYPE_emi__SensorHandleArrayType
#define SOAP_TYPE_emi__SensorHandleArrayType (311)
/* emi:SensorHandleArrayType */
class SOAP_CMAC emi__SensorHandleArrayType
{
public:
	std::vector<unsigned int >SensorHandle;	/* optional element of type emi:SensorHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_emi__SensorHandleArrayType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__SensorHandleArrayType() : soap(NULL) { }
	virtual ~emi__SensorHandleArrayType() { }
};
#endif

#ifndef SOAP_TYPE_emi__SensorAttributesType
#define SOAP_TYPE_emi__SensorAttributesType (312)
/* emi:SensorAttributesType */
class SOAP_CMAC emi__SensorAttributesType
{
public:
	bool IsLegacySensor;	/* required element of type xsd:boolean */
	bool AssertionEvent;	/* required element of type xsd:boolean */
	bool DeassertionEvent;	/* required element of type xsd:boolean */
	unsigned char Index;	/* required element of type xsd:unsignedByte */
	unsigned char DeviceAddress;	/* required element of type xsd:unsignedByte */
	unsigned char EventSensorType;	/* required element of type xsd:unsignedByte */
	unsigned char EventType;	/* required element of type xsd:unsignedByte */
	unsigned char EventOffset;	/* required element of type xsd:unsignedByte */
	unsigned char EventSourceType;	/* required element of type xsd:unsignedByte */
	enum emi__EventSeverityType EventSeverity;	/* required element of type emi:EventSeverityType */
	unsigned char SensorNumber;	/* required element of type xsd:unsignedByte */
	unsigned char Entity;	/* required element of type xsd:unsignedByte */
	unsigned char EntityInstance;	/* required element of type xsd:unsignedByte */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_emi__SensorAttributesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__SensorAttributesType() : soap(NULL) { }
	virtual ~emi__SensorAttributesType() { }
};
#endif

#ifndef SOAP_TYPE_emi__ByteStr
#define SOAP_TYPE_emi__ByteStr (313)
/* emi:ByteStr */
class SOAP_CMAC emi__ByteStr
{
public:
	std::vector<unsigned char >Byte;	/* sequence of 1 to 16 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_emi__ByteStr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__ByteStr() : soap(NULL) { }
	virtual ~emi__ByteStr() { }
};
#endif

#ifndef SOAP_TYPE_emi__AlertCredentialsType
#define SOAP_TYPE_emi__AlertCredentialsType (314)
/* emi:AlertCredentialsType */
class SOAP_CMAC emi__AlertCredentialsType
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string Password;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE_emi__AlertCredentialsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__AlertCredentialsType() : soap(NULL) { }
	virtual ~emi__AlertCredentialsType() { }
};
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionSNMPType
#define SOAP_TYPE_emi__AlertSubscriptionSNMPType (315)
/* emi:AlertSubscriptionSNMPType */
class SOAP_CMAC emi__AlertSubscriptionSNMPType
{
public:
	cmn__NodeAddressType *Address;	/* required element of type cmn:NodeAddressType */
	std::string *CommunityString;	/* optional element of type emi:CommunityStringType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE_emi__AlertSubscriptionSNMPType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__AlertSubscriptionSNMPType() : Address(NULL), CommunityString(NULL), soap(NULL) { }
	virtual ~emi__AlertSubscriptionSNMPType() { }
};
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionSoapType
#define SOAP_TYPE_emi__AlertSubscriptionSoapType (316)
/* emi:AlertSubscriptionSoapType */
class SOAP_CMAC emi__AlertSubscriptionSoapType
{
public:
	class cmn__URLType *Address;	/* required element of type cmn:URLType */
	unsigned int *ClientCredentials;	/* optional element of type sai:CertificateHandleType */
	emi__AlertCredentialsType *UserCredentials;	/* optional element of type emi:AlertCredentialsType */
	std::vector<enum emi__AlertAuthOptionsType >AlertAuthOptions;	/* sequence of 0 to 3 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_emi__AlertSubscriptionSoapType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__AlertSubscriptionSoapType() : Address(NULL), ClientCredentials(NULL), UserCredentials(NULL), soap(NULL) { }
	virtual ~emi__AlertSubscriptionSoapType() { }
};
#endif

#ifndef SOAP_TYPE__emi__union_AlertSubscriptionGeneralType
#define SOAP_TYPE__emi__union_AlertSubscriptionGeneralType (761)
/* xsd:choice */
union _emi__union_AlertSubscriptionGeneralType
{
#define SOAP_UNION__emi__union_AlertSubscriptionGeneralType_AlertSubscriptionSNMP	(1)
	emi__AlertSubscriptionSNMPType *AlertSubscriptionSNMP;
#define SOAP_UNION__emi__union_AlertSubscriptionGeneralType_AlertSubscriptionSoap	(2)
	emi__AlertSubscriptionSoapType *AlertSubscriptionSoap;
};
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionGeneralType
#define SOAP_TYPE_emi__AlertSubscriptionGeneralType (317)
/* emi:AlertSubscriptionGeneralType */
class SOAP_CMAC emi__AlertSubscriptionGeneralType
{
public:
	unsigned char PolicyID;	/* required element of type emi:AlertSubscriptionPolicyIDType */
	int __union_AlertSubscriptionGeneralType;	/* union discriminant (of union defined below) */
	union _emi__union_AlertSubscriptionGeneralType union_AlertSubscriptionGeneralType;	/* required element of type xsd:choice */
	char *__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_emi__AlertSubscriptionGeneralType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         emi__AlertSubscriptionGeneralType() : __any(NULL), soap(NULL) { }
	virtual ~emi__AlertSubscriptionGeneralType() { }
};
#endif

#ifndef SOAP_TYPE__emi__SubscribeForAlert
#define SOAP_TYPE__emi__SubscribeForAlert (318)
/* emi:SubscribeForAlert */
class SOAP_CMAC _emi__SubscribeForAlert
{
public:
	emi__AlertSubscriptionType *SubscriptionInfo;	/* required element of type emi:AlertSubscriptionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE__emi__SubscribeForAlert */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SubscribeForAlert() : SubscriptionInfo(NULL), soap(NULL) { }
	virtual ~_emi__SubscribeForAlert() { }
};
#endif

#ifndef SOAP_TYPE__emi__SubscribeForAlertResponse
#define SOAP_TYPE__emi__SubscribeForAlertResponse (319)
/* emi:SubscribeForAlertResponse */
class SOAP_CMAC _emi__SubscribeForAlertResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int SubscriptionHandle;	/* required element of type emi:AlertSubscriptionHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE__emi__SubscribeForAlertResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SubscribeForAlertResponse() : soap(NULL) { }
	virtual ~_emi__SubscribeForAlertResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateAlertSubscriptions
#define SOAP_TYPE__emi__EnumerateAlertSubscriptions (320)
/* emi:EnumerateAlertSubscriptions */
class SOAP_CMAC _emi__EnumerateAlertSubscriptions
{
public:
	unsigned int StartIndex;	/* required element of type xsd:unsignedInt */
	unsigned char *AlertSubscriptionPolicyID;	/* optional element of type emi:AlertSubscriptionPolicyIDType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE__emi__EnumerateAlertSubscriptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateAlertSubscriptions() : AlertSubscriptionPolicyID(NULL), soap(NULL) { }
	virtual ~_emi__EnumerateAlertSubscriptions() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateAlertSubscriptionsResponse
#define SOAP_TYPE__emi__EnumerateAlertSubscriptionsResponse (321)
/* emi:EnumerateAlertSubscriptionsResponse */
class SOAP_CMAC _emi__EnumerateAlertSubscriptionsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int TotalSubscriptionCount;	/* required element of type xsd:unsignedInt */
	unsigned int SubscriptionsReturned;	/* required element of type xsd:unsignedInt */
	emi__AlertSubscriptionHandleArrayType *SubscriptionHandles;	/* required element of type emi:AlertSubscriptionHandleArrayType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE__emi__EnumerateAlertSubscriptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateAlertSubscriptionsResponse() : SubscriptionHandles(NULL), soap(NULL) { }
	virtual ~_emi__EnumerateAlertSubscriptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetAlertSubscription
#define SOAP_TYPE__emi__GetAlertSubscription (322)
/* emi:GetAlertSubscription */
class SOAP_CMAC _emi__GetAlertSubscription
{
public:
	unsigned int SubscriptionID;	/* required element of type emi:AlertSubscriptionHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE__emi__GetAlertSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetAlertSubscription() : soap(NULL) { }
	virtual ~_emi__GetAlertSubscription() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetAlertSubscriptionResponse
#define SOAP_TYPE__emi__GetAlertSubscriptionResponse (323)
/* emi:GetAlertSubscriptionResponse */
class SOAP_CMAC _emi__GetAlertSubscriptionResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	emi__AlertSubscriptionType *SubscriptionInfo;	/* required element of type emi:AlertSubscriptionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE__emi__GetAlertSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetAlertSubscriptionResponse() : SubscriptionInfo(NULL), soap(NULL) { }
	virtual ~_emi__GetAlertSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateAlertPolicies
#define SOAP_TYPE__emi__EnumerateAlertPolicies (324)
/* emi:EnumerateAlertPolicies */
class SOAP_CMAC _emi__EnumerateAlertPolicies
{
public:
	unsigned int StartIndex;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE__emi__EnumerateAlertPolicies */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateAlertPolicies() : soap(NULL) { }
	virtual ~_emi__EnumerateAlertPolicies() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateAlertPoliciesResponse
#define SOAP_TYPE__emi__EnumerateAlertPoliciesResponse (325)
/* emi:EnumerateAlertPoliciesResponse */
class SOAP_CMAC _emi__EnumerateAlertPoliciesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int TotalPolicyCount;	/* required element of type xsd:unsignedInt */
	unsigned int PoliciesReturned;	/* required element of type xsd:unsignedInt */
	emi__AlertSubscriptionPolicyIDArrayType *PolicyHandles;	/* required element of type emi:AlertSubscriptionPolicyIDArrayType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE__emi__EnumerateAlertPoliciesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateAlertPoliciesResponse() : PolicyHandles(NULL), soap(NULL) { }
	virtual ~_emi__EnumerateAlertPoliciesResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__SetAlertCommunityString
#define SOAP_TYPE__emi__SetAlertCommunityString (326)
/* emi:SetAlertCommunityString */
class SOAP_CMAC _emi__SetAlertCommunityString
{
public:
	unsigned char Length;	/* required element of type xsd:unsignedByte */
	emi__ByteStr *CommunityString;	/* required element of type emi:ByteStr */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE__emi__SetAlertCommunityString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SetAlertCommunityString() : CommunityString(NULL), soap(NULL) { }
	virtual ~_emi__SetAlertCommunityString() { }
};
#endif

#ifndef SOAP_TYPE__emi__SetAlertCommunityStringResponse
#define SOAP_TYPE__emi__SetAlertCommunityStringResponse (327)
/* emi:SetAlertCommunityStringResponse */
class SOAP_CMAC _emi__SetAlertCommunityStringResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE__emi__SetAlertCommunityStringResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SetAlertCommunityStringResponse() : soap(NULL) { }
	virtual ~_emi__SetAlertCommunityStringResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetAlertCommunityString
#define SOAP_TYPE__emi__GetAlertCommunityString (328)
/* emi:GetAlertCommunityString */
class SOAP_CMAC _emi__GetAlertCommunityString
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE__emi__GetAlertCommunityString */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetAlertCommunityString() : soap(NULL) { }
	virtual ~_emi__GetAlertCommunityString() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetAlertCommunityStringResponse
#define SOAP_TYPE__emi__GetAlertCommunityStringResponse (329)
/* emi:GetAlertCommunityStringResponse */
class SOAP_CMAC _emi__GetAlertCommunityStringResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned char Length;	/* required element of type xsd:unsignedByte */
	emi__ByteStr *CommunityString;	/* required element of type emi:ByteStr */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE__emi__GetAlertCommunityStringResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetAlertCommunityStringResponse() : CommunityString(NULL), soap(NULL) { }
	virtual ~_emi__GetAlertCommunityStringResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__AddEventFilter
#define SOAP_TYPE__emi__AddEventFilter (330)
/* emi:AddEventFilter */
class SOAP_CMAC _emi__AddEventFilter
{
public:
	emi__EventFilterType *EventFilter;	/* required element of type emi:EventFilterType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE__emi__AddEventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__AddEventFilter() : EventFilter(NULL), soap(NULL) { }
	virtual ~_emi__AddEventFilter() { }
};
#endif

#ifndef SOAP_TYPE__emi__AddEventFilterResponse
#define SOAP_TYPE__emi__AddEventFilterResponse (331)
/* emi:AddEventFilterResponse */
class SOAP_CMAC _emi__AddEventFilterResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int EventFilterHandle;	/* required element of type emi:EventFilterHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE__emi__AddEventFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__AddEventFilterResponse() : soap(NULL) { }
	virtual ~_emi__AddEventFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateEventFilters
#define SOAP_TYPE__emi__EnumerateEventFilters (332)
/* emi:EnumerateEventFilters */
class SOAP_CMAC _emi__EnumerateEventFilters
{
public:
	unsigned int StartIndex;	/* required element of type xsd:unsignedInt */
	unsigned char *AlertSubscriptionPolicyID;	/* optional element of type emi:AlertSubscriptionPolicyIDType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE__emi__EnumerateEventFilters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateEventFilters() : AlertSubscriptionPolicyID(NULL), soap(NULL) { }
	virtual ~_emi__EnumerateEventFilters() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateEventFiltersResponse
#define SOAP_TYPE__emi__EnumerateEventFiltersResponse (333)
/* emi:EnumerateEventFiltersResponse */
class SOAP_CMAC _emi__EnumerateEventFiltersResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int TotalEventFilterCount;	/* required element of type xsd:unsignedInt */
	unsigned int FiltersReturned;	/* required element of type xsd:unsignedInt */
	emi__EventFilterHandleArrayType *Filters;	/* required element of type emi:EventFilterHandleArrayType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE__emi__EnumerateEventFiltersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateEventFiltersResponse() : Filters(NULL), soap(NULL) { }
	virtual ~_emi__EnumerateEventFiltersResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetEventFilter
#define SOAP_TYPE__emi__GetEventFilter (334)
/* emi:GetEventFilter */
class SOAP_CMAC _emi__GetEventFilter
{
public:
	unsigned int EventFilterHandle;	/* required element of type emi:EventFilterHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE__emi__GetEventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetEventFilter() : soap(NULL) { }
	virtual ~_emi__GetEventFilter() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetEventFilterResponse
#define SOAP_TYPE__emi__GetEventFilterResponse (335)
/* emi:GetEventFilterResponse */
class SOAP_CMAC _emi__GetEventFilterResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	emi__EventFilterType *EventFilter;	/* required element of type emi:EventFilterType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE__emi__GetEventFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetEventFilterResponse() : EventFilter(NULL), soap(NULL) { }
	virtual ~_emi__GetEventFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__UpdateEventFilter
#define SOAP_TYPE__emi__UpdateEventFilter (336)
/* emi:UpdateEventFilter */
class SOAP_CMAC _emi__UpdateEventFilter
{
public:
	unsigned int EventFilterHandle;	/* required element of type emi:EventFilterHandleType */
	emi__EventFilterType *EventFilter;	/* required element of type emi:EventFilterType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE__emi__UpdateEventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__UpdateEventFilter() : EventFilter(NULL), soap(NULL) { }
	virtual ~_emi__UpdateEventFilter() { }
};
#endif

#ifndef SOAP_TYPE__emi__UpdateEventFilterResponse
#define SOAP_TYPE__emi__UpdateEventFilterResponse (337)
/* emi:UpdateEventFilterResponse */
class SOAP_CMAC _emi__UpdateEventFilterResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE__emi__UpdateEventFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__UpdateEventFilterResponse() : soap(NULL) { }
	virtual ~_emi__UpdateEventFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__RemoveEventFilter
#define SOAP_TYPE__emi__RemoveEventFilter (338)
/* emi:RemoveEventFilter */
class SOAP_CMAC _emi__RemoveEventFilter
{
public:
	unsigned int EventFilterHandle;	/* required element of type emi:EventFilterHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE__emi__RemoveEventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__RemoveEventFilter() : soap(NULL) { }
	virtual ~_emi__RemoveEventFilter() { }
};
#endif

#ifndef SOAP_TYPE__emi__RemoveEventFilterResponse
#define SOAP_TYPE__emi__RemoveEventFilterResponse (339)
/* emi:RemoveEventFilterResponse */
class SOAP_CMAC _emi__RemoveEventFilterResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE__emi__RemoveEventFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__RemoveEventFilterResponse() : soap(NULL) { }
	virtual ~_emi__RemoveEventFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__ReadEventLogRecords
#define SOAP_TYPE__emi__ReadEventLogRecords (340)
/* emi:ReadEventLogRecords */
class SOAP_CMAC _emi__ReadEventLogRecords
{
public:
	unsigned int StartIndex;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE__emi__ReadEventLogRecords */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__ReadEventLogRecords() : soap(NULL) { }
	virtual ~_emi__ReadEventLogRecords() { }
};
#endif

#ifndef SOAP_TYPE__emi__ReadEventLogRecordsResponse
#define SOAP_TYPE__emi__ReadEventLogRecordsResponse (341)
/* emi:ReadEventLogRecordsResponse */
class SOAP_CMAC _emi__ReadEventLogRecordsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int TotalRecordCount;	/* required element of type xsd:unsignedInt */
	unsigned int RecordsReturned;	/* required element of type xsd:unsignedInt */
	emi__EventLogRecordArrayType *EventRecords;	/* required element of type emi:EventLogRecordArrayType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE__emi__ReadEventLogRecordsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__ReadEventLogRecordsResponse() : EventRecords(NULL), soap(NULL) { }
	virtual ~_emi__ReadEventLogRecordsResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetEventLogStatus
#define SOAP_TYPE__emi__GetEventLogStatus (342)
/* emi:GetEventLogStatus */
class SOAP_CMAC _emi__GetEventLogStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE__emi__GetEventLogStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetEventLogStatus() : soap(NULL) { }
	virtual ~_emi__GetEventLogStatus() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetEventLogStatusResponse
#define SOAP_TYPE__emi__GetEventLogStatusResponse (343)
/* emi:GetEventLogStatusResponse */
class SOAP_CMAC _emi__GetEventLogStatusResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int NumberOfFreeRecords;	/* required element of type xsd:unsignedInt */
	unsigned int NumberOfRecords;	/* required element of type xsd:unsignedInt */
	unsigned int Time;	/* required element of type emi:TimeType */
	bool IsFrozen;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE__emi__GetEventLogStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetEventLogStatusResponse() : soap(NULL) { }
	virtual ~_emi__GetEventLogStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__ClearEventLog
#define SOAP_TYPE__emi__ClearEventLog (344)
/* emi:ClearEventLog */
class SOAP_CMAC _emi__ClearEventLog
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE__emi__ClearEventLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__ClearEventLog() : soap(NULL) { }
	virtual ~_emi__ClearEventLog() { }
};
#endif

#ifndef SOAP_TYPE__emi__ClearEventLogResponse
#define SOAP_TYPE__emi__ClearEventLogResponse (345)
/* emi:ClearEventLogResponse */
class SOAP_CMAC _emi__ClearEventLogResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE__emi__ClearEventLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__ClearEventLogResponse() : soap(NULL) { }
	virtual ~_emi__ClearEventLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__FreezeEventLog
#define SOAP_TYPE__emi__FreezeEventLog (346)
/* emi:FreezeEventLog */
class SOAP_CMAC _emi__FreezeEventLog
{
public:
	bool NewState;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE__emi__FreezeEventLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__FreezeEventLog() : soap(NULL) { }
	virtual ~_emi__FreezeEventLog() { }
};
#endif

#ifndef SOAP_TYPE__emi__FreezeEventLogResponse
#define SOAP_TYPE__emi__FreezeEventLogResponse (347)
/* emi:FreezeEventLogResponse */
class SOAP_CMAC _emi__FreezeEventLogResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE__emi__FreezeEventLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__FreezeEventLogResponse() : soap(NULL) { }
	virtual ~_emi__FreezeEventLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__SetEventLogTimestampClock
#define SOAP_TYPE__emi__SetEventLogTimestampClock (348)
/* emi:SetEventLogTimestampClock */
class SOAP_CMAC _emi__SetEventLogTimestampClock
{
public:
	unsigned int Time;	/* required element of type emi:TimeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE__emi__SetEventLogTimestampClock */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SetEventLogTimestampClock() : soap(NULL) { }
	virtual ~_emi__SetEventLogTimestampClock() { }
};
#endif

#ifndef SOAP_TYPE__emi__SetEventLogTimestampClockResponse
#define SOAP_TYPE__emi__SetEventLogTimestampClockResponse (349)
/* emi:SetEventLogTimestampClockResponse */
class SOAP_CMAC _emi__SetEventLogTimestampClockResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE__emi__SetEventLogTimestampClockResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SetEventLogTimestampClockResponse() : soap(NULL) { }
	virtual ~_emi__SetEventLogTimestampClockResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetEventLogTimestampClock
#define SOAP_TYPE__emi__GetEventLogTimestampClock (350)
/* emi:GetEventLogTimestampClock */
class SOAP_CMAC _emi__GetEventLogTimestampClock
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE__emi__GetEventLogTimestampClock */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetEventLogTimestampClock() : soap(NULL) { }
	virtual ~_emi__GetEventLogTimestampClock() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetEventLogTimestampClockResponse
#define SOAP_TYPE__emi__GetEventLogTimestampClockResponse (351)
/* emi:GetEventLogTimestampClockResponse */
class SOAP_CMAC _emi__GetEventLogTimestampClockResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int Time;	/* required element of type emi:TimeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE__emi__GetEventLogTimestampClockResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetEventLogTimestampClockResponse() : soap(NULL) { }
	virtual ~_emi__GetEventLogTimestampClockResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateSensors
#define SOAP_TYPE__emi__EnumerateSensors (352)
/* emi:EnumerateSensors */
class SOAP_CMAC _emi__EnumerateSensors
{
public:
	unsigned int StartIndex;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE__emi__EnumerateSensors */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateSensors() : soap(NULL) { }
	virtual ~_emi__EnumerateSensors() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateSensorsResponse
#define SOAP_TYPE__emi__EnumerateSensorsResponse (353)
/* emi:EnumerateSensorsResponse */
class SOAP_CMAC _emi__EnumerateSensorsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int TotalCount;	/* required element of type xsd:unsignedInt */
	unsigned int HandleCount;	/* required element of type xsd:unsignedInt */
	emi__SensorHandleArrayType *Handles;	/* required element of type emi:SensorHandleArrayType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE__emi__EnumerateSensorsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateSensorsResponse() : Handles(NULL), soap(NULL) { }
	virtual ~_emi__EnumerateSensorsResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetSensorAttributes
#define SOAP_TYPE__emi__GetSensorAttributes (354)
/* emi:GetSensorAttributes */
class SOAP_CMAC _emi__GetSensorAttributes
{
public:
	unsigned int Handle;	/* required element of type emi:SensorHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE__emi__GetSensorAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetSensorAttributes() : soap(NULL) { }
	virtual ~_emi__GetSensorAttributes() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetSensorAttributesResponse
#define SOAP_TYPE__emi__GetSensorAttributesResponse (355)
/* emi:GetSensorAttributesResponse */
class SOAP_CMAC _emi__GetSensorAttributesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	emi__SensorAttributesType *Attributes;	/* required element of type emi:SensorAttributesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE__emi__GetSensorAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetSensorAttributesResponse() : Attributes(NULL), soap(NULL) { }
	virtual ~_emi__GetSensorAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__CancelAlertSubscription
#define SOAP_TYPE__emi__CancelAlertSubscription (356)
/* emi:CancelAlertSubscription */
class SOAP_CMAC _emi__CancelAlertSubscription
{
public:
	unsigned int SubscriptionHandle;	/* required element of type emi:AlertSubscriptionHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE__emi__CancelAlertSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__CancelAlertSubscription() : soap(NULL) { }
	virtual ~_emi__CancelAlertSubscription() { }
};
#endif

#ifndef SOAP_TYPE__emi__CancelAlertSubscriptionResponse
#define SOAP_TYPE__emi__CancelAlertSubscriptionResponse (357)
/* emi:CancelAlertSubscriptionResponse */
class SOAP_CMAC _emi__CancelAlertSubscriptionResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE__emi__CancelAlertSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__CancelAlertSubscriptionResponse() : soap(NULL) { }
	virtual ~_emi__CancelAlertSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__SubscribeForGeneralAlert
#define SOAP_TYPE__emi__SubscribeForGeneralAlert (358)
/* emi:SubscribeForGeneralAlert */
class SOAP_CMAC _emi__SubscribeForGeneralAlert
{
public:
	emi__AlertSubscriptionGeneralType *SubscriptionInfo;	/* required element of type emi:AlertSubscriptionGeneralType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE__emi__SubscribeForGeneralAlert */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SubscribeForGeneralAlert() : SubscriptionInfo(NULL), soap(NULL) { }
	virtual ~_emi__SubscribeForGeneralAlert() { }
};
#endif

#ifndef SOAP_TYPE__emi__SubscribeForGeneralAlertResponse
#define SOAP_TYPE__emi__SubscribeForGeneralAlertResponse (359)
/* emi:SubscribeForGeneralAlertResponse */
class SOAP_CMAC _emi__SubscribeForGeneralAlertResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	unsigned int SubscriptionHandle;	/* required element of type emi:AlertSubscriptionHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE__emi__SubscribeForGeneralAlertResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__SubscribeForGeneralAlertResponse() : soap(NULL) { }
	virtual ~_emi__SubscribeForGeneralAlertResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateGeneralAlertSubscriptions
#define SOAP_TYPE__emi__EnumerateGeneralAlertSubscriptions (360)
/* emi:EnumerateGeneralAlertSubscriptions */
class SOAP_CMAC _emi__EnumerateGeneralAlertSubscriptions
{
public:
	unsigned char *PolicyID;	/* optional element of type emi:AlertSubscriptionPolicyIDType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE__emi__EnumerateGeneralAlertSubscriptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateGeneralAlertSubscriptions() : PolicyID(NULL), soap(NULL) { }
	virtual ~_emi__EnumerateGeneralAlertSubscriptions() { }
};
#endif

#ifndef SOAP_TYPE__emi__EnumerateGeneralAlertSubscriptionsResponse
#define SOAP_TYPE__emi__EnumerateGeneralAlertSubscriptionsResponse (361)
/* emi:EnumerateGeneralAlertSubscriptionsResponse */
class SOAP_CMAC _emi__EnumerateGeneralAlertSubscriptionsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	std::vector<unsigned int >SubscriptionHandle;	/* optional element of type emi:AlertSubscriptionHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE__emi__EnumerateGeneralAlertSubscriptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__EnumerateGeneralAlertSubscriptionsResponse() : soap(NULL) { }
	virtual ~_emi__EnumerateGeneralAlertSubscriptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetGeneralAlertSubscription
#define SOAP_TYPE__emi__GetGeneralAlertSubscription (362)
/* emi:GetGeneralAlertSubscription */
class SOAP_CMAC _emi__GetGeneralAlertSubscription
{
public:
	unsigned int SubscriptionHandle;	/* required element of type emi:AlertSubscriptionHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE__emi__GetGeneralAlertSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetGeneralAlertSubscription() : soap(NULL) { }
	virtual ~_emi__GetGeneralAlertSubscription() { }
};
#endif

#ifndef SOAP_TYPE__emi__GetGeneralAlertSubscriptionResponse
#define SOAP_TYPE__emi__GetGeneralAlertSubscriptionResponse (363)
/* emi:GetGeneralAlertSubscriptionResponse */
class SOAP_CMAC _emi__GetGeneralAlertSubscriptionResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type emi:PT_STATUS */
	emi__AlertSubscriptionGeneralType *SubscriptionInfo;	/* required element of type emi:AlertSubscriptionGeneralType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE__emi__GetGeneralAlertSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _emi__GetGeneralAlertSubscriptionResponse() : SubscriptionInfo(NULL), soap(NULL) { }
	virtual ~_emi__GetGeneralAlertSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerAntiSpoofingFilterType
#define SOAP_TYPE_cb__CircuitBreakerAntiSpoofingFilterType (364)
/* cb:CircuitBreakerAntiSpoofingFilterType */
class SOAP_CMAC cb__CircuitBreakerAntiSpoofingFilterType
{
public:
	bool ActionEventOnMatch;	/* required element of type xsd:boolean */
	bool ActionCount;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_cb__CircuitBreakerAntiSpoofingFilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerAntiSpoofingFilterType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerAntiSpoofingFilterType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerPolicyType
#define SOAP_TYPE_cb__CircuitBreakerPolicyType (366)
/* cb:CircuitBreakerPolicyType */
class SOAP_CMAC cb__CircuitBreakerPolicyType
{
public:
	char *PolicyName;	/* optional element of type xsd:anyType */
	unsigned int PolicyPrecedence;	/* required element of type xsd:unsignedInt */
	cb__CircuitBreakerAntiSpoofingFilterType *AntiSpoofingFilter;	/* optional element of type cb:CircuitBreakerAntiSpoofingFilterType */
	std::vector<unsigned int >FilterCreationHandles;	/* optional element of type xsd:unsignedInt */
	class cb__CircuitBreakerDefaultFilterType *DefaultTXFilter;	/* required element of type cb:CircuitBreakerDefaultFilterType */
	cb__CircuitBreakerDefaultFilterType *DefaultRXFilter;	/* required element of type cb:CircuitBreakerDefaultFilterType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE_cb__CircuitBreakerPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerPolicyType() : PolicyName(NULL), AntiSpoofingFilter(NULL), DefaultTXFilter(NULL), DefaultRXFilter(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerPolicyType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerPolicyInfoType
#define SOAP_TYPE_cb__CircuitBreakerPolicyInfoType (367)
/* cb:CircuitBreakerPolicyInfoType */
class SOAP_CMAC cb__CircuitBreakerPolicyInfoType
{
public:
	cb__CircuitBreakerPolicyType *Policy;	/* required element of type cb:CircuitBreakerPolicyType */
	unsigned int PolicyCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE_cb__CircuitBreakerPolicyInfoType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerPolicyInfoType() : Policy(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerPolicyInfoType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPv4AddressAndMaskType
#define SOAP_TYPE_cb__CircuitBreakerIPv4AddressAndMaskType (368)
/* cb:CircuitBreakerIPv4AddressAndMaskType */
class SOAP_CMAC cb__CircuitBreakerIPv4AddressAndMaskType
{
public:
	enum cb__CircuitBreakerFilterIPAddressDirectionType IPAddressDirection;	/* required element of type cb:CircuitBreakerFilterIPAddressDirectionType */
	std::string Address;	/* required element of type cb:IPv4AddressStringType */
	std::string AddressMask;	/* required element of type cb:IPv4AddressStringType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPv4AddressAndMaskType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPv4AddressAndMaskType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerIPv4AddressAndMaskType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPv6AddressAndMaskType
#define SOAP_TYPE_cb__CircuitBreakerIPv6AddressAndMaskType (369)
/* cb:CircuitBreakerIPv6AddressAndMaskType */
class SOAP_CMAC cb__CircuitBreakerIPv6AddressAndMaskType
{
public:
	enum cb__CircuitBreakerFilterIPAddressDirectionType IPAddressDirection;	/* required element of type cb:CircuitBreakerFilterIPAddressDirectionType */
	std::string Address;	/* required element of type cb:IPv6AddressStringType */
	std::string AddressMask;	/* required element of type cb:IPv6AddressStringType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPv6AddressAndMaskType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPv6AddressAndMaskType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerIPv6AddressAndMaskType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPLayeredPortSimpleType
#define SOAP_TYPE_cb__CircuitBreakerIPLayeredPortSimpleType (370)
/* cb:CircuitBreakerIPLayeredPortSimpleType */
class SOAP_CMAC cb__CircuitBreakerIPLayeredPortSimpleType
{
public:
	unsigned short SourcePort;	/* required element of type xsd:unsignedShort */
	unsigned short DestinationPort;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPLayeredPortSimpleType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPLayeredPortSimpleType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerIPLayeredPortSimpleType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPLayeredPortRangeType
#define SOAP_TYPE_cb__CircuitBreakerIPLayeredPortRangeType (371)
/* cb:CircuitBreakerIPLayeredPortRangeType */
class SOAP_CMAC cb__CircuitBreakerIPLayeredPortRangeType
{
public:
	unsigned short PortMin;	/* required element of type xsd:unsignedShort */
	unsigned short PortMax;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPLayeredPortRangeType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPLayeredPortRangeType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerIPLayeredPortRangeType() { }
};
#endif

#ifndef SOAP_TYPE__cb__union_CircuitBreakerIPLayeredPortType
#define SOAP_TYPE__cb__union_CircuitBreakerIPLayeredPortType (778)
/* xsd:choice */
union _cb__union_CircuitBreakerIPLayeredPortType
{
#define SOAP_UNION__cb__union_CircuitBreakerIPLayeredPortType_IPLayeredPortSimple	(1)
	cb__CircuitBreakerIPLayeredPortSimpleType *IPLayeredPortSimple;
#define SOAP_UNION__cb__union_CircuitBreakerIPLayeredPortType_IPLayeredPortRangeSource	(2)
	cb__CircuitBreakerIPLayeredPortRangeType *IPLayeredPortRangeSource;
#define SOAP_UNION__cb__union_CircuitBreakerIPLayeredPortType_IPLayeredPortRangeDestination	(3)
	cb__CircuitBreakerIPLayeredPortRangeType *IPLayeredPortRangeDestination;
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPLayeredPortType
#define SOAP_TYPE_cb__CircuitBreakerIPLayeredPortType (372)
/* cb:CircuitBreakerIPLayeredPortType */
class SOAP_CMAC cb__CircuitBreakerIPLayeredPortType
{
public:
	int __union_CircuitBreakerIPLayeredPortType;	/* union discriminant (of union defined below) */
	union _cb__union_CircuitBreakerIPLayeredPortType union_CircuitBreakerIPLayeredPortType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPLayeredPortType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPLayeredPortType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerIPLayeredPortType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPLayeredTCPFlagsType
#define SOAP_TYPE_cb__CircuitBreakerIPLayeredTCPFlagsType (373)
/* cb:CircuitBreakerIPLayeredTCPFlagsType */
class SOAP_CMAC cb__CircuitBreakerIPLayeredTCPFlagsType
{
public:
	bool *TCP_USCOREFLAG_USCOREFIN;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCORESYN;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCORERST;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCOREPUSH;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCOREACK;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCOREURG;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCOREECNE;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCORECWR;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCORENS;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCOREReserved1;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCOREReserved2;	/* optional element of type xsd:boolean */
	bool *TCP_USCOREFLAG_USCOREReserved3;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPLayeredTCPFlagsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPLayeredTCPFlagsType() : TCP_USCOREFLAG_USCOREFIN(NULL), TCP_USCOREFLAG_USCORESYN(NULL), TCP_USCOREFLAG_USCORERST(NULL), TCP_USCOREFLAG_USCOREPUSH(NULL), TCP_USCOREFLAG_USCOREACK(NULL), TCP_USCOREFLAG_USCOREURG(NULL), TCP_USCOREFLAG_USCOREECNE(NULL), TCP_USCOREFLAG_USCORECWR(NULL), TCP_USCOREFLAG_USCORENS(NULL), TCP_USCOREFLAG_USCOREReserved1(NULL), TCP_USCOREFLAG_USCOREReserved2(NULL), TCP_USCOREFLAG_USCOREReserved3(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerIPLayeredTCPFlagsType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPv4Type
#define SOAP_TYPE_cb__CircuitBreakerIPv4Type (374)
/* cb:CircuitBreakerIPv4Type */
class SOAP_CMAC cb__CircuitBreakerIPv4Type
{
public:
	cb__CircuitBreakerIPv4AddressAndMaskType *IPv4Desc;	/* optional element of type cb:CircuitBreakerIPv4AddressAndMaskType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPv4Type */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPv4Type() : IPv4Desc(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerIPv4Type() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPv6Type
#define SOAP_TYPE_cb__CircuitBreakerIPv6Type (375)
/* cb:CircuitBreakerIPv6Type */
class SOAP_CMAC cb__CircuitBreakerIPv6Type
{
public:
	cb__CircuitBreakerIPv6AddressAndMaskType *IPv6Desc;	/* optional element of type cb:CircuitBreakerIPv6AddressAndMaskType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPv6Type */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPv6Type() : IPv6Desc(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerIPv6Type() { }
};
#endif

#ifndef SOAP_TYPE__cb__union_CircuitBreakerIPPacketType
#define SOAP_TYPE__cb__union_CircuitBreakerIPPacketType (783)
/* xsd:choice */
union _cb__union_CircuitBreakerIPPacketType
{
#define SOAP_UNION__cb__union_CircuitBreakerIPPacketType_IPv4	(1)
	cb__CircuitBreakerIPv4Type *IPv4;
#define SOAP_UNION__cb__union_CircuitBreakerIPPacketType_IPv6	(2)
	cb__CircuitBreakerIPv6Type *IPv6;
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerIPPacketType
#define SOAP_TYPE_cb__CircuitBreakerIPPacketType (376)
/* cb:CircuitBreakerIPPacketType */
class SOAP_CMAC cb__CircuitBreakerIPPacketType
{
public:
	int __union_CircuitBreakerIPPacketType;	/* union discriminant (of union defined below) */
	union _cb__union_CircuitBreakerIPPacketType union_CircuitBreakerIPPacketType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE_cb__CircuitBreakerIPPacketType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerIPPacketType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerIPPacketType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerPacketUDPType
#define SOAP_TYPE_cb__CircuitBreakerPacketUDPType (377)
/* cb:CircuitBreakerPacketUDPType */
class SOAP_CMAC cb__CircuitBreakerPacketUDPType
{
public:
	cb__CircuitBreakerIPPacketType *IPPacket;	/* required element of type cb:CircuitBreakerIPPacketType */
	cb__CircuitBreakerIPLayeredPortType *IPLayeredPort;	/* optional element of type cb:CircuitBreakerIPLayeredPortType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE_cb__CircuitBreakerPacketUDPType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerPacketUDPType() : IPPacket(NULL), IPLayeredPort(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerPacketUDPType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerPacketIPType
#define SOAP_TYPE_cb__CircuitBreakerPacketIPType (379)
/* cb:CircuitBreakerPacketIPType */
class SOAP_CMAC cb__CircuitBreakerPacketIPType
{
public:
	cb__CircuitBreakerIPPacketType *IPPacket;	/* required element of type cb:CircuitBreakerIPPacketType */
	unsigned short *NextProtocol;	/* optional element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_cb__CircuitBreakerPacketIPType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerPacketIPType() : IPPacket(NULL), NextProtocol(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerPacketIPType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerPacketETHType
#define SOAP_TYPE_cb__CircuitBreakerPacketETHType (380)
/* cb:CircuitBreakerPacketETHType */
class SOAP_CMAC cb__CircuitBreakerPacketETHType
{
public:
	unsigned short EthernetFrameType;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_cb__CircuitBreakerPacketETHType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerPacketETHType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerPacketETHType() { }
};
#endif

#ifndef SOAP_TYPE__cb__union_CircuitBreakerPacketType
#define SOAP_TYPE__cb__union_CircuitBreakerPacketType (790)
/* xsd:choice */
union _cb__union_CircuitBreakerPacketType
{
#define SOAP_UNION__cb__union_CircuitBreakerPacketType_PacketTCP	(1)
	class cb__CircuitBreakerPacketTCPType *PacketTCP;
#define SOAP_UNION__cb__union_CircuitBreakerPacketType_PacketUDP	(2)
	cb__CircuitBreakerPacketUDPType *PacketUDP;
#define SOAP_UNION__cb__union_CircuitBreakerPacketType_PacketIP	(3)
	cb__CircuitBreakerPacketIPType *PacketIP;
#define SOAP_UNION__cb__union_CircuitBreakerPacketType_PacketETH	(4)
	cb__CircuitBreakerPacketETHType *PacketETH;
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerPacketType
#define SOAP_TYPE_cb__CircuitBreakerPacketType (381)
/* cb:CircuitBreakerPacketType */
class SOAP_CMAC cb__CircuitBreakerPacketType
{
public:
	int __union_CircuitBreakerPacketType;	/* union discriminant (of union defined below) */
	union _cb__union_CircuitBreakerPacketType union_CircuitBreakerPacketType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE_cb__CircuitBreakerPacketType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerPacketType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerPacketType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerFilterType
#define SOAP_TYPE_cb__CircuitBreakerFilterType (382)
/* cb:CircuitBreakerFilterType */
class SOAP_CMAC cb__CircuitBreakerFilterType
{
public:
	char *FilterName;	/* optional element of type xsd:anyType */
	enum cb__CircuitBreakerFilterDirectionType FilterDirection;	/* required element of type cb:CircuitBreakerFilterDirectionType */
	enum cb__CircuitBreakerProfileType FilterProfile;	/* required element of type cb:CircuitBreakerProfileType */
	unsigned int FilterProfileData;	/* required element of type xsd:unsignedInt */
	cb__CircuitBreakerPacketType *FilterPacket;	/* required element of type cb:CircuitBreakerPacketType */
	bool ActionEventOnMatch;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE_cb__CircuitBreakerFilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerFilterType() : FilterName(NULL), FilterPacket(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerFilterType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerFilterInfoType
#define SOAP_TYPE_cb__CircuitBreakerFilterInfoType (383)
/* cb:CircuitBreakerFilterInfoType */
class SOAP_CMAC cb__CircuitBreakerFilterInfoType
{
public:
	cb__CircuitBreakerFilterType *Filter;	/* required element of type cb:CircuitBreakerFilterType */
	unsigned int FilterCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE_cb__CircuitBreakerFilterInfoType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerFilterInfoType() : Filter(NULL), soap(NULL) { }
	virtual ~cb__CircuitBreakerFilterInfoType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerCapabilitiesType
#define SOAP_TYPE_cb__CircuitBreakerCapabilitiesType (384)
/* cb:CircuitBreakerCapabilitiesType */
class SOAP_CMAC cb__CircuitBreakerCapabilitiesType
{
public:
	std::string HardwareDescription;	/* required element of type xsd:string */
	unsigned int HardwareID;	/* required element of type xsd:unsignedInt */
	unsigned short IPv4_USCOREMaxTxFilters;	/* required element of type xsd:unsignedShort */
	unsigned short IPv4_USCOREMaxTxCounters;	/* required element of type xsd:unsignedShort */
	unsigned short IPv4_USCOREMaxRxFilters;	/* required element of type xsd:unsignedShort */
	unsigned short IPv4_USCOREMaxRxCounters;	/* required element of type xsd:unsignedShort */
	bool IPv4_USCOREAntiSpoofingCapable;	/* required element of type xsd:boolean */
	unsigned short IPv6_USCOREMaxTxFilters;	/* required element of type xsd:unsignedShort */
	unsigned short IPv6_USCOREMaxTxCounters;	/* required element of type xsd:unsignedShort */
	unsigned short IPv6_USCOREMaxRxFilters;	/* required element of type xsd:unsignedShort */
	unsigned short IPv6_USCOREMaxRxCounters;	/* required element of type xsd:unsignedShort */
	bool IPv6_USCOREAntiSpoofingCapable;	/* required element of type xsd:boolean */
	unsigned short IPv6_USCORETo_USCOREIPv4_USCORERatio;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_cb__CircuitBreakerCapabilitiesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerCapabilitiesType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerCapabilitiesType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerFilterStatisticsType
#define SOAP_TYPE_cb__CircuitBreakerFilterStatisticsType (385)
/* cb:CircuitBreakerFilterStatisticsType */
class SOAP_CMAC cb__CircuitBreakerFilterStatisticsType
{
public:
	unsigned int FilterCreationHandle;	/* required element of type xsd:unsignedInt */
	unsigned int ReadCount;	/* required element of type xsd:unsignedInt */
	bool FilterMatched;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_cb__CircuitBreakerFilterStatisticsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerFilterStatisticsType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerFilterStatisticsType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerHardwarePolicyType
#define SOAP_TYPE_cb__CircuitBreakerHardwarePolicyType (386)
/* cb:CircuitBreakerHardwarePolicyType */
class SOAP_CMAC cb__CircuitBreakerHardwarePolicyType
{
public:
	unsigned int HardwareID;	/* required element of type xsd:unsignedInt */
	unsigned int PolicyCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE_cb__CircuitBreakerHardwarePolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerHardwarePolicyType() : soap(NULL) { }
	virtual ~cb__CircuitBreakerHardwarePolicyType() { }
};
#endif

#ifndef SOAP_TYPE_cb__TimedCounterType
#define SOAP_TYPE_cb__TimedCounterType (387)
/* cb:TimedCounterType */
class SOAP_CMAC cb__TimedCounterType
{
public:
	unsigned int Threshold;	/* required element of type xsd:unsignedInt */
	unsigned int ClearTime;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE_cb__TimedCounterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__TimedCounterType() : soap(NULL) { }
	virtual ~cb__TimedCounterType() { }
};
#endif

#ifndef SOAP_TYPE_cb__BlockedPortInfoType
#define SOAP_TYPE_cb__BlockedPortInfoType (388)
/* cb:BlockedPortInfoType */
class SOAP_CMAC cb__BlockedPortInfoType
{
public:
	unsigned short PortBlocked;	/* required element of type xsd:unsignedShort */
	unsigned short ProtocolBlocked;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE_cb__BlockedPortInfoType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__BlockedPortInfoType() : soap(NULL) { }
	virtual ~cb__BlockedPortInfoType() { }
};
#endif

#ifndef SOAP_TYPE_cb__HcbOptionsType
#define SOAP_TYPE_cb__HcbOptionsType (389)
/* cb:HcbOptionsType */
class SOAP_CMAC cb__HcbOptionsType
{
public:
	cb__TimedCounterType *FastConnectionRate;	/* optional element of type cb:TimedCounterType */
	cb__TimedCounterType *SlowConnectionRate;	/* optional element of type cb:TimedCounterType */
	bool BlockAll;	/* required element of type xsd:boolean */
	bool BlockOffensivePort;	/* required element of type xsd:boolean */
	unsigned int *PolicyCreationHandle;	/* optional element of type xsd:unsignedInt */
	unsigned short EncounterTimeout;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_cb__HcbOptionsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__HcbOptionsType() : FastConnectionRate(NULL), SlowConnectionRate(NULL), PolicyCreationHandle(NULL), soap(NULL) { }
	virtual ~cb__HcbOptionsType() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyCreate
#define SOAP_TYPE__cb__CbPolicyCreate (390)
/* cb:CbPolicyCreate */
class SOAP_CMAC _cb__CbPolicyCreate
{
public:
	cb__CircuitBreakerPolicyType *Policy;	/* required element of type cb:CircuitBreakerPolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE__cb__CbPolicyCreate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyCreate() : Policy(NULL), soap(NULL) { }
	virtual ~_cb__CbPolicyCreate() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyCreateResponse
#define SOAP_TYPE__cb__CbPolicyCreateResponse (391)
/* cb:CbPolicyCreateResponse */
class SOAP_CMAC _cb__CbPolicyCreateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	unsigned int PolicyCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE__cb__CbPolicyCreateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyCreateResponse() : soap(NULL) { }
	virtual ~_cb__CbPolicyCreateResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyGet
#define SOAP_TYPE__cb__CbPolicyGet (392)
/* cb:CbPolicyGet */
class SOAP_CMAC _cb__CbPolicyGet
{
public:
	unsigned int PolicyCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE__cb__CbPolicyGet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyGet() : soap(NULL) { }
	virtual ~_cb__CbPolicyGet() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyGetResponse
#define SOAP_TYPE__cb__CbPolicyGetResponse (393)
/* cb:CbPolicyGetResponse */
class SOAP_CMAC _cb__CbPolicyGetResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	cb__CircuitBreakerPolicyType *Policy;	/* required element of type cb:CircuitBreakerPolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE__cb__CbPolicyGetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyGetResponse() : Policy(NULL), soap(NULL) { }
	virtual ~_cb__CbPolicyGetResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyDelete
#define SOAP_TYPE__cb__CbPolicyDelete (394)
/* cb:CbPolicyDelete */
class SOAP_CMAC _cb__CbPolicyDelete
{
public:
	unsigned int PolicyCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE__cb__CbPolicyDelete */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyDelete() : soap(NULL) { }
	virtual ~_cb__CbPolicyDelete() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyDeleteResponse
#define SOAP_TYPE__cb__CbPolicyDeleteResponse (395)
/* cb:CbPolicyDeleteResponse */
class SOAP_CMAC _cb__CbPolicyDeleteResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE__cb__CbPolicyDeleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyDeleteResponse() : soap(NULL) { }
	virtual ~_cb__CbPolicyDeleteResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyEnumerate
#define SOAP_TYPE__cb__CbPolicyEnumerate (396)
/* cb:CbPolicyEnumerate */
class SOAP_CMAC _cb__CbPolicyEnumerate
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE__cb__CbPolicyEnumerate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyEnumerate() : soap(NULL) { }
	virtual ~_cb__CbPolicyEnumerate() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyEnumerateResponse
#define SOAP_TYPE__cb__CbPolicyEnumerateResponse (397)
/* cb:CbPolicyEnumerateResponse */
class SOAP_CMAC _cb__CbPolicyEnumerateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	std::vector<cb__CircuitBreakerPolicyInfoType * >Policies;	/* optional element of type cb:CircuitBreakerPolicyInfoType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE__cb__CbPolicyEnumerateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyEnumerateResponse() : soap(NULL) { }
	virtual ~_cb__CbPolicyEnumerateResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyEnable
#define SOAP_TYPE__cb__CbPolicyEnable (398)
/* cb:CbPolicyEnable */
class SOAP_CMAC _cb__CbPolicyEnable
{
public:
	std::vector<cb__CircuitBreakerHardwarePolicyType * >EnablePolicies;	/* required element of type cb:CircuitBreakerHardwarePolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE__cb__CbPolicyEnable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyEnable() : soap(NULL) { }
	virtual ~_cb__CbPolicyEnable() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyEnableResponse
#define SOAP_TYPE__cb__CbPolicyEnableResponse (399)
/* cb:CbPolicyEnableResponse */
class SOAP_CMAC _cb__CbPolicyEnableResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	std::vector<cb__CircuitBreakerHardwarePolicyType * >ActivePolicies;	/* optional element of type cb:CircuitBreakerHardwarePolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE__cb__CbPolicyEnableResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyEnableResponse() : soap(NULL) { }
	virtual ~_cb__CbPolicyEnableResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyDisable
#define SOAP_TYPE__cb__CbPolicyDisable (400)
/* cb:CbPolicyDisable */
class SOAP_CMAC _cb__CbPolicyDisable
{
public:
	unsigned int *HardwareID;	/* optional element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE__cb__CbPolicyDisable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyDisable() : HardwareID(NULL), soap(NULL) { }
	virtual ~_cb__CbPolicyDisable() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyDisableResponse
#define SOAP_TYPE__cb__CbPolicyDisableResponse (401)
/* cb:CbPolicyDisableResponse */
class SOAP_CMAC _cb__CbPolicyDisableResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE__cb__CbPolicyDisableResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyDisableResponse() : soap(NULL) { }
	virtual ~_cb__CbPolicyDisableResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyGetEnabled
#define SOAP_TYPE__cb__CbPolicyGetEnabled (402)
/* cb:CbPolicyGetEnabled */
class SOAP_CMAC _cb__CbPolicyGetEnabled
{
public:
	enum cb__CircuitBreakerApplicationType *AppType;	/* optional element of type cb:CircuitBreakerApplicationType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE__cb__CbPolicyGetEnabled */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyGetEnabled() : AppType(NULL), soap(NULL) { }
	virtual ~_cb__CbPolicyGetEnabled() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyGetEnabledResponse
#define SOAP_TYPE__cb__CbPolicyGetEnabledResponse (403)
/* cb:CbPolicyGetEnabledResponse */
class SOAP_CMAC _cb__CbPolicyGetEnabledResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	std::vector<cb__CircuitBreakerHardwarePolicyType * >HwPolicies;	/* optional element of type cb:CircuitBreakerHardwarePolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE__cb__CbPolicyGetEnabledResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyGetEnabledResponse() : soap(NULL) { }
	virtual ~_cb__CbPolicyGetEnabledResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyGetActiveStatistics
#define SOAP_TYPE__cb__CbPolicyGetActiveStatistics (404)
/* cb:CbPolicyGetActiveStatistics */
class SOAP_CMAC _cb__CbPolicyGetActiveStatistics
{
public:
	unsigned int HardwareID;	/* required element of type xsd:unsignedInt */
	bool ResetStatisticsOnRead;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE__cb__CbPolicyGetActiveStatistics */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyGetActiveStatistics() : soap(NULL) { }
	virtual ~_cb__CbPolicyGetActiveStatistics() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbPolicyGetActiveStatisticsResponse
#define SOAP_TYPE__cb__CbPolicyGetActiveStatisticsResponse (405)
/* cb:CbPolicyGetActiveStatisticsResponse */
class SOAP_CMAC _cb__CbPolicyGetActiveStatisticsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	unsigned int PolicyCreationHandle;	/* required element of type xsd:unsignedInt */
	unsigned int ActivationTime;	/* required element of type cb:TimeType */
	unsigned int LastResetTime;	/* required element of type cb:TimeType */
	std::vector<cb__CircuitBreakerFilterStatisticsType * >Statistics;	/* optional element of type cb:CircuitBreakerFilterStatisticsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE__cb__CbPolicyGetActiveStatisticsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbPolicyGetActiveStatisticsResponse() : soap(NULL) { }
	virtual ~_cb__CbPolicyGetActiveStatisticsResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterCreate
#define SOAP_TYPE__cb__CbFilterCreate (406)
/* cb:CbFilterCreate */
class SOAP_CMAC _cb__CbFilterCreate
{
public:
	cb__CircuitBreakerFilterType *Filter;	/* required element of type cb:CircuitBreakerFilterType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE__cb__CbFilterCreate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterCreate() : Filter(NULL), soap(NULL) { }
	virtual ~_cb__CbFilterCreate() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterCreateResponse
#define SOAP_TYPE__cb__CbFilterCreateResponse (407)
/* cb:CbFilterCreateResponse */
class SOAP_CMAC _cb__CbFilterCreateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	unsigned int FilterCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE__cb__CbFilterCreateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterCreateResponse() : soap(NULL) { }
	virtual ~_cb__CbFilterCreateResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterGet
#define SOAP_TYPE__cb__CbFilterGet (408)
/* cb:CbFilterGet */
class SOAP_CMAC _cb__CbFilterGet
{
public:
	unsigned int FilterCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE__cb__CbFilterGet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterGet() : soap(NULL) { }
	virtual ~_cb__CbFilterGet() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterGetResponse
#define SOAP_TYPE__cb__CbFilterGetResponse (409)
/* cb:CbFilterGetResponse */
class SOAP_CMAC _cb__CbFilterGetResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	cb__CircuitBreakerFilterType *Filter;	/* required element of type cb:CircuitBreakerFilterType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE__cb__CbFilterGetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterGetResponse() : Filter(NULL), soap(NULL) { }
	virtual ~_cb__CbFilterGetResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterDelete
#define SOAP_TYPE__cb__CbFilterDelete (410)
/* cb:CbFilterDelete */
class SOAP_CMAC _cb__CbFilterDelete
{
public:
	unsigned int FilterCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE__cb__CbFilterDelete */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterDelete() : soap(NULL) { }
	virtual ~_cb__CbFilterDelete() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterDeleteResponse
#define SOAP_TYPE__cb__CbFilterDeleteResponse (411)
/* cb:CbFilterDeleteResponse */
class SOAP_CMAC _cb__CbFilterDeleteResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE__cb__CbFilterDeleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterDeleteResponse() : soap(NULL) { }
	virtual ~_cb__CbFilterDeleteResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterEnumerate
#define SOAP_TYPE__cb__CbFilterEnumerate (412)
/* cb:CbFilterEnumerate */
class SOAP_CMAC _cb__CbFilterEnumerate
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE__cb__CbFilterEnumerate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterEnumerate() : soap(NULL) { }
	virtual ~_cb__CbFilterEnumerate() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbFilterEnumerateResponse
#define SOAP_TYPE__cb__CbFilterEnumerateResponse (413)
/* cb:CbFilterEnumerateResponse */
class SOAP_CMAC _cb__CbFilterEnumerateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	std::vector<cb__CircuitBreakerFilterInfoType * >Filters;	/* optional element of type cb:CircuitBreakerFilterInfoType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE__cb__CbFilterEnumerateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbFilterEnumerateResponse() : soap(NULL) { }
	virtual ~_cb__CbFilterEnumerateResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbQueryCapabilities
#define SOAP_TYPE__cb__CbQueryCapabilities (414)
/* cb:CbQueryCapabilities */
class SOAP_CMAC _cb__CbQueryCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE__cb__CbQueryCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbQueryCapabilities() : soap(NULL) { }
	virtual ~_cb__CbQueryCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__cb__CbQueryCapabilitiesResponse
#define SOAP_TYPE__cb__CbQueryCapabilitiesResponse (415)
/* cb:CbQueryCapabilitiesResponse */
class SOAP_CMAC _cb__CbQueryCapabilitiesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cb:PT_STATUS */
	unsigned int MaxSupportedPolicies;	/* required element of type xsd:unsignedInt */
	unsigned int MaxSupportedFilters;	/* required element of type xsd:unsignedInt */
	std::vector<cb__CircuitBreakerCapabilitiesType * >Capabilities;	/* required element of type cb:CircuitBreakerCapabilitiesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE__cb__CbQueryCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__CbQueryCapabilitiesResponse() : soap(NULL) { }
	virtual ~_cb__CbQueryCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__SetHcbOptions
#define SOAP_TYPE__cb__SetHcbOptions (416)
/* cb:SetHcbOptions */
class SOAP_CMAC _cb__SetHcbOptions
{
public:
	unsigned int InterfaceHandle;	/* required element of type net:InterfaceHandleType */
	cb__HcbOptionsType *HcbOptions;	/* optional element of type cb:HcbOptionsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE__cb__SetHcbOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__SetHcbOptions() : HcbOptions(NULL), soap(NULL) { }
	virtual ~_cb__SetHcbOptions() { }
};
#endif

#ifndef SOAP_TYPE__cb__SetHcbOptionsResponse
#define SOAP_TYPE__cb__SetHcbOptionsResponse (417)
/* cb:SetHcbOptionsResponse */
class SOAP_CMAC _cb__SetHcbOptionsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE__cb__SetHcbOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__SetHcbOptionsResponse() : soap(NULL) { }
	virtual ~_cb__SetHcbOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__GetHcbOptions
#define SOAP_TYPE__cb__GetHcbOptions (418)
/* cb:GetHcbOptions */
class SOAP_CMAC _cb__GetHcbOptions
{
public:
	unsigned int InterfaceHandle;	/* required element of type net:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE__cb__GetHcbOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__GetHcbOptions() : soap(NULL) { }
	virtual ~_cb__GetHcbOptions() { }
};
#endif

#ifndef SOAP_TYPE__cb__GetHcbOptionsResponse
#define SOAP_TYPE__cb__GetHcbOptionsResponse (419)
/* cb:GetHcbOptionsResponse */
class SOAP_CMAC _cb__GetHcbOptionsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	cb__HcbOptionsType *HcbOptions;	/* optional element of type cb:HcbOptionsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE__cb__GetHcbOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__GetHcbOptionsResponse() : HcbOptions(NULL), soap(NULL) { }
	virtual ~_cb__GetHcbOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__ClearHcbState
#define SOAP_TYPE__cb__ClearHcbState (420)
/* cb:ClearHcbState */
class SOAP_CMAC _cb__ClearHcbState
{
public:
	unsigned int InterfaceHandle;	/* required element of type net:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE__cb__ClearHcbState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__ClearHcbState() : soap(NULL) { }
	virtual ~_cb__ClearHcbState() { }
};
#endif

#ifndef SOAP_TYPE__cb__ClearHcbStateResponse
#define SOAP_TYPE__cb__ClearHcbStateResponse (421)
/* cb:ClearHcbStateResponse */
class SOAP_CMAC _cb__ClearHcbStateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE__cb__ClearHcbStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__ClearHcbStateResponse() : soap(NULL) { }
	virtual ~_cb__ClearHcbStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__cb__GetHcbState
#define SOAP_TYPE__cb__GetHcbState (422)
/* cb:GetHcbState */
class SOAP_CMAC _cb__GetHcbState
{
public:
	unsigned int InterfaceHandle;	/* required element of type net:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE__cb__GetHcbState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__GetHcbState() : soap(NULL) { }
	virtual ~_cb__GetHcbState() { }
};
#endif

#ifndef SOAP_TYPE__cb__GetHcbStateResponse
#define SOAP_TYPE__cb__GetHcbStateResponse (423)
/* cb:GetHcbStateResponse */
class SOAP_CMAC _cb__GetHcbStateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	enum cb__HcbStateType HcbState;	/* required element of type cb:HcbStateType */
	bool BlockedAll;	/* required element of type xsd:boolean */
	unsigned int *TimeStamp;	/* optional element of type cb:TimeType */
	enum cb__HcbTriggerReasonType *HcbTriggerReason;	/* optional element of type cb:HcbTriggerReasonType */
	cb__BlockedPortInfoType *BlockedPortInfo;	/* optional element of type cb:BlockedPortInfoType */
	unsigned int *EnabledCbPolicy;	/* optional element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE__cb__GetHcbStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _cb__GetHcbStateResponse() : TimeStamp(NULL), HcbTriggerReason(NULL), BlockedPortInfo(NULL), EnabledCbPolicy(NULL), soap(NULL) { }
	virtual ~_cb__GetHcbStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_hwa__AssetTypeArrayType
#define SOAP_TYPE_hwa__AssetTypeArrayType (424)
/* hwa:AssetTypeArrayType */
class SOAP_CMAC hwa__AssetTypeArrayType
{
public:
	std::vector<enum hwa__AssetTypeType >AssetType;	/* optional element of type hwa:AssetTypeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_hwa__AssetTypeArrayType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__AssetTypeArrayType() : soap(NULL) { }
	virtual ~hwa__AssetTypeArrayType() { }
};
#endif

#ifndef SOAP_TYPE_hwa__AssetDataArrayType
#define SOAP_TYPE_hwa__AssetDataArrayType (425)
/* hwa:AssetDataArrayType */
class SOAP_CMAC hwa__AssetDataArrayType
{
public:
	std::vector<class hwa__AssetDataType * >AssetData;	/* optional element of type hwa:AssetDataType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_hwa__AssetDataArrayType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__AssetDataArrayType() : soap(NULL) { }
	virtual ~hwa__AssetDataArrayType() { }
};
#endif

#ifndef SOAP_TYPE_hwa__AssetDataType
#define SOAP_TYPE_hwa__AssetDataType (426)
/* hwa:AssetDataType */
class SOAP_CMAC hwa__AssetDataType
{
public:
	enum hwa__AssetTypeType AssetType;	/* required element of type hwa:AssetTypeType */
	unsigned int AssetSize;	/* required element of type xsd:unsignedInt */
	xsd__base64Binary *AssetData;	/* optional element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE_hwa__AssetDataType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__AssetDataType() : AssetData(NULL), soap(NULL) { }
	virtual ~hwa__AssetDataType() { }
};
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREBIOS
#define SOAP_TYPE_hwa__PT_USCOREBIOS (427)
/* hwa:PT_BIOS */
class SOAP_CMAC hwa__PT_USCOREBIOS
{
public:
	unsigned int StructureVersion;	/* required element of type xsd:unsignedInt */
	std::vector<unsigned char >Vendor;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >Version;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >ReleaseDate;	/* sequence of 65 to 65 elements */
	unsigned char padding;	/* required element of type xsd:unsignedByte */
	unsigned int Characteristics;	/* required element of type hwa:PT_BIOS_CHARACTERISTICS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE_hwa__PT_USCOREBIOS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__PT_USCOREBIOS() : soap(NULL) { }
	virtual ~hwa__PT_USCOREBIOS() { }
};
#endif

#ifndef SOAP_TYPE_hwa__PT_USCORECOMPUTER_USCORESYSTEM
#define SOAP_TYPE_hwa__PT_USCORECOMPUTER_USCORESYSTEM (428)
/* hwa:PT_COMPUTER_SYSTEM */
class SOAP_CMAC hwa__PT_USCORECOMPUTER_USCORESYSTEM
{
public:
	unsigned int StructureVersion;	/* required element of type xsd:unsignedInt */
	std::vector<unsigned char >Manufacturer;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >Product;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >Version;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >SerialNumber;	/* sequence of 65 to 65 elements */
	class hwa__GUID *UUID;	/* required element of type hwa:GUID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE_hwa__PT_USCORECOMPUTER_USCORESYSTEM */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__PT_USCORECOMPUTER_USCORESYSTEM() : UUID(NULL), soap(NULL) { }
	virtual ~hwa__PT_USCORECOMPUTER_USCORESYSTEM() { }
};
#endif

#ifndef SOAP_TYPE_hwa__GUID
#define SOAP_TYPE_hwa__GUID (429)
/* hwa:GUID */
class SOAP_CMAC hwa__GUID
{
public:
	std::vector<unsigned char >GUIDbyte;	/* sequence of 16 to 16 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_hwa__GUID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__GUID() : soap(NULL) { }
	virtual ~hwa__GUID() { }
};
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREBASEBOARD
#define SOAP_TYPE_hwa__PT_USCOREBASEBOARD (430)
/* hwa:PT_BASEBOARD */
class SOAP_CMAC hwa__PT_USCOREBASEBOARD
{
public:
	unsigned int StructureVersion;	/* required element of type xsd:unsignedInt */
	std::vector<unsigned char >Manufacturer;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >Product;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >Version;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >SerialNumber;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >AssetTag;	/* sequence of 65 to 65 elements */
	unsigned char Replaceable;	/* required element of type xsd:unsignedByte */
	std::vector<unsigned char >Padding;	/* sequence of 2 to 2 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_hwa__PT_USCOREBASEBOARD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__PT_USCOREBASEBOARD() : soap(NULL) { }
	virtual ~hwa__PT_USCOREBASEBOARD() { }
};
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREPROCESSOR
#define SOAP_TYPE_hwa__PT_USCOREPROCESSOR (431)
/* hwa:PT_PROCESSOR */
class SOAP_CMAC hwa__PT_USCOREPROCESSOR
{
public:
	unsigned int StructureVersion;	/* required element of type xsd:unsignedInt */
	std::vector<unsigned int >ID;	/* sequence of 2 to 2 elements */
	unsigned short MaxSocketSpeed;	/* required element of type xsd:unsignedShort */
	unsigned short CurrentSpeed;	/* required element of type xsd:unsignedShort */
	unsigned char Status;	/* required element of type hwa:PT_PROCESSOR_STATUS */
	unsigned char Type;	/* required element of type hwa:PT_PROCESSOR_TYPE */
	unsigned char Family;	/* required element of type hwa:PT_PROCESSOR_FAMILY */
	unsigned char UpgradeInformation;	/* required element of type hwa:PT_PROCESSOR_UPGRADE */
	unsigned char SocketPopluated;	/* required element of type xsd:unsignedByte */
	std::vector<unsigned char >SocketDesignation;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >Manufacturer;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >Version;	/* sequence of 65 to 65 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_hwa__PT_USCOREPROCESSOR */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__PT_USCOREPROCESSOR() : soap(NULL) { }
	virtual ~hwa__PT_USCOREPROCESSOR() { }
};
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREMEMORY_USCOREMODULE
#define SOAP_TYPE_hwa__PT_USCOREMEMORY_USCOREMODULE (432)
/* hwa:PT_MEMORY_MODULE */
class SOAP_CMAC hwa__PT_USCOREMEMORY_USCOREMODULE
{
public:
	unsigned int StructureVersion;	/* required element of type xsd:unsignedInt */
	unsigned short Size;	/* required element of type xsd:unsignedShort */
	unsigned char FormFactor;	/* required element of type hwa:PT_MEMORY_FORM_FACTOR */
	unsigned char Type;	/* required element of type hwa:PT_MEMORY_TYPE */
	unsigned short TypeDetail;	/* required element of type hwa:PT_MEMORY_TYPE_DETAIL */
	unsigned short Speed;	/* required element of type xsd:unsignedShort */
	std::vector<unsigned char >Manufacturer;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >SerialNumber;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >AssetTag;	/* sequence of 65 to 65 elements */
	std::vector<unsigned char >PartNumber;	/* sequence of 65 to 65 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_hwa__PT_USCOREMEMORY_USCOREMODULE */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__PT_USCOREMEMORY_USCOREMODULE() : soap(NULL) { }
	virtual ~hwa__PT_USCOREMEMORY_USCOREMODULE() { }
};
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREFRU
#define SOAP_TYPE_hwa__PT_USCOREFRU (433)
/* hwa:PT_FRU */
class SOAP_CMAC hwa__PT_USCOREFRU
{
public:
	unsigned int StructureVersion;	/* required element of type xsd:unsignedInt */
	unsigned short VendorID;	/* required element of type xsd:unsignedShort */
	unsigned short DeviceID;	/* required element of type xsd:unsignedShort */
	unsigned char RevisionID;	/* required element of type xsd:unsignedByte */
	unsigned char ProgIf;	/* required element of type xsd:unsignedByte */
	unsigned char Subclass;	/* required element of type xsd:unsignedByte */
	unsigned char BaseClass;	/* required element of type xsd:unsignedByte */
	unsigned short SubvendorID;	/* required element of type xsd:unsignedShort */
	unsigned short SubsystemID;	/* required element of type xsd:unsignedShort */
	unsigned short DeviceLocation;	/* required element of type xsd:unsignedShort */
	std::vector<unsigned char >Padding;	/* sequence of 2 to 2 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_hwa__PT_USCOREFRU */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__PT_USCOREFRU() : soap(NULL) { }
	virtual ~hwa__PT_USCOREFRU() { }
};
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREMEDIA_USCOREDEVICE
#define SOAP_TYPE_hwa__PT_USCOREMEDIA_USCOREDEVICE (434)
/* hwa:PT_MEDIA_DEVICE */
class SOAP_CMAC hwa__PT_USCOREMEDIA_USCOREDEVICE
{
public:
	unsigned int StructureVersion;	/* required element of type xsd:unsignedInt */
	std::vector<unsigned char >ModelNumber;	/* sequence of 40 to 40 elements */
	std::vector<unsigned char >SerialNumber;	/* sequence of 20 to 20 elements */
	std::vector<unsigned short >Capabilities;	/* sequence of 3 to 3 elements */
	std::vector<unsigned int >MaxMediaSize;	/* sequence of 2 to 2 elements */
	std::vector<unsigned char >Padding;	/* sequence of 2 to 2 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_hwa__PT_USCOREMEDIA_USCOREDEVICE */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         hwa__PT_USCOREMEDIA_USCOREDEVICE() : soap(NULL) { }
	virtual ~hwa__PT_USCOREMEDIA_USCOREDEVICE() { }
};
#endif

#ifndef SOAP_TYPE__hwa__EnumerateAssetTypes
#define SOAP_TYPE__hwa__EnumerateAssetTypes (435)
/* hwa:EnumerateAssetTypes */
class SOAP_CMAC _hwa__EnumerateAssetTypes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE__hwa__EnumerateAssetTypes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _hwa__EnumerateAssetTypes() : soap(NULL) { }
	virtual ~_hwa__EnumerateAssetTypes() { }
};
#endif

#ifndef SOAP_TYPE__hwa__EnumerateAssetTypesResponse
#define SOAP_TYPE__hwa__EnumerateAssetTypesResponse (436)
/* hwa:EnumerateAssetTypesResponse */
class SOAP_CMAC _hwa__EnumerateAssetTypesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type hwa:PT_STATUS */
	unsigned int Count;	/* required element of type xsd:unsignedInt */
	hwa__AssetTypeArrayType *AssetTypes;	/* required element of type hwa:AssetTypeArrayType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE__hwa__EnumerateAssetTypesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _hwa__EnumerateAssetTypesResponse() : AssetTypes(NULL), soap(NULL) { }
	virtual ~_hwa__EnumerateAssetTypesResponse() { }
};
#endif

#ifndef SOAP_TYPE__hwa__GetAssetData
#define SOAP_TYPE__hwa__GetAssetData (437)
/* hwa:GetAssetData */
class SOAP_CMAC _hwa__GetAssetData
{
public:
	enum hwa__AssetTypeType AssetType;	/* required element of type hwa:AssetTypeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE__hwa__GetAssetData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _hwa__GetAssetData() : soap(NULL) { }
	virtual ~_hwa__GetAssetData() { }
};
#endif

#ifndef SOAP_TYPE__hwa__GetAssetDataResponse
#define SOAP_TYPE__hwa__GetAssetDataResponse (438)
/* hwa:GetAssetDataResponse */
class SOAP_CMAC _hwa__GetAssetDataResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type hwa:PT_STATUS */
	unsigned int Count;	/* required element of type xsd:unsignedInt */
	hwa__AssetDataArrayType *AssetData;	/* required element of type hwa:AssetDataArrayType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE__hwa__GetAssetDataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _hwa__GetAssetDataResponse() : AssetData(NULL), soap(NULL) { }
	virtual ~_hwa__GetAssetDataResponse() { }
};
#endif

#ifndef SOAP_TYPE_apr__GUID
#define SOAP_TYPE_apr__GUID (439)
/* apr:GUID */
class SOAP_CMAC apr__GUID
{
public:
	std::vector<unsigned char >Byte;	/* sequence of 16 to 16 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_apr__GUID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         apr__GUID() : soap(NULL) { }
	virtual ~apr__GUID() { }
};
#endif

#ifndef SOAP_TYPE_apr__ConsoleWatchdogEntryType
#define SOAP_TYPE_apr__ConsoleWatchdogEntryType (440)
/* apr:ConsoleWatchdogEntryType */
class SOAP_CMAC apr__ConsoleWatchdogEntryType
{
public:
	apr__GUID *AgentID;	/* required element of type apr:GUID */
	char *AgentDescription;	/* optional element of type xsd:anyType */
	unsigned short AgentHeartbeatTime;	/* required element of type xsd:unsignedShort */
	unsigned short AgentStartupTime;	/* required element of type xsd:unsignedShort */
	unsigned int NumActions;	/* required element of type xsd:unsignedInt */
	unsigned char State;	/* required element of type apr:WatchdogState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_apr__ConsoleWatchdogEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         apr__ConsoleWatchdogEntryType() : AgentID(NULL), AgentDescription(NULL), soap(NULL) { }
	virtual ~apr__ConsoleWatchdogEntryType() { }
};
#endif

#ifndef SOAP_TYPE_apr__ConsoleWatchdogActionType
#define SOAP_TYPE_apr__ConsoleWatchdogActionType (441)
/* apr:ConsoleWatchdogActionType */
class SOAP_CMAC apr__ConsoleWatchdogActionType
{
public:
	unsigned char OldState;	/* required element of type apr:WatchdogState */
	unsigned char NewState;	/* required element of type apr:WatchdogState */
	bool ActionEventOnTransition;	/* required element of type xsd:boolean */
	enum apr__CbActionType *ActionCb;	/* optional element of type apr:CbActionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_apr__ConsoleWatchdogActionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         apr__ConsoleWatchdogActionType() : ActionCb(NULL), soap(NULL) { }
	virtual ~apr__ConsoleWatchdogActionType() { }
};
#endif

#ifndef SOAP_TYPE_apr__CircuitBreakerHardwarePolicyType
#define SOAP_TYPE_apr__CircuitBreakerHardwarePolicyType (442)
/* apr:CircuitBreakerHardwarePolicyType */
class SOAP_CMAC apr__CircuitBreakerHardwarePolicyType
{
public:
	unsigned int HardwareID;	/* required element of type xsd:unsignedInt */
	unsigned int PolicyCreationHandle;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_apr__CircuitBreakerHardwarePolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         apr__CircuitBreakerHardwarePolicyType() : soap(NULL) { }
	virtual ~apr__CircuitBreakerHardwarePolicyType() { }
};
#endif

#ifndef SOAP_TYPE_apr__AgentPresenceCapabilitiesType
#define SOAP_TYPE_apr__AgentPresenceCapabilitiesType (443)
/* apr:AgentPresenceCapabilitiesType */
class SOAP_CMAC apr__AgentPresenceCapabilitiesType
{
public:
	unsigned int MaxTotalAgents;	/* required element of type xsd:unsignedInt */
	unsigned int MaxTotalActions;	/* required element of type xsd:unsignedInt */
	unsigned int MinGuaranteedActionListSize;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_apr__AgentPresenceCapabilitiesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         apr__AgentPresenceCapabilitiesType() : soap(NULL) { }
	virtual ~apr__AgentPresenceCapabilitiesType() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogCreate
#define SOAP_TYPE__apr__ConsoleWatchdogCreate (444)
/* apr:ConsoleWatchdogCreate */
class SOAP_CMAC _apr__ConsoleWatchdogCreate
{
public:
	apr__GUID *AgentID;	/* required element of type apr:GUID */
	char *AgentDescription;	/* optional element of type xsd:anyType */
	unsigned short AgentHeartbeatTime;	/* required element of type xsd:unsignedShort */
	unsigned short AgentStartupTime;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogCreate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogCreate() : AgentID(NULL), AgentDescription(NULL), soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogCreate() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogCreateResponse
#define SOAP_TYPE__apr__ConsoleWatchdogCreateResponse (445)
/* apr:ConsoleWatchdogCreateResponse */
class SOAP_CMAC _apr__ConsoleWatchdogCreateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogCreateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogCreateResponse() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogCreateResponse() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogDelete
#define SOAP_TYPE__apr__ConsoleWatchdogDelete (446)
/* apr:ConsoleWatchdogDelete */
class SOAP_CMAC _apr__ConsoleWatchdogDelete
{
public:
	apr__GUID *AgentID;	/* required element of type apr:GUID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogDelete */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogDelete() : AgentID(NULL), soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogDelete() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogDeleteResponse
#define SOAP_TYPE__apr__ConsoleWatchdogDeleteResponse (447)
/* apr:ConsoleWatchdogDeleteResponse */
class SOAP_CMAC _apr__ConsoleWatchdogDeleteResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogDeleteResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogDeleteResponse() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogDeleteResponse() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogEnumerate
#define SOAP_TYPE__apr__ConsoleWatchdogEnumerate (448)
/* apr:ConsoleWatchdogEnumerate */
class SOAP_CMAC _apr__ConsoleWatchdogEnumerate
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogEnumerate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogEnumerate() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogEnumerate() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogEnumerateResponse
#define SOAP_TYPE__apr__ConsoleWatchdogEnumerateResponse (449)
/* apr:ConsoleWatchdogEnumerateResponse */
class SOAP_CMAC _apr__ConsoleWatchdogEnumerateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	std::vector<apr__ConsoleWatchdogEntryType * >ConsoleWatchdogEntries;	/* optional element of type apr:ConsoleWatchdogEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogEnumerateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogEnumerateResponse() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogEnumerateResponse() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogSetActions
#define SOAP_TYPE__apr__ConsoleWatchdogSetActions (450)
/* apr:ConsoleWatchdogSetActions */
class SOAP_CMAC _apr__ConsoleWatchdogSetActions
{
public:
	apr__GUID *AgentID;	/* required element of type apr:GUID */
	std::vector<apr__ConsoleWatchdogActionType * >ConsoleWatchdogActions;	/* required element of type apr:ConsoleWatchdogActionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogSetActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogSetActions() : AgentID(NULL), soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogSetActions() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogSetActionsResponse
#define SOAP_TYPE__apr__ConsoleWatchdogSetActionsResponse (451)
/* apr:ConsoleWatchdogSetActionsResponse */
class SOAP_CMAC _apr__ConsoleWatchdogSetActionsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogSetActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogSetActionsResponse() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogSetActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogGetActions
#define SOAP_TYPE__apr__ConsoleWatchdogGetActions (452)
/* apr:ConsoleWatchdogGetActions */
class SOAP_CMAC _apr__ConsoleWatchdogGetActions
{
public:
	apr__GUID *AgentID;	/* required element of type apr:GUID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogGetActions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogGetActions() : AgentID(NULL), soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogGetActions() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogGetActionsResponse
#define SOAP_TYPE__apr__ConsoleWatchdogGetActionsResponse (453)
/* apr:ConsoleWatchdogGetActionsResponse */
class SOAP_CMAC _apr__ConsoleWatchdogGetActionsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	std::vector<apr__ConsoleWatchdogActionType * >ConsoleWatchdogActions;	/* optional element of type apr:ConsoleWatchdogActionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogGetActionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogGetActionsResponse() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogGetActionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogSetCbPolicy
#define SOAP_TYPE__apr__ConsoleWatchdogSetCbPolicy (454)
/* apr:ConsoleWatchdogSetCbPolicy */
class SOAP_CMAC _apr__ConsoleWatchdogSetCbPolicy
{
public:
	std::vector<apr__CircuitBreakerHardwarePolicyType * >HwPolicies;	/* optional element of type apr:CircuitBreakerHardwarePolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogSetCbPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogSetCbPolicy() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogSetCbPolicy() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogSetCbPolicyResponse
#define SOAP_TYPE__apr__ConsoleWatchdogSetCbPolicyResponse (455)
/* apr:ConsoleWatchdogSetCbPolicyResponse */
class SOAP_CMAC _apr__ConsoleWatchdogSetCbPolicyResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogSetCbPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogSetCbPolicyResponse() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogSetCbPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogGetCbPolicy
#define SOAP_TYPE__apr__ConsoleWatchdogGetCbPolicy (456)
/* apr:ConsoleWatchdogGetCbPolicy */
class SOAP_CMAC _apr__ConsoleWatchdogGetCbPolicy
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogGetCbPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogGetCbPolicy() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogGetCbPolicy() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogGetCbPolicyResponse
#define SOAP_TYPE__apr__ConsoleWatchdogGetCbPolicyResponse (457)
/* apr:ConsoleWatchdogGetCbPolicyResponse */
class SOAP_CMAC _apr__ConsoleWatchdogGetCbPolicyResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	std::vector<apr__CircuitBreakerHardwarePolicyType * >HwPolicies;	/* optional element of type apr:CircuitBreakerHardwarePolicyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogGetCbPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogGetCbPolicyResponse() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogGetCbPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogQueryCapabilities
#define SOAP_TYPE__apr__ConsoleWatchdogQueryCapabilities (458)
/* apr:ConsoleWatchdogQueryCapabilities */
class SOAP_CMAC _apr__ConsoleWatchdogQueryCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogQueryCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogQueryCapabilities() : soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogQueryCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__apr__ConsoleWatchdogQueryCapabilitiesResponse
#define SOAP_TYPE__apr__ConsoleWatchdogQueryCapabilitiesResponse (459)
/* apr:ConsoleWatchdogQueryCapabilitiesResponse */
class SOAP_CMAC _apr__ConsoleWatchdogQueryCapabilitiesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apr:PT_STATUS */
	apr__AgentPresenceCapabilitiesType *Capabilities;	/* required element of type apr:AgentPresenceCapabilitiesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE__apr__ConsoleWatchdogQueryCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apr__ConsoleWatchdogQueryCapabilitiesResponse() : Capabilities(NULL), soap(NULL) { }
	virtual ~_apr__ConsoleWatchdogQueryCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_apl__GUID
#define SOAP_TYPE_apl__GUID (460)
/* apl:GUID */
class SOAP_CMAC apl__GUID
{
public:
	std::vector<unsigned char >Byte;	/* sequence of 16 to 16 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_apl__GUID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         apl__GUID() : soap(NULL) { }
	virtual ~apl__GUID() { }
};
#endif

#ifndef SOAP_TYPE__apl__AgentWatchdogRegister
#define SOAP_TYPE__apl__AgentWatchdogRegister (461)
/* apl:AgentWatchdogRegister */
class SOAP_CMAC _apl__AgentWatchdogRegister
{
public:
	apl__GUID *AgentID;	/* required element of type apl:GUID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE__apl__AgentWatchdogRegister */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apl__AgentWatchdogRegister() : AgentID(NULL), soap(NULL) { }
	virtual ~_apl__AgentWatchdogRegister() { }
};
#endif

#ifndef SOAP_TYPE__apl__AgentWatchdogRegisterResponse
#define SOAP_TYPE__apl__AgentWatchdogRegisterResponse (462)
/* apl:AgentWatchdogRegisterResponse */
class SOAP_CMAC _apl__AgentWatchdogRegisterResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apl:PT_STATUS */
	unsigned int SessionSequenceNumber;	/* required element of type xsd:unsignedInt */
	unsigned short AgentHeartbeatTime;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE__apl__AgentWatchdogRegisterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apl__AgentWatchdogRegisterResponse() : soap(NULL) { }
	virtual ~_apl__AgentWatchdogRegisterResponse() { }
};
#endif

#ifndef SOAP_TYPE__apl__AgentWatchdogHeartbeat
#define SOAP_TYPE__apl__AgentWatchdogHeartbeat (463)
/* apl:AgentWatchdogHeartbeat */
class SOAP_CMAC _apl__AgentWatchdogHeartbeat
{
public:
	apl__GUID *AgentID;	/* required element of type apl:GUID */
	unsigned int SessionSequenceNumber;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE__apl__AgentWatchdogHeartbeat */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apl__AgentWatchdogHeartbeat() : AgentID(NULL), soap(NULL) { }
	virtual ~_apl__AgentWatchdogHeartbeat() { }
};
#endif

#ifndef SOAP_TYPE__apl__AgentWatchdogHeartbeatResponse
#define SOAP_TYPE__apl__AgentWatchdogHeartbeatResponse (464)
/* apl:AgentWatchdogHeartbeatResponse */
class SOAP_CMAC _apl__AgentWatchdogHeartbeatResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apl:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE__apl__AgentWatchdogHeartbeatResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apl__AgentWatchdogHeartbeatResponse() : soap(NULL) { }
	virtual ~_apl__AgentWatchdogHeartbeatResponse() { }
};
#endif

#ifndef SOAP_TYPE__apl__AgentWatchdogShutdown
#define SOAP_TYPE__apl__AgentWatchdogShutdown (465)
/* apl:AgentWatchdogShutdown */
class SOAP_CMAC _apl__AgentWatchdogShutdown
{
public:
	apl__GUID *AgentID;	/* required element of type apl:GUID */
	unsigned int SessionSequenceNumber;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE__apl__AgentWatchdogShutdown */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apl__AgentWatchdogShutdown() : AgentID(NULL), soap(NULL) { }
	virtual ~_apl__AgentWatchdogShutdown() { }
};
#endif

#ifndef SOAP_TYPE__apl__AgentWatchdogShutdownResponse
#define SOAP_TYPE__apl__AgentWatchdogShutdownResponse (466)
/* apl:AgentWatchdogShutdownResponse */
class SOAP_CMAC _apl__AgentWatchdogShutdownResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type apl:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE__apl__AgentWatchdogShutdownResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _apl__AgentWatchdogShutdownResponse() : soap(NULL) { }
	virtual ~_apl__AgentWatchdogShutdownResponse() { }
};
#endif

#ifndef SOAP_TYPE_idr__IderSessionLogEntryType
#define SOAP_TYPE_idr__IderSessionLogEntryType (467)
/* idr:IderSessionLogEntryType */
class SOAP_CMAC idr__IderSessionLogEntryType
{
public:
	unsigned int ConsoleAddress;	/* required element of type idr:IPv4AddressType */
	unsigned short Port;	/* required element of type xsd:unsignedShort */
	unsigned int TimeStamp;	/* required element of type idr:TimeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_idr__IderSessionLogEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         idr__IderSessionLogEntryType() : soap(NULL) { }
	virtual ~idr__IderSessionLogEntryType() { }
};
#endif

#ifndef SOAP_TYPE_idr__FirmwareVersionType
#define SOAP_TYPE_idr__FirmwareVersionType (468)
/* idr:FirmwareVersionType */
class SOAP_CMAC idr__FirmwareVersionType
{
public:
	std::string Description;	/* required element of type xsd:string */
	std::string Version;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_idr__FirmwareVersionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         idr__FirmwareVersionType() : soap(NULL) { }
	virtual ~idr__FirmwareVersionType() { }
};
#endif

#ifndef SOAP_TYPE__idr__SetRedirectionListenerState
#define SOAP_TYPE__idr__SetRedirectionListenerState (469)
/* idr:SetRedirectionListenerState */
class SOAP_CMAC _idr__SetRedirectionListenerState
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE__idr__SetRedirectionListenerState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _idr__SetRedirectionListenerState() : soap(NULL) { }
	virtual ~_idr__SetRedirectionListenerState() { }
};
#endif

#ifndef SOAP_TYPE__idr__SetRedirectionListenerStateResponse
#define SOAP_TYPE__idr__SetRedirectionListenerStateResponse (470)
/* idr:SetRedirectionListenerStateResponse */
class SOAP_CMAC _idr__SetRedirectionListenerStateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type idr:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE__idr__SetRedirectionListenerStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _idr__SetRedirectionListenerStateResponse() : soap(NULL) { }
	virtual ~_idr__SetRedirectionListenerStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__idr__GetRedirectionListenerState
#define SOAP_TYPE__idr__GetRedirectionListenerState (471)
/* idr:GetRedirectionListenerState */
class SOAP_CMAC _idr__GetRedirectionListenerState
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE__idr__GetRedirectionListenerState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _idr__GetRedirectionListenerState() : soap(NULL) { }
	virtual ~_idr__GetRedirectionListenerState() { }
};
#endif

#ifndef SOAP_TYPE__idr__GetRedirectionListenerStateResponse
#define SOAP_TYPE__idr__GetRedirectionListenerStateResponse (472)
/* idr:GetRedirectionListenerStateResponse */
class SOAP_CMAC _idr__GetRedirectionListenerStateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type idr:PT_STATUS */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE__idr__GetRedirectionListenerStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _idr__GetRedirectionListenerStateResponse() : soap(NULL) { }
	virtual ~_idr__GetRedirectionListenerStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__idr__GetIderSessionLog
#define SOAP_TYPE__idr__GetIderSessionLog (473)
/* idr:GetIderSessionLog */
class SOAP_CMAC _idr__GetIderSessionLog
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE__idr__GetIderSessionLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _idr__GetIderSessionLog() : soap(NULL) { }
	virtual ~_idr__GetIderSessionLog() { }
};
#endif

#ifndef SOAP_TYPE__idr__GetIderSessionLogResponse
#define SOAP_TYPE__idr__GetIderSessionLogResponse (474)
/* idr:GetIderSessionLogResponse */
class SOAP_CMAC _idr__GetIderSessionLogResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type idr:PT_STATUS */
	std::vector<idr__IderSessionLogEntryType * >LogData;	/* optional element of type idr:IderSessionLogEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE__idr__GetIderSessionLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _idr__GetIderSessionLogResponse() : soap(NULL) { }
	virtual ~_idr__GetIderSessionLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__tim__GetLowAccuracyTimeSynch
#define SOAP_TYPE__tim__GetLowAccuracyTimeSynch (475)
/* tim:GetLowAccuracyTimeSynch */
class SOAP_CMAC _tim__GetLowAccuracyTimeSynch
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE__tim__GetLowAccuracyTimeSynch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tim__GetLowAccuracyTimeSynch() : soap(NULL) { }
	virtual ~_tim__GetLowAccuracyTimeSynch() { }
};
#endif

#ifndef SOAP_TYPE__tim__GetLowAccuracyTimeSynchResponse
#define SOAP_TYPE__tim__GetLowAccuracyTimeSynchResponse (476)
/* tim:GetLowAccuracyTimeSynchResponse */
class SOAP_CMAC _tim__GetLowAccuracyTimeSynchResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type tim:PT_STATUS */
	unsigned int Ta0;	/* required element of type tim:TimeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE__tim__GetLowAccuracyTimeSynchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tim__GetLowAccuracyTimeSynchResponse() : soap(NULL) { }
	virtual ~_tim__GetLowAccuracyTimeSynchResponse() { }
};
#endif

#ifndef SOAP_TYPE__tim__SetHighAccuracyTimeSynch
#define SOAP_TYPE__tim__SetHighAccuracyTimeSynch (477)
/* tim:SetHighAccuracyTimeSynch */
class SOAP_CMAC _tim__SetHighAccuracyTimeSynch
{
public:
	unsigned int Ta0;	/* required element of type tim:TimeType */
	unsigned int Tm1;	/* required element of type tim:TimeType */
	unsigned int Tm2;	/* required element of type tim:TimeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE__tim__SetHighAccuracyTimeSynch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tim__SetHighAccuracyTimeSynch() : soap(NULL) { }
	virtual ~_tim__SetHighAccuracyTimeSynch() { }
};
#endif

#ifndef SOAP_TYPE__tim__SetHighAccuracyTimeSynchResponse
#define SOAP_TYPE__tim__SetHighAccuracyTimeSynchResponse (478)
/* tim:SetHighAccuracyTimeSynchResponse */
class SOAP_CMAC _tim__SetHighAccuracyTimeSynchResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type tim:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE__tim__SetHighAccuracyTimeSynchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tim__SetHighAccuracyTimeSynchResponse() : soap(NULL) { }
	virtual ~_tim__SetHighAccuracyTimeSynchResponse() { }
};
#endif

#ifndef SOAP_TYPE__str__ExecuteStorageOperation
#define SOAP_TYPE__str__ExecuteStorageOperation (479)
/* str:ExecuteStorageOperation */
class SOAP_CMAC _str__ExecuteStorageOperation
{
public:
	xsd__base64Binary Request;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE__str__ExecuteStorageOperation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _str__ExecuteStorageOperation() : soap(NULL) { }
	virtual ~_str__ExecuteStorageOperation() { }
};
#endif

#ifndef SOAP_TYPE__str__ExecuteStorageOperationResponse
#define SOAP_TYPE__str__ExecuteStorageOperationResponse (480)
/* str:ExecuteStorageOperationResponse */
class SOAP_CMAC _str__ExecuteStorageOperationResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type str:PT_STATUS */
	xsd__base64Binary Response;	/* required element of type xsd:base64Binary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE__str__ExecuteStorageOperationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _str__ExecuteStorageOperationResponse() : soap(NULL) { }
	virtual ~_str__ExecuteStorageOperationResponse() { }
};
#endif

#ifndef SOAP_TYPE_inf__IderSessionLogEntryType
#define SOAP_TYPE_inf__IderSessionLogEntryType (481)
/* inf:IderSessionLogEntryType */
class SOAP_CMAC inf__IderSessionLogEntryType
{
public:
	unsigned int ConsoleAddress;	/* required element of type inf:IPv4AddressType */
	unsigned short Port;	/* required element of type xsd:unsignedShort */
	unsigned int TimeStamp;	/* required element of type inf:TimeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_inf__IderSessionLogEntryType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         inf__IderSessionLogEntryType() : soap(NULL) { }
	virtual ~inf__IderSessionLogEntryType() { }
};
#endif

#ifndef SOAP_TYPE_inf__FirmwareVersionType
#define SOAP_TYPE_inf__FirmwareVersionType (482)
/* inf:FirmwareVersionType */
class SOAP_CMAC inf__FirmwareVersionType
{
public:
	std::string Description;	/* required element of type xsd:string */
	std::string Version;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_inf__FirmwareVersionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         inf__FirmwareVersionType() : soap(NULL) { }
	virtual ~inf__FirmwareVersionType() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetCoreVersion
#define SOAP_TYPE__inf__GetCoreVersion (483)
/* inf:GetCoreVersion */
class SOAP_CMAC _inf__GetCoreVersion
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE__inf__GetCoreVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetCoreVersion() : soap(NULL) { }
	virtual ~_inf__GetCoreVersion() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetCoreVersionResponse
#define SOAP_TYPE__inf__GetCoreVersionResponse (484)
/* inf:GetCoreVersionResponse */
class SOAP_CMAC _inf__GetCoreVersionResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	std::string Version;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE__inf__GetCoreVersionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetCoreVersionResponse() : soap(NULL) { }
	virtual ~_inf__GetCoreVersionResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetCodeVersions
#define SOAP_TYPE__inf__GetCodeVersions (485)
/* inf:GetCodeVersions */
class SOAP_CMAC _inf__GetCodeVersions
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE__inf__GetCodeVersions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetCodeVersions() : soap(NULL) { }
	virtual ~_inf__GetCodeVersions() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetCodeVersionsResponse
#define SOAP_TYPE__inf__GetCodeVersionsResponse (486)
/* inf:GetCodeVersionsResponse */
class SOAP_CMAC _inf__GetCodeVersionsResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	std::string BiosVersion;	/* required element of type xsd:string */
	std::vector<inf__FirmwareVersionType * >Versions;	/* optional element of type inf:FirmwareVersionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE__inf__GetCodeVersionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetCodeVersionsResponse() : soap(NULL) { }
	virtual ~_inf__GetCodeVersionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetProvisioningMode
#define SOAP_TYPE__inf__GetProvisioningMode (487)
/* inf:GetProvisioningMode */
class SOAP_CMAC _inf__GetProvisioningMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE__inf__GetProvisioningMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetProvisioningMode() : soap(NULL) { }
	virtual ~_inf__GetProvisioningMode() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetProvisioningModeResponse
#define SOAP_TYPE__inf__GetProvisioningModeResponse (488)
/* inf:GetProvisioningModeResponse */
class SOAP_CMAC _inf__GetProvisioningModeResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	enum inf__ProvisioningModeType ProvisioningMode;	/* required element of type inf:ProvisioningModeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE__inf__GetProvisioningModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetProvisioningModeResponse() : soap(NULL) { }
	virtual ~_inf__GetProvisioningModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetProvisioningState
#define SOAP_TYPE__inf__GetProvisioningState (489)
/* inf:GetProvisioningState */
class SOAP_CMAC _inf__GetProvisioningState
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE__inf__GetProvisioningState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetProvisioningState() : soap(NULL) { }
	virtual ~_inf__GetProvisioningState() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetProvisioningStateResponse
#define SOAP_TYPE__inf__GetProvisioningStateResponse (490)
/* inf:GetProvisioningStateResponse */
class SOAP_CMAC _inf__GetProvisioningStateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	enum inf__ProvisioningStateType ProvisioningState;	/* required element of type inf:ProvisioningStateType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE__inf__GetProvisioningStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetProvisioningStateResponse() : soap(NULL) { }
	virtual ~_inf__GetProvisioningStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetVlanParameters
#define SOAP_TYPE__inf__GetVlanParameters (491)
/* inf:GetVlanParameters */
class SOAP_CMAC _inf__GetVlanParameters
{
public:
	unsigned int *InterfaceHandle;	/* optional element of type cmn:InterfaceHandleType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE__inf__GetVlanParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetVlanParameters() : InterfaceHandle(NULL), soap(NULL) { }
	virtual ~_inf__GetVlanParameters() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetVlanParametersResponse
#define SOAP_TYPE__inf__GetVlanParametersResponse (492)
/* inf:GetVlanParametersResponse */
class SOAP_CMAC _inf__GetVlanParametersResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	bool VlanMode;	/* required element of type xsd:boolean */
	unsigned short VlanTag;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE__inf__GetVlanParametersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetVlanParametersResponse() : soap(NULL) { }
	virtual ~_inf__GetVlanParametersResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetHostName
#define SOAP_TYPE__inf__GetHostName (493)
/* inf:GetHostName */
class SOAP_CMAC _inf__GetHostName
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE__inf__GetHostName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetHostName() : soap(NULL) { }
	virtual ~_inf__GetHostName() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetHostNameResponse
#define SOAP_TYPE__inf__GetHostNameResponse (494)
/* inf:GetHostNameResponse */
class SOAP_CMAC _inf__GetHostNameResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	std::string HostName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE__inf__GetHostNameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetHostNameResponse() : soap(NULL) { }
	virtual ~_inf__GetHostNameResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetConfigServerInfo
#define SOAP_TYPE__inf__GetConfigServerInfo (495)
/* inf:GetConfigServerInfo */
class SOAP_CMAC _inf__GetConfigServerInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE__inf__GetConfigServerInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetConfigServerInfo() : soap(NULL) { }
	virtual ~_inf__GetConfigServerInfo() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetConfigServerInfoResponse
#define SOAP_TYPE__inf__GetConfigServerInfoResponse (496)
/* inf:GetConfigServerInfoResponse */
class SOAP_CMAC _inf__GetConfigServerInfoResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	unsigned int Ip;	/* required element of type inf:IPv4AddressType */
	unsigned short Port;	/* required element of type xsd:unsignedShort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE__inf__GetConfigServerInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetConfigServerInfoResponse() : soap(NULL) { }
	virtual ~_inf__GetConfigServerInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetAdminAclEntryStatus
#define SOAP_TYPE__inf__GetAdminAclEntryStatus (497)
/* inf:GetAdminAclEntryStatus */
class SOAP_CMAC _inf__GetAdminAclEntryStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE__inf__GetAdminAclEntryStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetAdminAclEntryStatus() : soap(NULL) { }
	virtual ~_inf__GetAdminAclEntryStatus() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetAdminAclEntryStatusResponse
#define SOAP_TYPE__inf__GetAdminAclEntryStatusResponse (498)
/* inf:GetAdminAclEntryStatusResponse */
class SOAP_CMAC _inf__GetAdminAclEntryStatusResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	bool IsDefault;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE__inf__GetAdminAclEntryStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetAdminAclEntryStatusResponse() : soap(NULL) { }
	virtual ~_inf__GetAdminAclEntryStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetAdminNetAclEntryStatus
#define SOAP_TYPE__inf__GetAdminNetAclEntryStatus (499)
/* inf:GetAdminNetAclEntryStatus */
class SOAP_CMAC _inf__GetAdminNetAclEntryStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE__inf__GetAdminNetAclEntryStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetAdminNetAclEntryStatus() : soap(NULL) { }
	virtual ~_inf__GetAdminNetAclEntryStatus() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetAdminNetAclEntryStatusResponse
#define SOAP_TYPE__inf__GetAdminNetAclEntryStatusResponse (500)
/* inf:GetAdminNetAclEntryStatusResponse */
class SOAP_CMAC _inf__GetAdminNetAclEntryStatusResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	bool IsDefault;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE__inf__GetAdminNetAclEntryStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetAdminNetAclEntryStatusResponse() : soap(NULL) { }
	virtual ~_inf__GetAdminNetAclEntryStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetPasswordModel
#define SOAP_TYPE__inf__GetPasswordModel (501)
/* inf:GetPasswordModel */
class SOAP_CMAC _inf__GetPasswordModel
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE__inf__GetPasswordModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetPasswordModel() : soap(NULL) { }
	virtual ~_inf__GetPasswordModel() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetPasswordModelResponse
#define SOAP_TYPE__inf__GetPasswordModelResponse (502)
/* inf:GetPasswordModelResponse */
class SOAP_CMAC _inf__GetPasswordModelResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	enum inf__PasswordModelType PasswordModel;	/* required element of type inf:PasswordModelType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE__inf__GetPasswordModelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetPasswordModelResponse() : soap(NULL) { }
	virtual ~_inf__GetPasswordModelResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetEnabledInterfaces
#define SOAP_TYPE__inf__GetEnabledInterfaces (503)
/* inf:GetEnabledInterfaces */
class SOAP_CMAC _inf__GetEnabledInterfaces
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE__inf__GetEnabledInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetEnabledInterfaces() : soap(NULL) { }
	virtual ~_inf__GetEnabledInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetEnabledInterfacesResponse
#define SOAP_TYPE__inf__GetEnabledInterfacesResponse (504)
/* inf:GetEnabledInterfacesResponse */
class SOAP_CMAC _inf__GetEnabledInterfacesResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	std::vector<enum inf__EnabledInterfacesType >EnabledInterfaces;	/* optional element of type inf:EnabledInterfacesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE__inf__GetEnabledInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetEnabledInterfacesResponse() : soap(NULL) { }
	virtual ~_inf__GetEnabledInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetNetworkState
#define SOAP_TYPE__inf__GetNetworkState (505)
/* inf:GetNetworkState */
class SOAP_CMAC _inf__GetNetworkState
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE__inf__GetNetworkState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetNetworkState() : soap(NULL) { }
	virtual ~_inf__GetNetworkState() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetNetworkStateResponse
#define SOAP_TYPE__inf__GetNetworkStateResponse (506)
/* inf:GetNetworkStateResponse */
class SOAP_CMAC _inf__GetNetworkStateResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	bool IsEnabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE__inf__GetNetworkStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetNetworkStateResponse() : soap(NULL) { }
	virtual ~_inf__GetNetworkStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetSecurityParameters
#define SOAP_TYPE__inf__GetSecurityParameters (507)
/* inf:GetSecurityParameters */
class SOAP_CMAC _inf__GetSecurityParameters
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE__inf__GetSecurityParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetSecurityParameters() : soap(NULL) { }
	virtual ~_inf__GetSecurityParameters() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetSecurityParametersResponse
#define SOAP_TYPE__inf__GetSecurityParametersResponse (508)
/* inf:GetSecurityParametersResponse */
class SOAP_CMAC _inf__GetSecurityParametersResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	bool EnterpriseMode;	/* required element of type xsd:boolean */
	bool TlsEnabled;	/* required element of type xsd:boolean */
	bool HwCryptoEnabled;	/* required element of type xsd:boolean */
	enum inf__ProvisioningStateType ProvisioningState;	/* required element of type inf:ProvisioningStateType */
	bool NetworkInterfaceEnabled;	/* required element of type xsd:boolean */
	bool SOLEnabled;	/* required element of type xsd:boolean */
	bool IDEREnabled;	/* required element of type xsd:boolean */
	bool FWUpdateEnabled;	/* required element of type xsd:boolean */
	bool LinkIsUp;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE__inf__GetSecurityParametersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetSecurityParametersResponse() : soap(NULL) { }
	virtual ~_inf__GetSecurityParametersResponse() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetIderSessionLog
#define SOAP_TYPE__inf__GetIderSessionLog (509)
/* inf:GetIderSessionLog */
class SOAP_CMAC _inf__GetIderSessionLog
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE__inf__GetIderSessionLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetIderSessionLog() : soap(NULL) { }
	virtual ~_inf__GetIderSessionLog() { }
};
#endif

#ifndef SOAP_TYPE__inf__GetIderSessionLogResponse
#define SOAP_TYPE__inf__GetIderSessionLogResponse (510)
/* inf:GetIderSessionLogResponse */
class SOAP_CMAC _inf__GetIderSessionLogResponse
{
public:
	unsigned int StatusCode;	/* RPC return element */	/* required element of type inf:PT_STATUS */
	std::vector<inf__IderSessionLogEntryType * >LogData;	/* optional element of type inf:IderSessionLogEntryType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE__inf__GetIderSessionLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _inf__GetIderSessionLogResponse() : soap(NULL) { }
	virtual ~_inf__GetIderSessionLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__rci__GetRemoteControlCapabilities
#define SOAP_TYPE__rci__GetRemoteControlCapabilities (511)
/* rci:GetRemoteControlCapabilities */
class SOAP_CMAC _rci__GetRemoteControlCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE__rci__GetRemoteControlCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _rci__GetRemoteControlCapabilities() : soap(NULL) { }
	virtual ~_rci__GetRemoteControlCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__rci__GetRemoteControlCapabilitiesResponse
#define SOAP_TYPE__rci__GetRemoteControlCapabilitiesResponse (512)
/* rci:GetRemoteControlCapabilitiesResponse */
class SOAP_CMAC _rci__GetRemoteControlCapabilitiesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type rci:PT_STATUS */
	unsigned int IanaOemNumber;	/* required element of type xsd:unsignedInt */
	unsigned int OemDefinedCapabilities;	/* required element of type rci:OemDefinedCapabilitiesType */
	unsigned short SpecialCommandsSupported;	/* required element of type rci:SpecialCommandsSupportedType */
	unsigned char SystemCapabilitiesSupported;	/* required element of type rci:SystemCapabilitiesSupportedType */
	unsigned int SystemFirmwareCapabilities;	/* required element of type rci:SystemFirmwareCapabilitiesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE__rci__GetRemoteControlCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _rci__GetRemoteControlCapabilitiesResponse() : soap(NULL) { }
	virtual ~_rci__GetRemoteControlCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__rci__RemoteControl
#define SOAP_TYPE__rci__RemoteControl (513)
/* rci:RemoteControl */
class SOAP_CMAC _rci__RemoteControl
{
public:
	enum rci__RemoteControlCommandType Command;	/* required element of type rci:RemoteControlCommandType */
	unsigned int IanaOemNumber;	/* required element of type xsd:unsignedInt */
	enum rci__SpecialCommandType *SpecialCommand;	/* optional element of type rci:SpecialCommandType */
	unsigned short *SpecialCommandParameter;	/* optional element of type rci:SpecialCommandParameterType */
	unsigned short *BootOptions;	/* optional element of type rci:BootOptionsType */
	unsigned short *OEMparameters;	/* optional element of type rci:OemParametersType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE__rci__RemoteControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _rci__RemoteControl() : SpecialCommand(NULL), SpecialCommandParameter(NULL), BootOptions(NULL), OEMparameters(NULL), soap(NULL) { }
	virtual ~_rci__RemoteControl() { }
};
#endif

#ifndef SOAP_TYPE__rci__RemoteControlResponse
#define SOAP_TYPE__rci__RemoteControlResponse (514)
/* rci:RemoteControlResponse */
class SOAP_CMAC _rci__RemoteControlResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type rci:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE__rci__RemoteControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _rci__RemoteControlResponse() : soap(NULL) { }
	virtual ~_rci__RemoteControlResponse() { }
};
#endif

#ifndef SOAP_TYPE__rci__GetSystemPowerState
#define SOAP_TYPE__rci__GetSystemPowerState (515)
/* rci:GetSystemPowerState */
class SOAP_CMAC _rci__GetSystemPowerState
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE__rci__GetSystemPowerState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _rci__GetSystemPowerState() : soap(NULL) { }
	virtual ~_rci__GetSystemPowerState() { }
};
#endif

#ifndef SOAP_TYPE__rci__GetSystemPowerStateResponse
#define SOAP_TYPE__rci__GetSystemPowerStateResponse (516)
/* rci:GetSystemPowerStateResponse */
class SOAP_CMAC _rci__GetSystemPowerStateResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type rci:PT_STATUS */
	unsigned int SystemPowerState;	/* required element of type rci:SystemPowerStateType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE__rci__GetSystemPowerStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _rci__GetSystemPowerStateResponse() : soap(NULL) { }
	virtual ~_rci__GetSystemPowerStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_WEP64Type
#define SOAP_TYPE__wcxs__union_WEP64Type (840)
/* xsd:choice */
union _wcxs__union_WEP64Type
{
#define SOAP_UNION__wcxs__union_WEP64Type_PassPhrase	(1)
	std::string *PassPhrase;
#define SOAP_UNION__wcxs__union_WEP64Type_RawKey	(2)
	xsd__base64Binary *RawKey;
};
#endif

#ifndef SOAP_TYPE_wcxs__WEP64Type
#define SOAP_TYPE_wcxs__WEP64Type (517)
/* wcxs:WEP64Type */
class SOAP_CMAC wcxs__WEP64Type
{
public:
	int __union_WEP64Type;	/* union discriminant (of union defined below) */
	union _wcxs__union_WEP64Type union_WEP64Type;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_wcxs__WEP64Type */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__WEP64Type() : soap(NULL) { }
	virtual ~wcxs__WEP64Type() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_WEP128Type
#define SOAP_TYPE__wcxs__union_WEP128Type (843)
/* xsd:choice */
union _wcxs__union_WEP128Type
{
#define SOAP_UNION__wcxs__union_WEP128Type_PassPhrase	(1)
	std::string *PassPhrase;
#define SOAP_UNION__wcxs__union_WEP128Type_RawKey	(2)
	xsd__base64Binary *RawKey;
};
#endif

#ifndef SOAP_TYPE_wcxs__WEP128Type
#define SOAP_TYPE_wcxs__WEP128Type (518)
/* wcxs:WEP128Type */
class SOAP_CMAC wcxs__WEP128Type
{
public:
	int __union_WEP128Type;	/* union discriminant (of union defined below) */
	union _wcxs__union_WEP128Type union_WEP128Type;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_wcxs__WEP128Type */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__WEP128Type() : soap(NULL) { }
	virtual ~wcxs__WEP128Type() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_DataEncryptionWEPXType
#define SOAP_TYPE__wcxs__union_DataEncryptionWEPXType (846)
/* xsd:choice */
union _wcxs__union_DataEncryptionWEPXType
{
#define SOAP_UNION__wcxs__union_DataEncryptionWEPXType_WEP64	(1)
	wcxs__WEP64Type *WEP64;
#define SOAP_UNION__wcxs__union_DataEncryptionWEPXType_WEP128	(2)
	wcxs__WEP128Type *WEP128;
};
#endif

#ifndef SOAP_TYPE_wcxs__DataEncryptionWEPXType
#define SOAP_TYPE_wcxs__DataEncryptionWEPXType (519)
/* wcxs:DataEncryptionWEPXType */
class SOAP_CMAC wcxs__DataEncryptionWEPXType
{
public:
	enum wcxs__KeyIndexType KeyIndex;	/* required element of type wcxs:KeyIndexType */
	int __union_DataEncryptionWEPXType;	/* union discriminant (of union defined below) */
	union _wcxs__union_DataEncryptionWEPXType union_DataEncryptionWEPXType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_wcxs__DataEncryptionWEPXType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__DataEncryptionWEPXType() : soap(NULL) { }
	virtual ~wcxs__DataEncryptionWEPXType() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_DataEncryptionWEPType
#define SOAP_TYPE__wcxs__union_DataEncryptionWEPType (848)
/* xsd:choice */
union _wcxs__union_DataEncryptionWEPType
{
#define SOAP_UNION__wcxs__union_DataEncryptionWEPType_PassPhrase	(1)
	std::string *PassPhrase;
#define SOAP_UNION__wcxs__union_DataEncryptionWEPType_RawKey	(2)
	xsd__base64Binary *RawKey;
#define SOAP_UNION__wcxs__union_DataEncryptionWEPType_XProfile	(3)
	xcfg__XProfileType *XProfile;
};
#endif

#ifndef SOAP_TYPE_wcxs__DataEncryptionWEPType
#define SOAP_TYPE_wcxs__DataEncryptionWEPType (520)
/* wcxs:DataEncryptionWEPType */
class SOAP_CMAC wcxs__DataEncryptionWEPType
{
public:
	int __union_DataEncryptionWEPType;	/* union discriminant (of union defined below) */
	union _wcxs__union_DataEncryptionWEPType union_DataEncryptionWEPType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_wcxs__DataEncryptionWEPType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__DataEncryptionWEPType() : soap(NULL) { }
	virtual ~wcxs__DataEncryptionWEPType() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_DataEncryptionTKIPType
#define SOAP_TYPE__wcxs__union_DataEncryptionTKIPType (850)
/* xsd:choice */
union _wcxs__union_DataEncryptionTKIPType
{
#define SOAP_UNION__wcxs__union_DataEncryptionTKIPType_PassPhrase	(1)
	std::string *PassPhrase;
#define SOAP_UNION__wcxs__union_DataEncryptionTKIPType_RawKey	(2)
	xsd__base64Binary *RawKey;
#define SOAP_UNION__wcxs__union_DataEncryptionTKIPType_XProfile	(3)
	xcfg__XProfileType *XProfile;
};
#endif

#ifndef SOAP_TYPE_wcxs__DataEncryptionTKIPType
#define SOAP_TYPE_wcxs__DataEncryptionTKIPType (521)
/* wcxs:DataEncryptionTKIPType */
class SOAP_CMAC wcxs__DataEncryptionTKIPType
{
public:
	int __union_DataEncryptionTKIPType;	/* union discriminant (of union defined below) */
	union _wcxs__union_DataEncryptionTKIPType union_DataEncryptionTKIPType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_wcxs__DataEncryptionTKIPType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__DataEncryptionTKIPType() : soap(NULL) { }
	virtual ~wcxs__DataEncryptionTKIPType() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_DataEncryptionCCMPType
#define SOAP_TYPE__wcxs__union_DataEncryptionCCMPType (851)
/* xsd:choice */
union _wcxs__union_DataEncryptionCCMPType
{
#define SOAP_UNION__wcxs__union_DataEncryptionCCMPType_PassPhrase	(1)
	std::string *PassPhrase;
#define SOAP_UNION__wcxs__union_DataEncryptionCCMPType_RawKey	(2)
	xsd__base64Binary *RawKey;
#define SOAP_UNION__wcxs__union_DataEncryptionCCMPType_XProfile	(3)
	xcfg__XProfileType *XProfile;
};
#endif

#ifndef SOAP_TYPE_wcxs__DataEncryptionCCMPType
#define SOAP_TYPE_wcxs__DataEncryptionCCMPType (522)
/* wcxs:DataEncryptionCCMPType */
class SOAP_CMAC wcxs__DataEncryptionCCMPType
{
public:
	int __union_DataEncryptionCCMPType;	/* union discriminant (of union defined below) */
	union _wcxs__union_DataEncryptionCCMPType union_DataEncryptionCCMPType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_wcxs__DataEncryptionCCMPType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__DataEncryptionCCMPType() : soap(NULL) { }
	virtual ~wcxs__DataEncryptionCCMPType() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_ProfileSecuritySettingWPAType
#define SOAP_TYPE__wcxs__union_ProfileSecuritySettingWPAType (854)
/* xsd:choice */
union _wcxs__union_ProfileSecuritySettingWPAType
{
#define SOAP_UNION__wcxs__union_ProfileSecuritySettingWPAType_DataEncryptionTKIP	(1)
	wcxs__DataEncryptionTKIPType *DataEncryptionTKIP;
#define SOAP_UNION__wcxs__union_ProfileSecuritySettingWPAType_DataEncryptionCCMP	(2)
	wcxs__DataEncryptionCCMPType *DataEncryptionCCMP;
};
#endif

#ifndef SOAP_TYPE_wcxs__ProfileSecuritySettingWPAType
#define SOAP_TYPE_wcxs__ProfileSecuritySettingWPAType (523)
/* wcxs:ProfileSecuritySettingWPAType */
class SOAP_CMAC wcxs__ProfileSecuritySettingWPAType
{
public:
	int __union_ProfileSecuritySettingWPAType;	/* union discriminant (of union defined below) */
	union _wcxs__union_ProfileSecuritySettingWPAType union_ProfileSecuritySettingWPAType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_wcxs__ProfileSecuritySettingWPAType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__ProfileSecuritySettingWPAType() : soap(NULL) { }
	virtual ~wcxs__ProfileSecuritySettingWPAType() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_ProfileSecuritySettingRSNType
#define SOAP_TYPE__wcxs__union_ProfileSecuritySettingRSNType (855)
/* xsd:choice */
union _wcxs__union_ProfileSecuritySettingRSNType
{
#define SOAP_UNION__wcxs__union_ProfileSecuritySettingRSNType_DataEncryptionTKIP	(1)
	wcxs__DataEncryptionTKIPType *DataEncryptionTKIP;
#define SOAP_UNION__wcxs__union_ProfileSecuritySettingRSNType_DataEncryptionCCMP	(2)
	wcxs__DataEncryptionCCMPType *DataEncryptionCCMP;
};
#endif

#ifndef SOAP_TYPE_wcxs__ProfileSecuritySettingRSNType
#define SOAP_TYPE_wcxs__ProfileSecuritySettingRSNType (524)
/* wcxs:ProfileSecuritySettingRSNType */
class SOAP_CMAC wcxs__ProfileSecuritySettingRSNType
{
public:
	int __union_ProfileSecuritySettingRSNType;	/* union discriminant (of union defined below) */
	union _wcxs__union_ProfileSecuritySettingRSNType union_ProfileSecuritySettingRSNType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_wcxs__ProfileSecuritySettingRSNType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__ProfileSecuritySettingRSNType() : soap(NULL) { }
	virtual ~wcxs__ProfileSecuritySettingRSNType() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__union_ProfileSecuritySettingsType
#define SOAP_TYPE__wcxs__union_ProfileSecuritySettingsType (858)
/* xsd:choice */
union _wcxs__union_ProfileSecuritySettingsType
{
#define SOAP_UNION__wcxs__union_ProfileSecuritySettingsType_WPA	(1)
	wcxs__ProfileSecuritySettingWPAType *WPA;
#define SOAP_UNION__wcxs__union_ProfileSecuritySettingsType_RSN	(2)
	wcxs__ProfileSecuritySettingRSNType *RSN;
};
#endif

#ifndef SOAP_TYPE_wcxs__ProfileSecuritySettingsType
#define SOAP_TYPE_wcxs__ProfileSecuritySettingsType (525)
/* wcxs:ProfileSecuritySettingsType */
class SOAP_CMAC wcxs__ProfileSecuritySettingsType
{
public:
	int __union_ProfileSecuritySettingsType;	/* union discriminant (of union defined below) */
	union _wcxs__union_ProfileSecuritySettingsType union_ProfileSecuritySettingsType;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_wcxs__ProfileSecuritySettingsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__ProfileSecuritySettingsType() : soap(NULL) { }
	virtual ~wcxs__ProfileSecuritySettingsType() { }
};
#endif

#ifndef SOAP_TYPE_wcxs__ProfileType
#define SOAP_TYPE_wcxs__ProfileType (526)
/* wcxs:ProfileType */
class SOAP_CMAC wcxs__ProfileType
{
public:
	std::string ProfileName;	/* required element of type wcxs:ProfileNameType */
	unsigned char Priority;	/* required element of type wcxs:ProfilePriorityType */
	xsd__base64Binary *SSID;	/* optional element of type xsd:base64Binary */
	wcxs__ProfileSecuritySettingsType *Security;	/* required element of type wcxs:ProfileSecuritySettingsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_wcxs__ProfileType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__ProfileType() : SSID(NULL), Security(NULL), soap(NULL) { }
	virtual ~wcxs__ProfileType() { }
};
#endif

#ifndef SOAP_TYPE_wcxs__WirelessCapabilitiesType
#define SOAP_TYPE_wcxs__WirelessCapabilitiesType (527)
/* wcxs:WirelessCapabilitiesType */
class SOAP_CMAC wcxs__WirelessCapabilitiesType
{
public:
	std::vector<enum wcxs__FeatureType >SupportedFeatures;	/* sequence of 1 to 4 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_wcxs__WirelessCapabilitiesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__WirelessCapabilitiesType() : soap(NULL) { }
	virtual ~wcxs__WirelessCapabilitiesType() { }
};
#endif

#ifndef SOAP_TYPE_wcxs__WirelessSettingsType
#define SOAP_TYPE_wcxs__WirelessSettingsType (528)
/* wcxs:WirelessSettingsType */
class SOAP_CMAC wcxs__WirelessSettingsType
{
public:
	bool RadioOn;	/* required element of type xsd:boolean */
	std::string *ActiveProfile;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_wcxs__WirelessSettingsType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wcxs__WirelessSettingsType() : ActiveProfile(NULL), soap(NULL) { }
	virtual ~wcxs__WirelessSettingsType() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__AddWirelessProfileRequest
#define SOAP_TYPE__wcxs__AddWirelessProfileRequest (529)
/* wcxs:AddWirelessProfileRequest */
class SOAP_CMAC _wcxs__AddWirelessProfileRequest
{
public:
	wcxs__ProfileType *Profile;	/* required element of type wcxs:ProfileType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE__wcxs__AddWirelessProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__AddWirelessProfileRequest() : Profile(NULL), soap(NULL) { }
	virtual ~_wcxs__AddWirelessProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__AddWirelessProfileResponse
#define SOAP_TYPE__wcxs__AddWirelessProfileResponse (530)
/* wcxs:AddWirelessProfileResponse */
class SOAP_CMAC _wcxs__AddWirelessProfileResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE__wcxs__AddWirelessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__AddWirelessProfileResponse() : soap(NULL) { }
	virtual ~_wcxs__AddWirelessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__GetWirelessProfileRequest
#define SOAP_TYPE__wcxs__GetWirelessProfileRequest (531)
/* wcxs:GetWirelessProfileRequest */
class SOAP_CMAC _wcxs__GetWirelessProfileRequest
{
public:
	std::string ProfileName;	/* required element of type wcxs:ProfileNameType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE__wcxs__GetWirelessProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__GetWirelessProfileRequest() : soap(NULL) { }
	virtual ~_wcxs__GetWirelessProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__GetWirelessProfileResponse
#define SOAP_TYPE__wcxs__GetWirelessProfileResponse (532)
/* wcxs:GetWirelessProfileResponse */
class SOAP_CMAC _wcxs__GetWirelessProfileResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	wcxs__ProfileType *Profile;	/* required element of type wcxs:ProfileType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE__wcxs__GetWirelessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__GetWirelessProfileResponse() : Profile(NULL), soap(NULL) { }
	virtual ~_wcxs__GetWirelessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__RemoveWirelessProfileRequest
#define SOAP_TYPE__wcxs__RemoveWirelessProfileRequest (533)
/* wcxs:RemoveWirelessProfileRequest */
class SOAP_CMAC _wcxs__RemoveWirelessProfileRequest
{
public:
	std::string ProfileName;	/* required element of type wcxs:ProfileNameType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE__wcxs__RemoveWirelessProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__RemoveWirelessProfileRequest() : soap(NULL) { }
	virtual ~_wcxs__RemoveWirelessProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__RemoveWirelessProfileResponse
#define SOAP_TYPE__wcxs__RemoveWirelessProfileResponse (534)
/* wcxs:RemoveWirelessProfileResponse */
class SOAP_CMAC _wcxs__RemoveWirelessProfileResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE__wcxs__RemoveWirelessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__RemoveWirelessProfileResponse() : soap(NULL) { }
	virtual ~_wcxs__RemoveWirelessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__UpdateWirelessProfileRequest
#define SOAP_TYPE__wcxs__UpdateWirelessProfileRequest (535)
/* wcxs:UpdateWirelessProfileRequest */
class SOAP_CMAC _wcxs__UpdateWirelessProfileRequest
{
public:
	wcxs__ProfileType *Profile;	/* required element of type wcxs:ProfileType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 535; } /* = unique id SOAP_TYPE__wcxs__UpdateWirelessProfileRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__UpdateWirelessProfileRequest() : Profile(NULL), soap(NULL) { }
	virtual ~_wcxs__UpdateWirelessProfileRequest() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__UpdateWirelessProfileResponse
#define SOAP_TYPE__wcxs__UpdateWirelessProfileResponse (536)
/* wcxs:UpdateWirelessProfileResponse */
class SOAP_CMAC _wcxs__UpdateWirelessProfileResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 536; } /* = unique id SOAP_TYPE__wcxs__UpdateWirelessProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__UpdateWirelessProfileResponse() : soap(NULL) { }
	virtual ~_wcxs__UpdateWirelessProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__EnumerateWirelessProfilesRequest
#define SOAP_TYPE__wcxs__EnumerateWirelessProfilesRequest (537)
/* wcxs:EnumerateWirelessProfilesRequest */
class SOAP_CMAC _wcxs__EnumerateWirelessProfilesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE__wcxs__EnumerateWirelessProfilesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__EnumerateWirelessProfilesRequest() : soap(NULL) { }
	virtual ~_wcxs__EnumerateWirelessProfilesRequest() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__EnumerateWirelessProfilesResponse
#define SOAP_TYPE__wcxs__EnumerateWirelessProfilesResponse (538)
/* wcxs:EnumerateWirelessProfilesResponse */
class SOAP_CMAC _wcxs__EnumerateWirelessProfilesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	std::vector<std::string >ProfilesNames;	/* sequence of 0 to 64 elements */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE__wcxs__EnumerateWirelessProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__EnumerateWirelessProfilesResponse() : soap(NULL) { }
	virtual ~_wcxs__EnumerateWirelessProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__GetWirelessCapabilitiesRequest
#define SOAP_TYPE__wcxs__GetWirelessCapabilitiesRequest (539)
/* wcxs:GetWirelessCapabilitiesRequest */
class SOAP_CMAC _wcxs__GetWirelessCapabilitiesRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE__wcxs__GetWirelessCapabilitiesRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__GetWirelessCapabilitiesRequest() : soap(NULL) { }
	virtual ~_wcxs__GetWirelessCapabilitiesRequest() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__GetWirelessCapabilitiesResponse
#define SOAP_TYPE__wcxs__GetWirelessCapabilitiesResponse (540)
/* wcxs:GetWirelessCapabilitiesResponse */
class SOAP_CMAC _wcxs__GetWirelessCapabilitiesResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	wcxs__WirelessCapabilitiesType *WirelessCapabilities;	/* required element of type wcxs:WirelessCapabilitiesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 540; } /* = unique id SOAP_TYPE__wcxs__GetWirelessCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__GetWirelessCapabilitiesResponse() : WirelessCapabilities(NULL), soap(NULL) { }
	virtual ~_wcxs__GetWirelessCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__GetWirelessSettingsRequest
#define SOAP_TYPE__wcxs__GetWirelessSettingsRequest (541)
/* wcxs:GetWirelessSettingsRequest */
class SOAP_CMAC _wcxs__GetWirelessSettingsRequest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE__wcxs__GetWirelessSettingsRequest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__GetWirelessSettingsRequest() : soap(NULL) { }
	virtual ~_wcxs__GetWirelessSettingsRequest() { }
};
#endif

#ifndef SOAP_TYPE__wcxs__GetWirelessSettingsResponse
#define SOAP_TYPE__wcxs__GetWirelessSettingsResponse (542)
/* wcxs:GetWirelessSettingsResponse */
class SOAP_CMAC _wcxs__GetWirelessSettingsResponse
{
public:
	unsigned int Status;	/* RPC return element */	/* required element of type cmn:PT_STATUS */
	wcxs__WirelessSettingsType *WirelessSettings;	/* required element of type wcxs:WirelessSettingsType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 542; } /* = unique id SOAP_TYPE__wcxs__GetWirelessSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wcxs__GetWirelessSettingsResponse() : WirelessSettings(NULL), soap(NULL) { }
	virtual ~_wcxs__GetWirelessSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE_cmn__URLType
#define SOAP_TYPE_cmn__URLType (15)
/* Primitive cmn:URLType schema type: */
class SOAP_CMAC cmn__URLType
{
public:
	std::string __item;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_cmn__URLType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cmn__URLType() : __anyAttribute(NULL), soap(NULL) { }
	virtual ~cmn__URLType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerDefaultFilterType
#define SOAP_TYPE_cb__CircuitBreakerDefaultFilterType (365)
/* cb:CircuitBreakerDefaultFilterType */
class SOAP_CMAC cb__CircuitBreakerDefaultFilterType : public cb__CircuitBreakerAntiSpoofingFilterType
{
public:
	bool ActionDrop;	/* required element of type xsd:boolean */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_cb__CircuitBreakerDefaultFilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerDefaultFilterType()  { }
	virtual ~cb__CircuitBreakerDefaultFilterType() { }
};
#endif

#ifndef SOAP_TYPE_cb__CircuitBreakerPacketTCPType
#define SOAP_TYPE_cb__CircuitBreakerPacketTCPType (378)
/* cb:CircuitBreakerPacketTCPType */
class SOAP_CMAC cb__CircuitBreakerPacketTCPType : public cb__CircuitBreakerPacketUDPType
{
public:
	cb__CircuitBreakerIPLayeredTCPFlagsType *TCPFlags;	/* optional element of type cb:CircuitBreakerIPLayeredTCPFlagsType */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE_cb__CircuitBreakerPacketTCPType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         cb__CircuitBreakerPacketTCPType() : TCPFlags(NULL) { }
	virtual ~cb__CircuitBreakerPacketTCPType() { }
};
#endif

#ifndef SOAP_TYPE___apl__AgentWatchdogShutdown
#define SOAP_TYPE___apl__AgentWatchdogShutdown (869)
/* Operation wrapper: */
struct __apl__AgentWatchdogShutdown
{
public:
	_apl__AgentWatchdogShutdown *apl__AgentWatchdogShutdown;	/* optional element of type apl:AgentWatchdogShutdown */
};
#endif

#ifndef SOAP_TYPE___apl__AgentWatchdogHeartbeat
#define SOAP_TYPE___apl__AgentWatchdogHeartbeat (873)
/* Operation wrapper: */
struct __apl__AgentWatchdogHeartbeat
{
public:
	_apl__AgentWatchdogHeartbeat *apl__AgentWatchdogHeartbeat;	/* optional element of type apl:AgentWatchdogHeartbeat */
};
#endif

#ifndef SOAP_TYPE___apl__AgentWatchdogRegister
#define SOAP_TYPE___apl__AgentWatchdogRegister (877)
/* Operation wrapper: */
struct __apl__AgentWatchdogRegister
{
public:
	_apl__AgentWatchdogRegister *apl__AgentWatchdogRegister;	/* optional element of type apl:AgentWatchdogRegister */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogCreate
#define SOAP_TYPE___apr__ConsoleWatchdogCreate (881)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogCreate
{
public:
	_apr__ConsoleWatchdogCreate *apr__ConsoleWatchdogCreate;	/* optional element of type apr:ConsoleWatchdogCreate */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogDelete
#define SOAP_TYPE___apr__ConsoleWatchdogDelete (885)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogDelete
{
public:
	_apr__ConsoleWatchdogDelete *apr__ConsoleWatchdogDelete;	/* optional element of type apr:ConsoleWatchdogDelete */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogEnumerate
#define SOAP_TYPE___apr__ConsoleWatchdogEnumerate (889)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogEnumerate
{
public:
	_apr__ConsoleWatchdogEnumerate *apr__ConsoleWatchdogEnumerate;	/* optional element of type apr:ConsoleWatchdogEnumerate */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogSetActions
#define SOAP_TYPE___apr__ConsoleWatchdogSetActions (893)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogSetActions
{
public:
	_apr__ConsoleWatchdogSetActions *apr__ConsoleWatchdogSetActions;	/* optional element of type apr:ConsoleWatchdogSetActions */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogGetActions
#define SOAP_TYPE___apr__ConsoleWatchdogGetActions (897)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogGetActions
{
public:
	_apr__ConsoleWatchdogGetActions *apr__ConsoleWatchdogGetActions;	/* optional element of type apr:ConsoleWatchdogGetActions */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogSetCbPolicy
#define SOAP_TYPE___apr__ConsoleWatchdogSetCbPolicy (901)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogSetCbPolicy
{
public:
	_apr__ConsoleWatchdogSetCbPolicy *apr__ConsoleWatchdogSetCbPolicy;	/* optional element of type apr:ConsoleWatchdogSetCbPolicy */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogGetCbPolicy
#define SOAP_TYPE___apr__ConsoleWatchdogGetCbPolicy (905)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogGetCbPolicy
{
public:
	_apr__ConsoleWatchdogGetCbPolicy *apr__ConsoleWatchdogGetCbPolicy;	/* optional element of type apr:ConsoleWatchdogGetCbPolicy */
};
#endif

#ifndef SOAP_TYPE___apr__ConsoleWatchdogQueryCapabilities
#define SOAP_TYPE___apr__ConsoleWatchdogQueryCapabilities (909)
/* Operation wrapper: */
struct __apr__ConsoleWatchdogQueryCapabilities
{
public:
	_apr__ConsoleWatchdogQueryCapabilities *apr__ConsoleWatchdogQueryCapabilities;	/* optional element of type apr:ConsoleWatchdogQueryCapabilities */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyCreate
#define SOAP_TYPE___cb__CbPolicyCreate (913)
/* Operation wrapper: */
struct __cb__CbPolicyCreate
{
public:
	_cb__CbPolicyCreate *cb__CbPolicyCreate;	/* optional element of type cb:CbPolicyCreate */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyGet
#define SOAP_TYPE___cb__CbPolicyGet (917)
/* Operation wrapper: */
struct __cb__CbPolicyGet
{
public:
	_cb__CbPolicyGet *cb__CbPolicyGet;	/* optional element of type cb:CbPolicyGet */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyDelete
#define SOAP_TYPE___cb__CbPolicyDelete (921)
/* Operation wrapper: */
struct __cb__CbPolicyDelete
{
public:
	_cb__CbPolicyDelete *cb__CbPolicyDelete;	/* optional element of type cb:CbPolicyDelete */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyEnumerate
#define SOAP_TYPE___cb__CbPolicyEnumerate (925)
/* Operation wrapper: */
struct __cb__CbPolicyEnumerate
{
public:
	_cb__CbPolicyEnumerate *cb__CbPolicyEnumerate;	/* optional element of type cb:CbPolicyEnumerate */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyEnable
#define SOAP_TYPE___cb__CbPolicyEnable (929)
/* Operation wrapper: */
struct __cb__CbPolicyEnable
{
public:
	_cb__CbPolicyEnable *cb__CbPolicyEnable;	/* optional element of type cb:CbPolicyEnable */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyDisable
#define SOAP_TYPE___cb__CbPolicyDisable (933)
/* Operation wrapper: */
struct __cb__CbPolicyDisable
{
public:
	_cb__CbPolicyDisable *cb__CbPolicyDisable;	/* optional element of type cb:CbPolicyDisable */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyGetEnabled
#define SOAP_TYPE___cb__CbPolicyGetEnabled (937)
/* Operation wrapper: */
struct __cb__CbPolicyGetEnabled
{
public:
	_cb__CbPolicyGetEnabled *cb__CbPolicyGetEnabled;	/* optional element of type cb:CbPolicyGetEnabled */
};
#endif

#ifndef SOAP_TYPE___cb__CbPolicyGetActiveStatistics
#define SOAP_TYPE___cb__CbPolicyGetActiveStatistics (941)
/* Operation wrapper: */
struct __cb__CbPolicyGetActiveStatistics
{
public:
	_cb__CbPolicyGetActiveStatistics *cb__CbPolicyGetActiveStatistics;	/* optional element of type cb:CbPolicyGetActiveStatistics */
};
#endif

#ifndef SOAP_TYPE___cb__CbFilterCreate
#define SOAP_TYPE___cb__CbFilterCreate (945)
/* Operation wrapper: */
struct __cb__CbFilterCreate
{
public:
	_cb__CbFilterCreate *cb__CbFilterCreate;	/* optional element of type cb:CbFilterCreate */
};
#endif

#ifndef SOAP_TYPE___cb__CbFilterGet
#define SOAP_TYPE___cb__CbFilterGet (949)
/* Operation wrapper: */
struct __cb__CbFilterGet
{
public:
	_cb__CbFilterGet *cb__CbFilterGet;	/* optional element of type cb:CbFilterGet */
};
#endif

#ifndef SOAP_TYPE___cb__CbFilterDelete
#define SOAP_TYPE___cb__CbFilterDelete (953)
/* Operation wrapper: */
struct __cb__CbFilterDelete
{
public:
	_cb__CbFilterDelete *cb__CbFilterDelete;	/* optional element of type cb:CbFilterDelete */
};
#endif

#ifndef SOAP_TYPE___cb__CbFilterEnumerate
#define SOAP_TYPE___cb__CbFilterEnumerate (957)
/* Operation wrapper: */
struct __cb__CbFilterEnumerate
{
public:
	_cb__CbFilterEnumerate *cb__CbFilterEnumerate;	/* optional element of type cb:CbFilterEnumerate */
};
#endif

#ifndef SOAP_TYPE___cb__CbQueryCapabilities
#define SOAP_TYPE___cb__CbQueryCapabilities (961)
/* Operation wrapper: */
struct __cb__CbQueryCapabilities
{
public:
	_cb__CbQueryCapabilities *cb__CbQueryCapabilities;	/* optional element of type cb:CbQueryCapabilities */
};
#endif

#ifndef SOAP_TYPE___cb__SetHcbOptions
#define SOAP_TYPE___cb__SetHcbOptions (965)
/* Operation wrapper: */
struct __cb__SetHcbOptions
{
public:
	_cb__SetHcbOptions *cb__SetHcbOptions;	/* optional element of type cb:SetHcbOptions */
};
#endif

#ifndef SOAP_TYPE___cb__GetHcbOptions
#define SOAP_TYPE___cb__GetHcbOptions (969)
/* Operation wrapper: */
struct __cb__GetHcbOptions
{
public:
	_cb__GetHcbOptions *cb__GetHcbOptions;	/* optional element of type cb:GetHcbOptions */
};
#endif

#ifndef SOAP_TYPE___cb__ClearHcbState
#define SOAP_TYPE___cb__ClearHcbState (973)
/* Operation wrapper: */
struct __cb__ClearHcbState
{
public:
	_cb__ClearHcbState *cb__ClearHcbState;	/* optional element of type cb:ClearHcbState */
};
#endif

#ifndef SOAP_TYPE___cb__GetHcbState
#define SOAP_TYPE___cb__GetHcbState (977)
/* Operation wrapper: */
struct __cb__GetHcbState
{
public:
	_cb__GetHcbState *cb__GetHcbState;	/* optional element of type cb:GetHcbState */
};
#endif

#ifndef SOAP_TYPE___emi__EnumerateEventFilters
#define SOAP_TYPE___emi__EnumerateEventFilters (981)
/* Operation wrapper: */
struct __emi__EnumerateEventFilters
{
public:
	_emi__EnumerateEventFilters *emi__EnumerateEventFilters;	/* optional element of type emi:EnumerateEventFilters */
};
#endif

#ifndef SOAP_TYPE___emi__GetAlertSubscription
#define SOAP_TYPE___emi__GetAlertSubscription (985)
/* Operation wrapper: */
struct __emi__GetAlertSubscription
{
public:
	_emi__GetAlertSubscription *emi__GetAlertSubscription;	/* optional element of type emi:GetAlertSubscription */
};
#endif

#ifndef SOAP_TYPE___emi__SetAlertCommunityString
#define SOAP_TYPE___emi__SetAlertCommunityString (989)
/* Operation wrapper: */
struct __emi__SetAlertCommunityString
{
public:
	_emi__SetAlertCommunityString *emi__SetAlertCommunityString;	/* optional element of type emi:SetAlertCommunityString */
};
#endif

#ifndef SOAP_TYPE___emi__GetAlertCommunityString
#define SOAP_TYPE___emi__GetAlertCommunityString (993)
/* Operation wrapper: */
struct __emi__GetAlertCommunityString
{
public:
	_emi__GetAlertCommunityString *emi__GetAlertCommunityString;	/* optional element of type emi:GetAlertCommunityString */
};
#endif

#ifndef SOAP_TYPE___emi__AddEventFilter
#define SOAP_TYPE___emi__AddEventFilter (997)
/* Operation wrapper: */
struct __emi__AddEventFilter
{
public:
	_emi__AddEventFilter *emi__AddEventFilter;	/* optional element of type emi:AddEventFilter */
};
#endif

#ifndef SOAP_TYPE___emi__SubscribeForAlert
#define SOAP_TYPE___emi__SubscribeForAlert (1001)
/* Operation wrapper: */
struct __emi__SubscribeForAlert
{
public:
	_emi__SubscribeForAlert *emi__SubscribeForAlert;	/* optional element of type emi:SubscribeForAlert */
};
#endif

#ifndef SOAP_TYPE___emi__EnumerateAlertSubscriptions
#define SOAP_TYPE___emi__EnumerateAlertSubscriptions (1005)
/* Operation wrapper: */
struct __emi__EnumerateAlertSubscriptions
{
public:
	_emi__EnumerateAlertSubscriptions *emi__EnumerateAlertSubscriptions;	/* optional element of type emi:EnumerateAlertSubscriptions */
};
#endif

#ifndef SOAP_TYPE___emi__EnumerateAlertPolicies
#define SOAP_TYPE___emi__EnumerateAlertPolicies (1009)
/* Operation wrapper: */
struct __emi__EnumerateAlertPolicies
{
public:
	_emi__EnumerateAlertPolicies *emi__EnumerateAlertPolicies;	/* optional element of type emi:EnumerateAlertPolicies */
};
#endif

#ifndef SOAP_TYPE___emi__CancelAlertSubscription
#define SOAP_TYPE___emi__CancelAlertSubscription (1013)
/* Operation wrapper: */
struct __emi__CancelAlertSubscription
{
public:
	_emi__CancelAlertSubscription *emi__CancelAlertSubscription;	/* optional element of type emi:CancelAlertSubscription */
};
#endif

#ifndef SOAP_TYPE___emi__GetEventFilter
#define SOAP_TYPE___emi__GetEventFilter (1017)
/* Operation wrapper: */
struct __emi__GetEventFilter
{
public:
	_emi__GetEventFilter *emi__GetEventFilter;	/* optional element of type emi:GetEventFilter */
};
#endif

#ifndef SOAP_TYPE___emi__UpdateEventFilter
#define SOAP_TYPE___emi__UpdateEventFilter (1021)
/* Operation wrapper: */
struct __emi__UpdateEventFilter
{
public:
	_emi__UpdateEventFilter *emi__UpdateEventFilter;	/* optional element of type emi:UpdateEventFilter */
};
#endif

#ifndef SOAP_TYPE___emi__RemoveEventFilter
#define SOAP_TYPE___emi__RemoveEventFilter (1025)
/* Operation wrapper: */
struct __emi__RemoveEventFilter
{
public:
	_emi__RemoveEventFilter *emi__RemoveEventFilter;	/* optional element of type emi:RemoveEventFilter */
};
#endif

#ifndef SOAP_TYPE___emi__GetEventLogStatus
#define SOAP_TYPE___emi__GetEventLogStatus (1029)
/* Operation wrapper: */
struct __emi__GetEventLogStatus
{
public:
	_emi__GetEventLogStatus *emi__GetEventLogStatus;	/* optional element of type emi:GetEventLogStatus */
};
#endif

#ifndef SOAP_TYPE___emi__ReadEventLogRecords
#define SOAP_TYPE___emi__ReadEventLogRecords (1033)
/* Operation wrapper: */
struct __emi__ReadEventLogRecords
{
public:
	_emi__ReadEventLogRecords *emi__ReadEventLogRecords;	/* optional element of type emi:ReadEventLogRecords */
};
#endif

#ifndef SOAP_TYPE___emi__ClearEventLog
#define SOAP_TYPE___emi__ClearEventLog (1037)
/* Operation wrapper: */
struct __emi__ClearEventLog
{
public:
	_emi__ClearEventLog *emi__ClearEventLog;	/* optional element of type emi:ClearEventLog */
};
#endif

#ifndef SOAP_TYPE___emi__FreezeEventLog
#define SOAP_TYPE___emi__FreezeEventLog (1041)
/* Operation wrapper: */
struct __emi__FreezeEventLog
{
public:
	_emi__FreezeEventLog *emi__FreezeEventLog;	/* optional element of type emi:FreezeEventLog */
};
#endif

#ifndef SOAP_TYPE___emi__SetEventLogTimestampClock
#define SOAP_TYPE___emi__SetEventLogTimestampClock (1045)
/* Operation wrapper: */
struct __emi__SetEventLogTimestampClock
{
public:
	_emi__SetEventLogTimestampClock *emi__SetEventLogTimestampClock;	/* optional element of type emi:SetEventLogTimestampClock */
};
#endif

#ifndef SOAP_TYPE___emi__GetEventLogTimestampClock
#define SOAP_TYPE___emi__GetEventLogTimestampClock (1049)
/* Operation wrapper: */
struct __emi__GetEventLogTimestampClock
{
public:
	_emi__GetEventLogTimestampClock *emi__GetEventLogTimestampClock;	/* optional element of type emi:GetEventLogTimestampClock */
};
#endif

#ifndef SOAP_TYPE___emi__EnumerateSensors
#define SOAP_TYPE___emi__EnumerateSensors (1053)
/* Operation wrapper: */
struct __emi__EnumerateSensors
{
public:
	_emi__EnumerateSensors *emi__EnumerateSensors;	/* optional element of type emi:EnumerateSensors */
};
#endif

#ifndef SOAP_TYPE___emi__GetSensorAttributes
#define SOAP_TYPE___emi__GetSensorAttributes (1057)
/* Operation wrapper: */
struct __emi__GetSensorAttributes
{
public:
	_emi__GetSensorAttributes *emi__GetSensorAttributes;	/* optional element of type emi:GetSensorAttributes */
};
#endif

#ifndef SOAP_TYPE___emi__SubscribeForGeneralAlert
#define SOAP_TYPE___emi__SubscribeForGeneralAlert (1061)
/* Operation wrapper: */
struct __emi__SubscribeForGeneralAlert
{
public:
	_emi__SubscribeForGeneralAlert *emi__SubscribeForGeneralAlert;	/* optional element of type emi:SubscribeForGeneralAlert */
};
#endif

#ifndef SOAP_TYPE___emi__EnumerateGeneralAlertSubscriptions
#define SOAP_TYPE___emi__EnumerateGeneralAlertSubscriptions (1065)
/* Operation wrapper: */
struct __emi__EnumerateGeneralAlertSubscriptions
{
public:
	_emi__EnumerateGeneralAlertSubscriptions *emi__EnumerateGeneralAlertSubscriptions;	/* optional element of type emi:EnumerateGeneralAlertSubscriptions */
};
#endif

#ifndef SOAP_TYPE___emi__GetGeneralAlertSubscription
#define SOAP_TYPE___emi__GetGeneralAlertSubscription (1069)
/* Operation wrapper: */
struct __emi__GetGeneralAlertSubscription
{
public:
	_emi__GetGeneralAlertSubscription *emi__GetGeneralAlertSubscription;	/* optional element of type emi:GetGeneralAlertSubscription */
};
#endif

#ifndef SOAP_TYPE___hwa__EnumerateAssetTypes
#define SOAP_TYPE___hwa__EnumerateAssetTypes (1073)
/* Operation wrapper: */
struct __hwa__EnumerateAssetTypes
{
public:
	_hwa__EnumerateAssetTypes *hwa__EnumerateAssetTypes;	/* optional element of type hwa:EnumerateAssetTypes */
};
#endif

#ifndef SOAP_TYPE___hwa__GetAssetData
#define SOAP_TYPE___hwa__GetAssetData (1077)
/* Operation wrapper: */
struct __hwa__GetAssetData
{
public:
	_hwa__GetAssetData *hwa__GetAssetData;	/* optional element of type hwa:GetAssetData */
};
#endif

#ifndef SOAP_TYPE___idr__SetRedirectionListenerState
#define SOAP_TYPE___idr__SetRedirectionListenerState (1081)
/* Operation wrapper: */
struct __idr__SetRedirectionListenerState
{
public:
	_idr__SetRedirectionListenerState *idr__SetRedirectionListenerState;	/* optional element of type idr:SetRedirectionListenerState */
};
#endif

#ifndef SOAP_TYPE___idr__GetRedirectionListenerState
#define SOAP_TYPE___idr__GetRedirectionListenerState (1085)
/* Operation wrapper: */
struct __idr__GetRedirectionListenerState
{
public:
	_idr__GetRedirectionListenerState *idr__GetRedirectionListenerState;	/* optional element of type idr:GetRedirectionListenerState */
};
#endif

#ifndef SOAP_TYPE___idr__GetIderSessionLog
#define SOAP_TYPE___idr__GetIderSessionLog (1089)
/* Operation wrapper: */
struct __idr__GetIderSessionLog
{
public:
	_idr__GetIderSessionLog *idr__GetIderSessionLog;	/* optional element of type idr:GetIderSessionLog */
};
#endif

#ifndef SOAP_TYPE___inf__GetCoreVersion
#define SOAP_TYPE___inf__GetCoreVersion (1093)
/* Operation wrapper: */
struct __inf__GetCoreVersion
{
public:
	_inf__GetCoreVersion *inf__GetCoreVersion;	/* optional element of type inf:GetCoreVersion */
};
#endif

#ifndef SOAP_TYPE___inf__GetCodeVersions
#define SOAP_TYPE___inf__GetCodeVersions (1097)
/* Operation wrapper: */
struct __inf__GetCodeVersions
{
public:
	_inf__GetCodeVersions *inf__GetCodeVersions;	/* optional element of type inf:GetCodeVersions */
};
#endif

#ifndef SOAP_TYPE___inf__GetProvisioningMode
#define SOAP_TYPE___inf__GetProvisioningMode (1101)
/* Operation wrapper: */
struct __inf__GetProvisioningMode
{
public:
	_inf__GetProvisioningMode *inf__GetProvisioningMode;	/* optional element of type inf:GetProvisioningMode */
};
#endif

#ifndef SOAP_TYPE___inf__GetProvisioningState
#define SOAP_TYPE___inf__GetProvisioningState (1105)
/* Operation wrapper: */
struct __inf__GetProvisioningState
{
public:
	_inf__GetProvisioningState *inf__GetProvisioningState;	/* optional element of type inf:GetProvisioningState */
};
#endif

#ifndef SOAP_TYPE___inf__GetVlanParameters
#define SOAP_TYPE___inf__GetVlanParameters (1109)
/* Operation wrapper: */
struct __inf__GetVlanParameters
{
public:
	_inf__GetVlanParameters *inf__GetVlanParameters;	/* optional element of type inf:GetVlanParameters */
};
#endif

#ifndef SOAP_TYPE___inf__GetHostName
#define SOAP_TYPE___inf__GetHostName (1113)
/* Operation wrapper: */
struct __inf__GetHostName
{
public:
	_inf__GetHostName *inf__GetHostName;	/* optional element of type inf:GetHostName */
};
#endif

#ifndef SOAP_TYPE___inf__GetConfigServerInfo
#define SOAP_TYPE___inf__GetConfigServerInfo (1117)
/* Operation wrapper: */
struct __inf__GetConfigServerInfo
{
public:
	_inf__GetConfigServerInfo *inf__GetConfigServerInfo;	/* optional element of type inf:GetConfigServerInfo */
};
#endif

#ifndef SOAP_TYPE___inf__GetAdminAclEntryStatus
#define SOAP_TYPE___inf__GetAdminAclEntryStatus (1121)
/* Operation wrapper: */
struct __inf__GetAdminAclEntryStatus
{
public:
	_inf__GetAdminAclEntryStatus *inf__GetAdminAclEntryStatus;	/* optional element of type inf:GetAdminAclEntryStatus */
};
#endif

#ifndef SOAP_TYPE___inf__GetAdminNetAclEntryStatus
#define SOAP_TYPE___inf__GetAdminNetAclEntryStatus (1125)
/* Operation wrapper: */
struct __inf__GetAdminNetAclEntryStatus
{
public:
	_inf__GetAdminNetAclEntryStatus *inf__GetAdminNetAclEntryStatus;	/* optional element of type inf:GetAdminNetAclEntryStatus */
};
#endif

#ifndef SOAP_TYPE___inf__GetPasswordModel
#define SOAP_TYPE___inf__GetPasswordModel (1129)
/* Operation wrapper: */
struct __inf__GetPasswordModel
{
public:
	_inf__GetPasswordModel *inf__GetPasswordModel;	/* optional element of type inf:GetPasswordModel */
};
#endif

#ifndef SOAP_TYPE___inf__GetEnabledInterfaces
#define SOAP_TYPE___inf__GetEnabledInterfaces (1133)
/* Operation wrapper: */
struct __inf__GetEnabledInterfaces
{
public:
	_inf__GetEnabledInterfaces *inf__GetEnabledInterfaces;	/* optional element of type inf:GetEnabledInterfaces */
};
#endif

#ifndef SOAP_TYPE___inf__GetNetworkState
#define SOAP_TYPE___inf__GetNetworkState (1137)
/* Operation wrapper: */
struct __inf__GetNetworkState
{
public:
	_inf__GetNetworkState *inf__GetNetworkState;	/* optional element of type inf:GetNetworkState */
};
#endif

#ifndef SOAP_TYPE___inf__GetSecurityParameters
#define SOAP_TYPE___inf__GetSecurityParameters (1141)
/* Operation wrapper: */
struct __inf__GetSecurityParameters
{
public:
	_inf__GetSecurityParameters *inf__GetSecurityParameters;	/* optional element of type inf:GetSecurityParameters */
};
#endif

#ifndef SOAP_TYPE___inf__GetIderSessionLog
#define SOAP_TYPE___inf__GetIderSessionLog (1145)
/* Operation wrapper: */
struct __inf__GetIderSessionLog
{
public:
	_inf__GetIderSessionLog *inf__GetIderSessionLog;	/* optional element of type inf:GetIderSessionLog */
};
#endif

#ifndef SOAP_TYPE___net__SetHostName
#define SOAP_TYPE___net__SetHostName (1149)
/* Operation wrapper: */
struct __net__SetHostName
{
public:
	_net__SetHostName *net__SetHostName;	/* optional element of type net:SetHostName */
};
#endif

#ifndef SOAP_TYPE___net__GetHostName
#define SOAP_TYPE___net__GetHostName (1153)
/* Operation wrapper: */
struct __net__GetHostName
{
public:
	_net__GetHostName *net__GetHostName;	/* optional element of type net:GetHostName */
};
#endif

#ifndef SOAP_TYPE___net__SetDomainName
#define SOAP_TYPE___net__SetDomainName (1157)
/* Operation wrapper: */
struct __net__SetDomainName
{
public:
	_net__SetDomainName *net__SetDomainName;	/* optional element of type net:SetDomainName */
};
#endif

#ifndef SOAP_TYPE___net__GetDomainName
#define SOAP_TYPE___net__GetDomainName (1161)
/* Operation wrapper: */
struct __net__GetDomainName
{
public:
	_net__GetDomainName *net__GetDomainName;	/* optional element of type net:GetDomainName */
};
#endif

#ifndef SOAP_TYPE___net__SetTcpIpParameters
#define SOAP_TYPE___net__SetTcpIpParameters (1165)
/* Operation wrapper: */
struct __net__SetTcpIpParameters
{
public:
	_net__SetTcpIpParameters *net__SetTcpIpParameters;	/* optional element of type net:SetTcpIpParameters */
};
#endif

#ifndef SOAP_TYPE___net__GetTcpIpParameters
#define SOAP_TYPE___net__GetTcpIpParameters (1169)
/* Operation wrapper: */
struct __net__GetTcpIpParameters
{
public:
	_net__GetTcpIpParameters *net__GetTcpIpParameters;	/* optional element of type net:GetTcpIpParameters */
};
#endif

#ifndef SOAP_TYPE___net__SetVlanParameters
#define SOAP_TYPE___net__SetVlanParameters (1173)
/* Operation wrapper: */
struct __net__SetVlanParameters
{
public:
	_net__SetVlanParameters *net__SetVlanParameters;	/* optional element of type net:SetVlanParameters */
};
#endif

#ifndef SOAP_TYPE___net__GetVlanParameters
#define SOAP_TYPE___net__GetVlanParameters (1177)
/* Operation wrapper: */
struct __net__GetVlanParameters
{
public:
	_net__GetVlanParameters *net__GetVlanParameters;	/* optional element of type net:GetVlanParameters */
};
#endif

#ifndef SOAP_TYPE___net__SetPingResponse
#define SOAP_TYPE___net__SetPingResponse (1181)
/* Operation wrapper: */
struct __net__SetPingResponse
{
public:
	_net__SetPingResponse *net__SetPingResponse;	/* optional element of type net:SetPingResponse */
};
#endif

#ifndef SOAP_TYPE___net__GetPingResponse
#define SOAP_TYPE___net__GetPingResponse (1185)
/* Operation wrapper: */
struct __net__GetPingResponse
{
public:
	_net__GetPingResponse *net__GetPingResponse;	/* optional element of type net:GetPingResponse */
};
#endif

#ifndef SOAP_TYPE___net__EnumerateInterfaces
#define SOAP_TYPE___net__EnumerateInterfaces (1189)
/* Operation wrapper: */
struct __net__EnumerateInterfaces
{
public:
	_net__EnumerateInterfaces *net__EnumerateInterfaces;	/* optional element of type net:EnumerateInterfaces */
};
#endif

#ifndef SOAP_TYPE___net__GetInterfaceSettings
#define SOAP_TYPE___net__GetInterfaceSettings (1193)
/* Operation wrapper: */
struct __net__GetInterfaceSettings
{
public:
	_net__GetInterfaceSettings *net__GetInterfaceSettings;	/* optional element of type net:GetInterfaceSettings */
};
#endif

#ifndef SOAP_TYPE___net__SetInterfaceSettings
#define SOAP_TYPE___net__SetInterfaceSettings (1197)
/* Operation wrapper: */
struct __net__SetInterfaceSettings
{
public:
	_net__SetInterfaceSettings *net__SetInterfaceSettings;	/* optional element of type net:SetInterfaceSettings */
};
#endif

#ifndef SOAP_TYPE___net__Set8021XWiredProfile
#define SOAP_TYPE___net__Set8021XWiredProfile (1201)
/* Operation wrapper: */
struct __net__Set8021XWiredProfile
{
public:
	_net__Set8021XWiredProfile *net__Set8021XWiredProfile;	/* optional element of type net:Set8021XWiredProfile */
};
#endif

#ifndef SOAP_TYPE___net__Get8021XWiredProfile
#define SOAP_TYPE___net__Get8021XWiredProfile (1205)
/* Operation wrapper: */
struct __net__Get8021XWiredProfile
{
public:
	_net__Get8021XWiredProfile *net__Get8021XWiredProfile;	/* optional element of type net:Get8021XWiredProfile */
};
#endif

#ifndef SOAP_TYPE___net__Set8021XActiveS0
#define SOAP_TYPE___net__Set8021XActiveS0 (1209)
/* Operation wrapper: */
struct __net__Set8021XActiveS0
{
public:
	_net__Set8021XActiveS0 *net__Set8021XActiveS0;	/* optional element of type net:Set8021XActiveS0 */
};
#endif

#ifndef SOAP_TYPE___net__Get8021XActiveS0
#define SOAP_TYPE___net__Get8021XActiveS0 (1213)
/* Operation wrapper: */
struct __net__Get8021XActiveS0
{
public:
	_net__Get8021XActiveS0 *net__Get8021XActiveS0;	/* optional element of type net:Get8021XActiveS0 */
};
#endif

#ifndef SOAP_TYPE___net__Set8021XPxeTimeout
#define SOAP_TYPE___net__Set8021XPxeTimeout (1217)
/* Operation wrapper: */
struct __net__Set8021XPxeTimeout
{
public:
	_net__Set8021XPxeTimeout *net__Set8021XPxeTimeout;	/* optional element of type net:Set8021XPxeTimeout */
};
#endif

#ifndef SOAP_TYPE___net__Get8021XPxeTimeout
#define SOAP_TYPE___net__Get8021XPxeTimeout (1221)
/* Operation wrapper: */
struct __net__Get8021XPxeTimeout
{
public:
	_net__Get8021XPxeTimeout *net__Get8021XPxeTimeout;	/* optional element of type net:Get8021XPxeTimeout */
};
#endif

#ifndef SOAP_TYPE___rci__GetRemoteControlCapabilities
#define SOAP_TYPE___rci__GetRemoteControlCapabilities (1225)
/* Operation wrapper: */
struct __rci__GetRemoteControlCapabilities
{
public:
	_rci__GetRemoteControlCapabilities *rci__GetRemoteControlCapabilities;	/* optional element of type rci:GetRemoteControlCapabilities */
};
#endif

#ifndef SOAP_TYPE___rci__RemoteControl
#define SOAP_TYPE___rci__RemoteControl (1229)
/* Operation wrapper: */
struct __rci__RemoteControl
{
public:
	_rci__RemoteControl *rci__RemoteControl;	/* optional element of type rci:RemoteControl */
};
#endif

#ifndef SOAP_TYPE___rci__GetSystemPowerState
#define SOAP_TYPE___rci__GetSystemPowerState (1233)
/* Operation wrapper: */
struct __rci__GetSystemPowerState
{
public:
	_rci__GetSystemPowerState *rci__GetSystemPowerState;	/* optional element of type rci:GetSystemPowerState */
};
#endif

#ifndef SOAP_TYPE___sai__ResetFlashWearOutProtection
#define SOAP_TYPE___sai__ResetFlashWearOutProtection (1237)
/* Operation wrapper: */
struct __sai__ResetFlashWearOutProtection
{
public:
	_sai__ResetFlashWearOutProtection *sai__ResetFlashWearOutProtection;	/* optional element of type sai:ResetFlashWearOutProtection */
};
#endif

#ifndef SOAP_TYPE___sai__GetAdminAclEntry
#define SOAP_TYPE___sai__GetAdminAclEntry (1241)
/* Operation wrapper: */
struct __sai__GetAdminAclEntry
{
public:
	_sai__GetAdminAclEntry *sai__GetAdminAclEntry;	/* optional element of type sai:GetAdminAclEntry */
};
#endif

#ifndef SOAP_TYPE___sai__SetAdminAclEntry
#define SOAP_TYPE___sai__SetAdminAclEntry (1245)
/* Operation wrapper: */
struct __sai__SetAdminAclEntry
{
public:
	_sai__SetAdminAclEntry *sai__SetAdminAclEntry;	/* optional element of type sai:SetAdminAclEntry */
};
#endif

#ifndef SOAP_TYPE___sai__AddUserAclEntry
#define SOAP_TYPE___sai__AddUserAclEntry (1249)
/* Operation wrapper: */
struct __sai__AddUserAclEntry
{
public:
	_sai__AddUserAclEntry *sai__AddUserAclEntry;	/* optional element of type sai:AddUserAclEntry */
};
#endif

#ifndef SOAP_TYPE___sai__EnumerateUserAclEntries
#define SOAP_TYPE___sai__EnumerateUserAclEntries (1253)
/* Operation wrapper: */
struct __sai__EnumerateUserAclEntries
{
public:
	_sai__EnumerateUserAclEntries *sai__EnumerateUserAclEntries;	/* optional element of type sai:EnumerateUserAclEntries */
};
#endif

#ifndef SOAP_TYPE___sai__GetUserAclEntry
#define SOAP_TYPE___sai__GetUserAclEntry (1257)
/* Operation wrapper: */
struct __sai__GetUserAclEntry
{
public:
	_sai__GetUserAclEntry *sai__GetUserAclEntry;	/* optional element of type sai:GetUserAclEntry */
};
#endif

#ifndef SOAP_TYPE___sai__UpdateUserAclEntry
#define SOAP_TYPE___sai__UpdateUserAclEntry (1261)
/* Operation wrapper: */
struct __sai__UpdateUserAclEntry
{
public:
	_sai__UpdateUserAclEntry *sai__UpdateUserAclEntry;	/* optional element of type sai:UpdateUserAclEntry */
};
#endif

#ifndef SOAP_TYPE___sai__RemoveUserAclEntry
#define SOAP_TYPE___sai__RemoveUserAclEntry (1265)
/* Operation wrapper: */
struct __sai__RemoveUserAclEntry
{
public:
	_sai__RemoveUserAclEntry *sai__RemoveUserAclEntry;	/* optional element of type sai:RemoveUserAclEntry */
};
#endif

#ifndef SOAP_TYPE___sai__SetTlsEnabled
#define SOAP_TYPE___sai__SetTlsEnabled (1269)
/* Operation wrapper: */
struct __sai__SetTlsEnabled
{
public:
	_sai__SetTlsEnabled *sai__SetTlsEnabled;	/* optional element of type sai:SetTlsEnabled */
};
#endif

#ifndef SOAP_TYPE___sai__SetRngKey
#define SOAP_TYPE___sai__SetRngKey (1273)
/* Operation wrapper: */
struct __sai__SetRngKey
{
public:
	_sai__SetRngKey *sai__SetRngKey;	/* optional element of type sai:SetRngKey */
};
#endif

#ifndef SOAP_TYPE___sai__SetTLSKeyAndCertificate
#define SOAP_TYPE___sai__SetTLSKeyAndCertificate (1277)
/* Operation wrapper: */
struct __sai__SetTLSKeyAndCertificate
{
public:
	_sai__SetTLSKeyAndCertificate *sai__SetTLSKeyAndCertificate;	/* optional element of type sai:SetTLSKeyAndCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__SetTLSCertificate
#define SOAP_TYPE___sai__SetTLSCertificate (1281)
/* Operation wrapper: */
struct __sai__SetTLSCertificate
{
public:
	_sai__SetTLSCertificate *sai__SetTLSCertificate;	/* optional element of type sai:SetTLSCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__GetTLSCertificate
#define SOAP_TYPE___sai__GetTLSCertificate (1285)
/* Operation wrapper: */
struct __sai__GetTLSCertificate
{
public:
	_sai__GetTLSCertificate *sai__GetTLSCertificate;	/* optional element of type sai:GetTLSCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__UpdateCoreFromUrl
#define SOAP_TYPE___sai__UpdateCoreFromUrl (1289)
/* Operation wrapper: */
struct __sai__UpdateCoreFromUrl
{
public:
	_sai__UpdateCoreFromUrl *sai__UpdateCoreFromUrl;	/* optional element of type sai:UpdateCoreFromUrl */
};
#endif

#ifndef SOAP_TYPE___sai__GetProvisioningMode
#define SOAP_TYPE___sai__GetProvisioningMode (1293)
/* Operation wrapper: */
struct __sai__GetProvisioningMode
{
public:
	_sai__GetProvisioningMode *sai__GetProvisioningMode;	/* optional element of type sai:GetProvisioningMode */
};
#endif

#ifndef SOAP_TYPE___sai__SetProvisioningMode
#define SOAP_TYPE___sai__SetProvisioningMode (1297)
/* Operation wrapper: */
struct __sai__SetProvisioningMode
{
public:
	_sai__SetProvisioningMode *sai__SetProvisioningMode;	/* optional element of type sai:SetProvisioningMode */
};
#endif

#ifndef SOAP_TYPE___sai__Unprovision
#define SOAP_TYPE___sai__Unprovision (1301)
/* Operation wrapper: */
struct __sai__Unprovision
{
public:
	_sai__Unprovision *sai__Unprovision;	/* optional element of type sai:Unprovision */
};
#endif

#ifndef SOAP_TYPE___sai__CommitChanges
#define SOAP_TYPE___sai__CommitChanges (1305)
/* Operation wrapper: */
struct __sai__CommitChanges
{
public:
	_sai__CommitChanges *sai__CommitChanges;	/* optional element of type sai:CommitChanges */
};
#endif

#ifndef SOAP_TYPE___sai__GetCoreVersion
#define SOAP_TYPE___sai__GetCoreVersion (1309)
/* Operation wrapper: */
struct __sai__GetCoreVersion
{
public:
	_sai__GetCoreVersion *sai__GetCoreVersion;	/* optional element of type sai:GetCoreVersion */
};
#endif

#ifndef SOAP_TYPE___sai__AddUserAclEntryEx
#define SOAP_TYPE___sai__AddUserAclEntryEx (1313)
/* Operation wrapper: */
struct __sai__AddUserAclEntryEx
{
public:
	_sai__AddUserAclEntryEx *sai__AddUserAclEntryEx;	/* optional element of type sai:AddUserAclEntryEx */
};
#endif

#ifndef SOAP_TYPE___sai__GetUserAclEntryEx
#define SOAP_TYPE___sai__GetUserAclEntryEx (1317)
/* Operation wrapper: */
struct __sai__GetUserAclEntryEx
{
public:
	_sai__GetUserAclEntryEx *sai__GetUserAclEntryEx;	/* optional element of type sai:GetUserAclEntryEx */
};
#endif

#ifndef SOAP_TYPE___sai__UpdateUserAclEntryEx
#define SOAP_TYPE___sai__UpdateUserAclEntryEx (1321)
/* Operation wrapper: */
struct __sai__UpdateUserAclEntryEx
{
public:
	_sai__UpdateUserAclEntryEx *sai__UpdateUserAclEntryEx;	/* optional element of type sai:UpdateUserAclEntryEx */
};
#endif

#ifndef SOAP_TYPE___sai__SetAdminAclEntryEx
#define SOAP_TYPE___sai__SetAdminAclEntryEx (1325)
/* Operation wrapper: */
struct __sai__SetAdminAclEntryEx
{
public:
	_sai__SetAdminAclEntryEx *sai__SetAdminAclEntryEx;	/* optional element of type sai:SetAdminAclEntryEx */
};
#endif

#ifndef SOAP_TYPE___sai__GetDigestRealm
#define SOAP_TYPE___sai__GetDigestRealm (1329)
/* Operation wrapper: */
struct __sai__GetDigestRealm
{
public:
	_sai__GetDigestRealm *sai__GetDigestRealm;	/* optional element of type sai:GetDigestRealm */
};
#endif

#ifndef SOAP_TYPE___sai__SetKerberosOptions
#define SOAP_TYPE___sai__SetKerberosOptions (1333)
/* Operation wrapper: */
struct __sai__SetKerberosOptions
{
public:
	_sai__SetKerberosOptions *sai__SetKerberosOptions;	/* optional element of type sai:SetKerberosOptions */
};
#endif

#ifndef SOAP_TYPE___sai__GetKerberosOptions
#define SOAP_TYPE___sai__GetKerberosOptions (1337)
/* Operation wrapper: */
struct __sai__GetKerberosOptions
{
public:
	_sai__GetKerberosOptions *sai__GetKerberosOptions;	/* optional element of type sai:GetKerberosOptions */
};
#endif

#ifndef SOAP_TYPE___sai__SetEnabledInterfaces
#define SOAP_TYPE___sai__SetEnabledInterfaces (1341)
/* Operation wrapper: */
struct __sai__SetEnabledInterfaces
{
public:
	_sai__SetEnabledInterfaces *sai__SetEnabledInterfaces;	/* optional element of type sai:SetEnabledInterfaces */
};
#endif

#ifndef SOAP_TYPE___sai__GetEnabledInterfaces
#define SOAP_TYPE___sai__GetEnabledInterfaces (1345)
/* Operation wrapper: */
struct __sai__GetEnabledInterfaces
{
public:
	_sai__GetEnabledInterfaces *sai__GetEnabledInterfaces;	/* optional element of type sai:GetEnabledInterfaces */
};
#endif

#ifndef SOAP_TYPE___sai__SetTlsOptions
#define SOAP_TYPE___sai__SetTlsOptions (1349)
/* Operation wrapper: */
struct __sai__SetTlsOptions
{
public:
	_sai__SetTlsOptions *sai__SetTlsOptions;	/* optional element of type sai:SetTlsOptions */
};
#endif

#ifndef SOAP_TYPE___sai__GetTlsOptions
#define SOAP_TYPE___sai__GetTlsOptions (1353)
/* Operation wrapper: */
struct __sai__GetTlsOptions
{
public:
	_sai__GetTlsOptions *sai__GetTlsOptions;	/* optional element of type sai:GetTlsOptions */
};
#endif

#ifndef SOAP_TYPE___sai__AddTrustedRootCertificate
#define SOAP_TYPE___sai__AddTrustedRootCertificate (1357)
/* Operation wrapper: */
struct __sai__AddTrustedRootCertificate
{
public:
	_sai__AddTrustedRootCertificate *sai__AddTrustedRootCertificate;	/* optional element of type sai:AddTrustedRootCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__GetTrustedRootCertificate
#define SOAP_TYPE___sai__GetTrustedRootCertificate (1361)
/* Operation wrapper: */
struct __sai__GetTrustedRootCertificate
{
public:
	_sai__GetTrustedRootCertificate *sai__GetTrustedRootCertificate;	/* optional element of type sai:GetTrustedRootCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__DeleteTrustedRootCertificate
#define SOAP_TYPE___sai__DeleteTrustedRootCertificate (1365)
/* Operation wrapper: */
struct __sai__DeleteTrustedRootCertificate
{
public:
	_sai__DeleteTrustedRootCertificate *sai__DeleteTrustedRootCertificate;	/* optional element of type sai:DeleteTrustedRootCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__EnumerateTrustedRootCertificates
#define SOAP_TYPE___sai__EnumerateTrustedRootCertificates (1369)
/* Operation wrapper: */
struct __sai__EnumerateTrustedRootCertificates
{
public:
	_sai__EnumerateTrustedRootCertificates *sai__EnumerateTrustedRootCertificates;	/* optional element of type sai:EnumerateTrustedRootCertificates */
};
#endif

#ifndef SOAP_TYPE___sai__SetTrustedFqdnCN
#define SOAP_TYPE___sai__SetTrustedFqdnCN (1373)
/* Operation wrapper: */
struct __sai__SetTrustedFqdnCN
{
public:
	_sai__SetTrustedFqdnCN *sai__SetTrustedFqdnCN;	/* optional element of type sai:SetTrustedFqdnCN */
};
#endif

#ifndef SOAP_TYPE___sai__GetTrustedFqdnCN
#define SOAP_TYPE___sai__GetTrustedFqdnCN (1377)
/* Operation wrapper: */
struct __sai__GetTrustedFqdnCN
{
public:
	_sai__GetTrustedFqdnCN *sai__GetTrustedFqdnCN;	/* optional element of type sai:GetTrustedFqdnCN */
};
#endif

#ifndef SOAP_TYPE___sai__SetCRL
#define SOAP_TYPE___sai__SetCRL (1381)
/* Operation wrapper: */
struct __sai__SetCRL
{
public:
	_sai__SetCRL *sai__SetCRL;	/* optional element of type sai:SetCRL */
};
#endif

#ifndef SOAP_TYPE___sai__GetCRL
#define SOAP_TYPE___sai__GetCRL (1385)
/* Operation wrapper: */
struct __sai__GetCRL
{
public:
	_sai__GetCRL *sai__GetCRL;	/* optional element of type sai:GetCRL */
};
#endif

#ifndef SOAP_TYPE___sai__GetServerCertificateReq
#define SOAP_TYPE___sai__GetServerCertificateReq (1389)
/* Operation wrapper: */
struct __sai__GetServerCertificateReq
{
public:
	_sai__GetServerCertificateReq *sai__GetServerCertificateReq;	/* optional element of type sai:GetServerCertificateReq */
};
#endif

#ifndef SOAP_TYPE___sai__GetPkiCapabilities
#define SOAP_TYPE___sai__GetPkiCapabilities (1393)
/* Operation wrapper: */
struct __sai__GetPkiCapabilities
{
public:
	_sai__GetPkiCapabilities *sai__GetPkiCapabilities;	/* optional element of type sai:GetPkiCapabilities */
};
#endif

#ifndef SOAP_TYPE___sai__SetPowerSavingOptions
#define SOAP_TYPE___sai__SetPowerSavingOptions (1397)
/* Operation wrapper: */
struct __sai__SetPowerSavingOptions
{
public:
	_sai__SetPowerSavingOptions *sai__SetPowerSavingOptions;	/* optional element of type sai:SetPowerSavingOptions */
};
#endif

#ifndef SOAP_TYPE___sai__GetPowerSavingOptions
#define SOAP_TYPE___sai__GetPowerSavingOptions (1401)
/* Operation wrapper: */
struct __sai__GetPowerSavingOptions
{
public:
	_sai__GetPowerSavingOptions *sai__GetPowerSavingOptions;	/* optional element of type sai:GetPowerSavingOptions */
};
#endif

#ifndef SOAP_TYPE___sai__SetTLSPSK
#define SOAP_TYPE___sai__SetTLSPSK (1405)
/* Operation wrapper: */
struct __sai__SetTLSPSK
{
public:
	_sai__SetTLSPSK *sai__SetTLSPSK;	/* optional element of type sai:SetTLSPSK */
};
#endif

#ifndef SOAP_TYPE___sai__PartialUnprovision
#define SOAP_TYPE___sai__PartialUnprovision (1409)
/* Operation wrapper: */
struct __sai__PartialUnprovision
{
public:
	_sai__PartialUnprovision *sai__PartialUnprovision;	/* optional element of type sai:PartialUnprovision */
};
#endif

#ifndef SOAP_TYPE___sai__SetMEBxPassword
#define SOAP_TYPE___sai__SetMEBxPassword (1413)
/* Operation wrapper: */
struct __sai__SetMEBxPassword
{
public:
	_sai__SetMEBxPassword *sai__SetMEBxPassword;	/* optional element of type sai:SetMEBxPassword */
};
#endif

#ifndef SOAP_TYPE___sai__SetProvisioningServerOTP
#define SOAP_TYPE___sai__SetProvisioningServerOTP (1417)
/* Operation wrapper: */
struct __sai__SetProvisioningServerOTP
{
public:
	_sai__SetProvisioningServerOTP *sai__SetProvisioningServerOTP;	/* optional element of type sai:SetProvisioningServerOTP */
};
#endif

#ifndef SOAP_TYPE___sai__GetProvisioningServerOTP
#define SOAP_TYPE___sai__GetProvisioningServerOTP (1421)
/* Operation wrapper: */
struct __sai__GetProvisioningServerOTP
{
public:
	_sai__GetProvisioningServerOTP *sai__GetProvisioningServerOTP;	/* optional element of type sai:GetProvisioningServerOTP */
};
#endif

#ifndef SOAP_TYPE___sai__EnumerateCertificateHashEntries
#define SOAP_TYPE___sai__EnumerateCertificateHashEntries (1425)
/* Operation wrapper: */
struct __sai__EnumerateCertificateHashEntries
{
public:
	_sai__EnumerateCertificateHashEntries *sai__EnumerateCertificateHashEntries;	/* optional element of type sai:EnumerateCertificateHashEntries */
};
#endif

#ifndef SOAP_TYPE___sai__GetCertificateHashEntry
#define SOAP_TYPE___sai__GetCertificateHashEntry (1429)
/* Operation wrapper: */
struct __sai__GetCertificateHashEntry
{
public:
	_sai__GetCertificateHashEntry *sai__GetCertificateHashEntry;	/* optional element of type sai:GetCertificateHashEntry */
};
#endif

#ifndef SOAP_TYPE___sai__AddCertificateHashEntry
#define SOAP_TYPE___sai__AddCertificateHashEntry (1433)
/* Operation wrapper: */
struct __sai__AddCertificateHashEntry
{
public:
	_sai__AddCertificateHashEntry *sai__AddCertificateHashEntry;	/* optional element of type sai:AddCertificateHashEntry */
};
#endif

#ifndef SOAP_TYPE___sai__DeleteCertificateHashEntry
#define SOAP_TYPE___sai__DeleteCertificateHashEntry (1437)
/* Operation wrapper: */
struct __sai__DeleteCertificateHashEntry
{
public:
	_sai__DeleteCertificateHashEntry *sai__DeleteCertificateHashEntry;	/* optional element of type sai:DeleteCertificateHashEntry */
};
#endif

#ifndef SOAP_TYPE___sai__EnableCertificateHashEntry
#define SOAP_TYPE___sai__EnableCertificateHashEntry (1441)
/* Operation wrapper: */
struct __sai__EnableCertificateHashEntry
{
public:
	_sai__EnableCertificateHashEntry *sai__EnableCertificateHashEntry;	/* optional element of type sai:EnableCertificateHashEntry */
};
#endif

#ifndef SOAP_TYPE___sai__GetZeroTouchConfigurationMode
#define SOAP_TYPE___sai__GetZeroTouchConfigurationMode (1445)
/* Operation wrapper: */
struct __sai__GetZeroTouchConfigurationMode
{
public:
	_sai__GetZeroTouchConfigurationMode *sai__GetZeroTouchConfigurationMode;	/* optional element of type sai:GetZeroTouchConfigurationMode */
};
#endif

#ifndef SOAP_TYPE___sai__SetZeroTouchConfigurationMode
#define SOAP_TYPE___sai__SetZeroTouchConfigurationMode (1449)
/* Operation wrapper: */
struct __sai__SetZeroTouchConfigurationMode
{
public:
	_sai__SetZeroTouchConfigurationMode *sai__SetZeroTouchConfigurationMode;	/* optional element of type sai:SetZeroTouchConfigurationMode */
};
#endif

#ifndef SOAP_TYPE___sai__GetProvisioningAuditRecord
#define SOAP_TYPE___sai__GetProvisioningAuditRecord (1453)
/* Operation wrapper: */
struct __sai__GetProvisioningAuditRecord
{
public:
	_sai__GetProvisioningAuditRecord *sai__GetProvisioningAuditRecord;	/* optional element of type sai:GetProvisioningAuditRecord */
};
#endif

#ifndef SOAP_TYPE___sai__GetProvisioningPID
#define SOAP_TYPE___sai__GetProvisioningPID (1457)
/* Operation wrapper: */
struct __sai__GetProvisioningPID
{
public:
	_sai__GetProvisioningPID *sai__GetProvisioningPID;	/* optional element of type sai:GetProvisioningPID */
};
#endif

#ifndef SOAP_TYPE___sai__ExtendProvisioningPeriod
#define SOAP_TYPE___sai__ExtendProvisioningPeriod (1461)
/* Operation wrapper: */
struct __sai__ExtendProvisioningPeriod
{
public:
	_sai__ExtendProvisioningPeriod *sai__ExtendProvisioningPeriod;	/* optional element of type sai:ExtendProvisioningPeriod */
};
#endif

#ifndef SOAP_TYPE___sai__GetRealmAuthOptions
#define SOAP_TYPE___sai__GetRealmAuthOptions (1465)
/* Operation wrapper: */
struct __sai__GetRealmAuthOptions
{
public:
	_sai__GetRealmAuthOptions *sai__GetRealmAuthOptions;	/* optional element of type sai:GetRealmAuthOptions */
};
#endif

#ifndef SOAP_TYPE___sai__SetRealmAuthOptions
#define SOAP_TYPE___sai__SetRealmAuthOptions (1469)
/* Operation wrapper: */
struct __sai__SetRealmAuthOptions
{
public:
	_sai__SetRealmAuthOptions *sai__SetRealmAuthOptions;	/* optional element of type sai:SetRealmAuthOptions */
};
#endif

#ifndef SOAP_TYPE___sai__SetEnvironmentDetection
#define SOAP_TYPE___sai__SetEnvironmentDetection (1473)
/* Operation wrapper: */
struct __sai__SetEnvironmentDetection
{
public:
	_sai__SetEnvironmentDetection *sai__SetEnvironmentDetection;	/* optional element of type sai:SetEnvironmentDetection */
};
#endif

#ifndef SOAP_TYPE___sai__GetEnvironmentDetection
#define SOAP_TYPE___sai__GetEnvironmentDetection (1477)
/* Operation wrapper: */
struct __sai__GetEnvironmentDetection
{
public:
	_sai__GetEnvironmentDetection *sai__GetEnvironmentDetection;	/* optional element of type sai:GetEnvironmentDetection */
};
#endif

#ifndef SOAP_TYPE___sai__EnumeratePowerPackages
#define SOAP_TYPE___sai__EnumeratePowerPackages (1481)
/* Operation wrapper: */
struct __sai__EnumeratePowerPackages
{
public:
	_sai__EnumeratePowerPackages *sai__EnumeratePowerPackages;	/* optional element of type sai:EnumeratePowerPackages */
};
#endif

#ifndef SOAP_TYPE___sai__GetPowerPackage
#define SOAP_TYPE___sai__GetPowerPackage (1485)
/* Operation wrapper: */
struct __sai__GetPowerPackage
{
public:
	_sai__GetPowerPackage *sai__GetPowerPackage;	/* optional element of type sai:GetPowerPackage */
};
#endif

#ifndef SOAP_TYPE___sai__GetActivePowerPackage
#define SOAP_TYPE___sai__GetActivePowerPackage (1489)
/* Operation wrapper: */
struct __sai__GetActivePowerPackage
{
public:
	_sai__GetActivePowerPackage *sai__GetActivePowerPackage;	/* optional element of type sai:GetActivePowerPackage */
};
#endif

#ifndef SOAP_TYPE___sai__SetActivePowerPackage
#define SOAP_TYPE___sai__SetActivePowerPackage (1493)
/* Operation wrapper: */
struct __sai__SetActivePowerPackage
{
public:
	_sai__SetActivePowerPackage *sai__SetActivePowerPackage;	/* optional element of type sai:SetActivePowerPackage */
};
#endif

#ifndef SOAP_TYPE___sai__SetGlobalPowerPolicy
#define SOAP_TYPE___sai__SetGlobalPowerPolicy (1497)
/* Operation wrapper: */
struct __sai__SetGlobalPowerPolicy
{
public:
	_sai__SetGlobalPowerPolicy *sai__SetGlobalPowerPolicy;	/* optional element of type sai:SetGlobalPowerPolicy */
};
#endif

#ifndef SOAP_TYPE___sai__GetGlobalPowerPolicy
#define SOAP_TYPE___sai__GetGlobalPowerPolicy (1501)
/* Operation wrapper: */
struct __sai__GetGlobalPowerPolicy
{
public:
	_sai__GetGlobalPowerPolicy *sai__GetGlobalPowerPolicy;	/* optional element of type sai:GetGlobalPowerPolicy */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreAddKey
#define SOAP_TYPE___sai__CertStoreAddKey (1505)
/* Operation wrapper: */
struct __sai__CertStoreAddKey
{
public:
	_sai__CertStoreAddKey *sai__CertStoreAddKey;	/* optional element of type sai:CertStoreAddKey */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreEnumerateKeys
#define SOAP_TYPE___sai__CertStoreEnumerateKeys (1509)
/* Operation wrapper: */
struct __sai__CertStoreEnumerateKeys
{
public:
	_sai__CertStoreEnumerateKeys *sai__CertStoreEnumerateKeys;	/* optional element of type sai:CertStoreEnumerateKeys */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreGetKey
#define SOAP_TYPE___sai__CertStoreGetKey (1513)
/* Operation wrapper: */
struct __sai__CertStoreGetKey
{
public:
	_sai__CertStoreGetKey *sai__CertStoreGetKey;	/* optional element of type sai:CertStoreGetKey */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreRemoveKey
#define SOAP_TYPE___sai__CertStoreRemoveKey (1517)
/* Operation wrapper: */
struct __sai__CertStoreRemoveKey
{
public:
	_sai__CertStoreRemoveKey *sai__CertStoreRemoveKey;	/* optional element of type sai:CertStoreRemoveKey */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreAddCertificate
#define SOAP_TYPE___sai__CertStoreAddCertificate (1521)
/* Operation wrapper: */
struct __sai__CertStoreAddCertificate
{
public:
	_sai__CertStoreAddCertificate *sai__CertStoreAddCertificate;	/* optional element of type sai:CertStoreAddCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreGetCertificate
#define SOAP_TYPE___sai__CertStoreGetCertificate (1525)
/* Operation wrapper: */
struct __sai__CertStoreGetCertificate
{
public:
	_sai__CertStoreGetCertificate *sai__CertStoreGetCertificate;	/* optional element of type sai:CertStoreGetCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreEnumerateCertificates
#define SOAP_TYPE___sai__CertStoreEnumerateCertificates (1529)
/* Operation wrapper: */
struct __sai__CertStoreEnumerateCertificates
{
public:
	_sai__CertStoreEnumerateCertificates *sai__CertStoreEnumerateCertificates;	/* optional element of type sai:CertStoreEnumerateCertificates */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreRemoveCertificate
#define SOAP_TYPE___sai__CertStoreRemoveCertificate (1533)
/* Operation wrapper: */
struct __sai__CertStoreRemoveCertificate
{
public:
	_sai__CertStoreRemoveCertificate *sai__CertStoreRemoveCertificate;	/* optional element of type sai:CertStoreRemoveCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreGetPKCS10Request
#define SOAP_TYPE___sai__CertStoreGetPKCS10Request (1537)
/* Operation wrapper: */
struct __sai__CertStoreGetPKCS10Request
{
public:
	_sai__CertStoreGetPKCS10Request *sai__CertStoreGetPKCS10Request;	/* optional element of type sai:CertStoreGetPKCS10Request */
};
#endif

#ifndef SOAP_TYPE___sai__CertStoreUpdateCertificate
#define SOAP_TYPE___sai__CertStoreUpdateCertificate (1541)
/* Operation wrapper: */
struct __sai__CertStoreUpdateCertificate
{
public:
	_sai__CertStoreUpdateCertificate *sai__CertStoreUpdateCertificate;	/* optional element of type sai:CertStoreUpdateCertificate */
};
#endif

#ifndef SOAP_TYPE___sai__SetTLSCredentials
#define SOAP_TYPE___sai__SetTLSCredentials (1545)
/* Operation wrapper: */
struct __sai__SetTLSCredentials
{
public:
	_sai__SetTLSCredentials *sai__SetTLSCredentials;	/* optional element of type sai:SetTLSCredentials */
};
#endif

#ifndef SOAP_TYPE___sai__GetTLSCredentials
#define SOAP_TYPE___sai__GetTLSCredentials (1549)
/* Operation wrapper: */
struct __sai__GetTLSCredentials
{
public:
	_sai__GetTLSCredentials *sai__GetTLSCredentials;	/* optional element of type sai:GetTLSCredentials */
};
#endif

#ifndef SOAP_TYPE___sai__EnableVpnRouting
#define SOAP_TYPE___sai__EnableVpnRouting (1553)
/* Operation wrapper: */
struct __sai__EnableVpnRouting
{
public:
	_sai__EnableVpnRouting *sai__EnableVpnRouting;	/* optional element of type sai:EnableVpnRouting */
};
#endif

#ifndef SOAP_TYPE___sai__GetConfigurationServerFQDN
#define SOAP_TYPE___sai__GetConfigurationServerFQDN (1557)
/* Operation wrapper: */
struct __sai__GetConfigurationServerFQDN
{
public:
	_sai__GetConfigurationServerFQDN *sai__GetConfigurationServerFQDN;	/* optional element of type sai:GetConfigurationServerFQDN */
};
#endif

#ifndef SOAP_TYPE___sai__SetConfigurationServerFQDN
#define SOAP_TYPE___sai__SetConfigurationServerFQDN (1561)
/* Operation wrapper: */
struct __sai__SetConfigurationServerFQDN
{
public:
	_sai__SetConfigurationServerFQDN *sai__SetConfigurationServerFQDN;	/* optional element of type sai:SetConfigurationServerFQDN */
};
#endif

#ifndef SOAP_TYPE___sai__SetAclEnabledState
#define SOAP_TYPE___sai__SetAclEnabledState (1565)
/* Operation wrapper: */
struct __sai__SetAclEnabledState
{
public:
	_sai__SetAclEnabledState *sai__SetAclEnabledState;	/* optional element of type sai:SetAclEnabledState */
};
#endif

#ifndef SOAP_TYPE___sai__GetAclEnabledState
#define SOAP_TYPE___sai__GetAclEnabledState (1569)
/* Operation wrapper: */
struct __sai__GetAclEnabledState
{
public:
	_sai__GetAclEnabledState *sai__GetAclEnabledState;	/* optional element of type sai:GetAclEnabledState */
};
#endif

#ifndef SOAP_TYPE___str__ExecuteStorageOperation
#define SOAP_TYPE___str__ExecuteStorageOperation (1573)
/* Operation wrapper: */
struct __str__ExecuteStorageOperation
{
public:
	_str__ExecuteStorageOperation *str__ExecuteStorageOperation;	/* optional element of type str:ExecuteStorageOperation */
};
#endif

#ifndef SOAP_TYPE___stra__GetGlobalStorageAttributes
#define SOAP_TYPE___stra__GetGlobalStorageAttributes (1577)
/* Operation wrapper: */
struct __stra__GetGlobalStorageAttributes
{
public:
	_stra__GetGlobalStorageAttributes *stra__GetGlobalStorageAttributes;	/* optional element of type stra:GetGlobalStorageAttributes */
};
#endif

#ifndef SOAP_TYPE___stra__SetGlobalStorageAttributes
#define SOAP_TYPE___stra__SetGlobalStorageAttributes (1581)
/* Operation wrapper: */
struct __stra__SetGlobalStorageAttributes
{
public:
	_stra__SetGlobalStorageAttributes *stra__SetGlobalStorageAttributes;	/* optional element of type stra:SetGlobalStorageAttributes */
};
#endif

#ifndef SOAP_TYPE___stra__AdminGetRegisteredApplications
#define SOAP_TYPE___stra__AdminGetRegisteredApplications (1585)
/* Operation wrapper: */
struct __stra__AdminGetRegisteredApplications
{
public:
	_stra__AdminGetRegisteredApplications *stra__AdminGetRegisteredApplications;	/* optional element of type stra:AdminGetRegisteredApplications */
};
#endif

#ifndef SOAP_TYPE___stra__AdminGetApplicationAttributes
#define SOAP_TYPE___stra__AdminGetApplicationAttributes (1589)
/* Operation wrapper: */
struct __stra__AdminGetApplicationAttributes
{
public:
	_stra__AdminGetApplicationAttributes *stra__AdminGetApplicationAttributes;	/* optional element of type stra:AdminGetApplicationAttributes */
};
#endif

#ifndef SOAP_TYPE___stra__AdminRemoveApplication
#define SOAP_TYPE___stra__AdminRemoveApplication (1593)
/* Operation wrapper: */
struct __stra__AdminRemoveApplication
{
public:
	_stra__AdminRemoveApplication *stra__AdminRemoveApplication;	/* optional element of type stra:AdminRemoveApplication */
};
#endif

#ifndef SOAP_TYPE___stra__AddStorageEaclEntry
#define SOAP_TYPE___stra__AddStorageEaclEntry (1597)
/* Operation wrapper: */
struct __stra__AddStorageEaclEntry
{
public:
	_stra__AddStorageEaclEntry *stra__AddStorageEaclEntry;	/* optional element of type stra:AddStorageEaclEntry */
};
#endif

#ifndef SOAP_TYPE___stra__EnumerateStorageEaclEntries
#define SOAP_TYPE___stra__EnumerateStorageEaclEntries (1601)
/* Operation wrapper: */
struct __stra__EnumerateStorageEaclEntries
{
public:
	_stra__EnumerateStorageEaclEntries *stra__EnumerateStorageEaclEntries;	/* optional element of type stra:EnumerateStorageEaclEntries */
};
#endif

#ifndef SOAP_TYPE___stra__GetStorageEaclEntry
#define SOAP_TYPE___stra__GetStorageEaclEntry (1605)
/* Operation wrapper: */
struct __stra__GetStorageEaclEntry
{
public:
	_stra__GetStorageEaclEntry *stra__GetStorageEaclEntry;	/* optional element of type stra:GetStorageEaclEntry */
};
#endif

#ifndef SOAP_TYPE___stra__RemoveStorageEaclEntry
#define SOAP_TYPE___stra__RemoveStorageEaclEntry (1609)
/* Operation wrapper: */
struct __stra__RemoveStorageEaclEntry
{
public:
	_stra__RemoveStorageEaclEntry *stra__RemoveStorageEaclEntry;	/* optional element of type stra:RemoveStorageEaclEntry */
};
#endif

#ifndef SOAP_TYPE___stra__AddStorageFpaclEntry
#define SOAP_TYPE___stra__AddStorageFpaclEntry (1613)
/* Operation wrapper: */
struct __stra__AddStorageFpaclEntry
{
public:
	_stra__AddStorageFpaclEntry *stra__AddStorageFpaclEntry;	/* optional element of type stra:AddStorageFpaclEntry */
};
#endif

#ifndef SOAP_TYPE___stra__EnumerateStorageAllocEntries
#define SOAP_TYPE___stra__EnumerateStorageAllocEntries (1617)
/* Operation wrapper: */
struct __stra__EnumerateStorageAllocEntries
{
public:
	_stra__EnumerateStorageAllocEntries *stra__EnumerateStorageAllocEntries;	/* optional element of type stra:EnumerateStorageAllocEntries */
};
#endif

#ifndef SOAP_TYPE___stra__GetStorageAllocEntry
#define SOAP_TYPE___stra__GetStorageAllocEntry (1621)
/* Operation wrapper: */
struct __stra__GetStorageAllocEntry
{
public:
	_stra__GetStorageAllocEntry *stra__GetStorageAllocEntry;	/* optional element of type stra:GetStorageAllocEntry */
};
#endif

#ifndef SOAP_TYPE___stra__UpdateStorageFpaclEntry
#define SOAP_TYPE___stra__UpdateStorageFpaclEntry (1625)
/* Operation wrapper: */
struct __stra__UpdateStorageFpaclEntry
{
public:
	_stra__UpdateStorageFpaclEntry *stra__UpdateStorageFpaclEntry;	/* optional element of type stra:UpdateStorageFpaclEntry */
};
#endif

#ifndef SOAP_TYPE___stra__RemoveStorageFpaclEntry
#define SOAP_TYPE___stra__RemoveStorageFpaclEntry (1629)
/* Operation wrapper: */
struct __stra__RemoveStorageFpaclEntry
{
public:
	_stra__RemoveStorageFpaclEntry *stra__RemoveStorageFpaclEntry;	/* optional element of type stra:RemoveStorageFpaclEntry */
};
#endif

#ifndef SOAP_TYPE___tim__GetLowAccuracyTimeSynch
#define SOAP_TYPE___tim__GetLowAccuracyTimeSynch (1633)
/* Operation wrapper: */
struct __tim__GetLowAccuracyTimeSynch
{
public:
	_tim__GetLowAccuracyTimeSynch *tim__GetLowAccuracyTimeSynch;	/* optional element of type tim:GetLowAccuracyTimeSynch */
};
#endif

#ifndef SOAP_TYPE___tim__SetHighAccuracyTimeSynch
#define SOAP_TYPE___tim__SetHighAccuracyTimeSynch (1637)
/* Operation wrapper: */
struct __tim__SetHighAccuracyTimeSynch
{
public:
	_tim__SetHighAccuracyTimeSynch *tim__SetHighAccuracyTimeSynch;	/* optional element of type tim:SetHighAccuracyTimeSynch */
};
#endif

#ifndef SOAP_TYPE___wcxs__AddWirelessProfile
#define SOAP_TYPE___wcxs__AddWirelessProfile (1641)
/* Operation wrapper: */
struct __wcxs__AddWirelessProfile
{
public:
	_wcxs__AddWirelessProfileRequest *wcxs__AddWirelessProfileRequest;	/* optional element of type wcxs:AddWirelessProfileRequest */
};
#endif

#ifndef SOAP_TYPE___wcxs__GetWirelessProfile
#define SOAP_TYPE___wcxs__GetWirelessProfile (1645)
/* Operation wrapper: */
struct __wcxs__GetWirelessProfile
{
public:
	_wcxs__GetWirelessProfileRequest *wcxs__GetWirelessProfileRequest;	/* optional element of type wcxs:GetWirelessProfileRequest */
};
#endif

#ifndef SOAP_TYPE___wcxs__RemoveWirelessProfile
#define SOAP_TYPE___wcxs__RemoveWirelessProfile (1649)
/* Operation wrapper: */
struct __wcxs__RemoveWirelessProfile
{
public:
	_wcxs__RemoveWirelessProfileRequest *wcxs__RemoveWirelessProfileRequest;	/* optional element of type wcxs:RemoveWirelessProfileRequest */
};
#endif

#ifndef SOAP_TYPE___wcxs__UpdateWirelessProfile
#define SOAP_TYPE___wcxs__UpdateWirelessProfile (1653)
/* Operation wrapper: */
struct __wcxs__UpdateWirelessProfile
{
public:
	_wcxs__UpdateWirelessProfileRequest *wcxs__UpdateWirelessProfileRequest;	/* optional element of type wcxs:UpdateWirelessProfileRequest */
};
#endif

#ifndef SOAP_TYPE___wcxs__EnumerateWirelessProfiles
#define SOAP_TYPE___wcxs__EnumerateWirelessProfiles (1657)
/* Operation wrapper: */
struct __wcxs__EnumerateWirelessProfiles
{
public:
	_wcxs__EnumerateWirelessProfilesRequest *wcxs__EnumerateWirelessProfilesRequest;	/* optional element of type wcxs:EnumerateWirelessProfilesRequest */
};
#endif

#ifndef SOAP_TYPE___wcxs__GetWirelessCapabilities
#define SOAP_TYPE___wcxs__GetWirelessCapabilities (1661)
/* Operation wrapper: */
struct __wcxs__GetWirelessCapabilities
{
public:
	_wcxs__GetWirelessCapabilitiesRequest *wcxs__GetWirelessCapabilitiesRequest;	/* optional element of type wcxs:GetWirelessCapabilitiesRequest */
};
#endif

#ifndef SOAP_TYPE___wcxs__GetWirelessSettings
#define SOAP_TYPE___wcxs__GetWirelessSettings (1665)
/* Operation wrapper: */
struct __wcxs__GetWirelessSettings
{
public:
	_wcxs__GetWirelessSettingsRequest *wcxs__GetWirelessSettingsRequest;	/* optional element of type wcxs:GetWirelessSettingsRequest */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (1668)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (1669)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (1671)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (1672)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (1673)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (8)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_cmn__PT_USCORESTATUS
#define SOAP_TYPE_cmn__PT_USCORESTATUS (543)
typedef unsigned int cmn__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_cmn__HostNameType
#define SOAP_TYPE_cmn__HostNameType (544)
typedef std::string cmn__HostNameType;
#endif

#ifndef SOAP_TYPE_cmn__IPv4AddressType
#define SOAP_TYPE_cmn__IPv4AddressType (545)
typedef unsigned int cmn__IPv4AddressType;
#endif

#ifndef SOAP_TYPE_cmn__IPv4AddressStringType
#define SOAP_TYPE_cmn__IPv4AddressStringType (546)
typedef std::string cmn__IPv4AddressStringType;
#endif

#ifndef SOAP_TYPE_cmn__IPv6AddressStringType
#define SOAP_TYPE_cmn__IPv6AddressStringType (547)
typedef std::string cmn__IPv6AddressStringType;
#endif

#ifndef SOAP_TYPE_cmn__InterfaceHandleType
#define SOAP_TYPE_cmn__InterfaceHandleType (548)
typedef unsigned int cmn__InterfaceHandleType;
#endif

#ifndef SOAP_TYPE_cmn__GuidBuf
#define SOAP_TYPE_cmn__GuidBuf (549)
typedef xsd__base64Binary cmn__GuidBuf;
#endif

#ifndef SOAP_TYPE_cstr__KeyPairHandleType
#define SOAP_TYPE_cstr__KeyPairHandleType (550)
typedef unsigned int cstr__KeyPairHandleType;
#endif

#ifndef SOAP_TYPE_sai__PT_USCORESTATUS
#define SOAP_TYPE_sai__PT_USCORESTATUS (551)
typedef unsigned int sai__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_sai__UserAclEntryHandleType
#define SOAP_TYPE_sai__UserAclEntryHandleType (553)
typedef unsigned int sai__UserAclEntryHandleType;
#endif

#ifndef SOAP_TYPE_sai__AclStringType
#define SOAP_TYPE_sai__AclStringType (554)
typedef std::string sai__AclStringType;
#endif

#ifndef SOAP_TYPE_sai__AclPasswordStringType
#define SOAP_TYPE_sai__AclPasswordStringType (555)
typedef std::string sai__AclPasswordStringType;
#endif

#ifndef SOAP_TYPE_sai__IPv4AddressType
#define SOAP_TYPE_sai__IPv4AddressType (556)
typedef unsigned int sai__IPv4AddressType;
#endif

#ifndef SOAP_TYPE_sai__CertificateHandleType
#define SOAP_TYPE_sai__CertificateHandleType (568)
typedef unsigned int sai__CertificateHandleType;
#endif

#ifndef SOAP_TYPE_sai__MEBxPasswordType
#define SOAP_TYPE_sai__MEBxPasswordType (570)
typedef std::string sai__MEBxPasswordType;
#endif

#ifndef SOAP_TYPE_sai__ProvisioningOTPType
#define SOAP_TYPE_sai__ProvisioningOTPType (571)
typedef xsd__base64Binary sai__ProvisioningOTPType;
#endif

#ifndef SOAP_TYPE_sai__FriendlyNameType
#define SOAP_TYPE_sai__FriendlyNameType (572)
typedef std::string sai__FriendlyNameType;
#endif

#ifndef SOAP_TYPE__sai__SpnString
#define SOAP_TYPE__sai__SpnString (575)
typedef std::string _sai__SpnString;
#endif

#ifndef SOAP_TYPE__sai__KerberosRealmName
#define SOAP_TYPE__sai__KerberosRealmName (576)
typedef std::string _sai__KerberosRealmName;
#endif

#ifndef SOAP_TYPE_net__PT_USCORESTATUS
#define SOAP_TYPE_net__PT_USCORESTATUS (578)
typedef unsigned int net__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_net__IPv4AddressType
#define SOAP_TYPE_net__IPv4AddressType (579)
typedef unsigned int net__IPv4AddressType;
#endif

#ifndef SOAP_TYPE_net__MACAddressType
#define SOAP_TYPE_net__MACAddressType (581)
typedef std::string net__MACAddressType;
#endif

#ifndef SOAP_TYPE_net__LinkPolicyType
#define SOAP_TYPE_net__LinkPolicyType (583)
typedef unsigned char net__LinkPolicyType;
#endif

#ifndef SOAP_TYPE_net__InterfaceHandleType
#define SOAP_TYPE_net__InterfaceHandleType (584)
typedef unsigned int net__InterfaceHandleType;
#endif

#ifndef SOAP_TYPE_stra__PT_USCORESTATUS
#define SOAP_TYPE_stra__PT_USCORESTATUS (585)
typedef unsigned int stra__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_stra__StorageApplicationHandleType
#define SOAP_TYPE_stra__StorageApplicationHandleType (586)
typedef unsigned int stra__StorageApplicationHandleType;
#endif

#ifndef SOAP_TYPE_stra__StorageEaclEntryHandleType
#define SOAP_TYPE_stra__StorageEaclEntryHandleType (588)
typedef unsigned int stra__StorageEaclEntryHandleType;
#endif

#ifndef SOAP_TYPE_stra__StorageAllocEntryHandleType
#define SOAP_TYPE_stra__StorageAllocEntryHandleType (589)
typedef unsigned int stra__StorageAllocEntryHandleType;
#endif

#ifndef SOAP_TYPE_emi__TimeType
#define SOAP_TYPE_emi__TimeType (590)
typedef unsigned int emi__TimeType;
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionPolicyIDType
#define SOAP_TYPE_emi__AlertSubscriptionPolicyIDType (591)
typedef unsigned char emi__AlertSubscriptionPolicyIDType;
#endif

#ifndef SOAP_TYPE_emi__AlertSubscriptionHandleType
#define SOAP_TYPE_emi__AlertSubscriptionHandleType (592)
typedef unsigned int emi__AlertSubscriptionHandleType;
#endif

#ifndef SOAP_TYPE_emi__EventFilterHandleType
#define SOAP_TYPE_emi__EventFilterHandleType (593)
typedef unsigned int emi__EventFilterHandleType;
#endif

#ifndef SOAP_TYPE_emi__PT_USCORESTATUS
#define SOAP_TYPE_emi__PT_USCORESTATUS (595)
typedef unsigned int emi__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_emi__IPv4AddressType
#define SOAP_TYPE_emi__IPv4AddressType (596)
typedef unsigned int emi__IPv4AddressType;
#endif

#ifndef SOAP_TYPE_emi__SensorHandleType
#define SOAP_TYPE_emi__SensorHandleType (597)
typedef unsigned int emi__SensorHandleType;
#endif

#ifndef SOAP_TYPE_emi__CommunityStringType
#define SOAP_TYPE_emi__CommunityStringType (599)
typedef std::string emi__CommunityStringType;
#endif

#ifndef SOAP_TYPE_cb__PT_USCORESTATUS
#define SOAP_TYPE_cb__PT_USCORESTATUS (600)
typedef unsigned int cb__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_cb__TimeType
#define SOAP_TYPE_cb__TimeType (601)
typedef unsigned int cb__TimeType;
#endif

#ifndef SOAP_TYPE_cb__IPv4AddressStringType
#define SOAP_TYPE_cb__IPv4AddressStringType (602)
typedef std::string cb__IPv4AddressStringType;
#endif

#ifndef SOAP_TYPE_cb__IPv6AddressStringType
#define SOAP_TYPE_cb__IPv6AddressStringType (603)
typedef std::string cb__IPv6AddressStringType;
#endif

#ifndef SOAP_TYPE__cb__FilterName
#define SOAP_TYPE__cb__FilterName (610)
typedef std::string _cb__FilterName;
#endif

#ifndef SOAP_TYPE__cb__PolicyName
#define SOAP_TYPE__cb__PolicyName (611)
typedef std::string _cb__PolicyName;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCORESTATUS
#define SOAP_TYPE_hwa__PT_USCORESTATUS (612)
typedef unsigned int hwa__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREBIOS_USCORECHARACTERISTICS
#define SOAP_TYPE_hwa__PT_USCOREBIOS_USCORECHARACTERISTICS (614)
typedef unsigned int hwa__PT_USCOREBIOS_USCORECHARACTERISTICS;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCORETYPE
#define SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCORETYPE (615)
typedef unsigned char hwa__PT_USCOREPROCESSOR_USCORETYPE;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCOREFAMILY
#define SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCOREFAMILY (616)
typedef unsigned char hwa__PT_USCOREPROCESSOR_USCOREFAMILY;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCORESTATUS
#define SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCORESTATUS (617)
typedef unsigned char hwa__PT_USCOREPROCESSOR_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCOREUPGRADE
#define SOAP_TYPE_hwa__PT_USCOREPROCESSOR_USCOREUPGRADE (618)
typedef unsigned char hwa__PT_USCOREPROCESSOR_USCOREUPGRADE;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREMEMORY_USCOREFORM_USCOREFACTOR
#define SOAP_TYPE_hwa__PT_USCOREMEMORY_USCOREFORM_USCOREFACTOR (619)
typedef unsigned char hwa__PT_USCOREMEMORY_USCOREFORM_USCOREFACTOR;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREMEMORY_USCORETYPE
#define SOAP_TYPE_hwa__PT_USCOREMEMORY_USCORETYPE (620)
typedef unsigned char hwa__PT_USCOREMEMORY_USCORETYPE;
#endif

#ifndef SOAP_TYPE_hwa__PT_USCOREMEMORY_USCORETYPE_USCOREDETAIL
#define SOAP_TYPE_hwa__PT_USCOREMEMORY_USCORETYPE_USCOREDETAIL (623)
typedef unsigned short hwa__PT_USCOREMEMORY_USCORETYPE_USCOREDETAIL;
#endif

#ifndef SOAP_TYPE_apr__PT_USCORESTATUS
#define SOAP_TYPE_apr__PT_USCORESTATUS (624)
typedef unsigned int apr__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_apr__WatchdogState
#define SOAP_TYPE_apr__WatchdogState (625)
typedef unsigned char apr__WatchdogState;
#endif

#ifndef SOAP_TYPE__apr__AgentDescription
#define SOAP_TYPE__apr__AgentDescription (627)
typedef std::string _apr__AgentDescription;
#endif

#ifndef SOAP_TYPE_apl__PT_USCORESTATUS
#define SOAP_TYPE_apl__PT_USCORESTATUS (628)
typedef unsigned int apl__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_idr__PT_USCORESTATUS
#define SOAP_TYPE_idr__PT_USCORESTATUS (629)
typedef unsigned int idr__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_idr__TimeType
#define SOAP_TYPE_idr__TimeType (630)
typedef unsigned int idr__TimeType;
#endif

#ifndef SOAP_TYPE_idr__IPv4AddressType
#define SOAP_TYPE_idr__IPv4AddressType (631)
typedef unsigned int idr__IPv4AddressType;
#endif

#ifndef SOAP_TYPE_tim__PT_USCORESTATUS
#define SOAP_TYPE_tim__PT_USCORESTATUS (632)
typedef unsigned int tim__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_tim__TimeType
#define SOAP_TYPE_tim__TimeType (633)
typedef unsigned int tim__TimeType;
#endif

#ifndef SOAP_TYPE_str__PT_USCORESTATUS
#define SOAP_TYPE_str__PT_USCORESTATUS (634)
typedef unsigned int str__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_inf__PT_USCORESTATUS
#define SOAP_TYPE_inf__PT_USCORESTATUS (635)
typedef unsigned int inf__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_inf__TimeType
#define SOAP_TYPE_inf__TimeType (636)
typedef unsigned int inf__TimeType;
#endif

#ifndef SOAP_TYPE_inf__IPv4AddressType
#define SOAP_TYPE_inf__IPv4AddressType (637)
typedef unsigned int inf__IPv4AddressType;
#endif

#ifndef SOAP_TYPE_rci__SystemPowerStateType
#define SOAP_TYPE_rci__SystemPowerStateType (642)
typedef unsigned int rci__SystemPowerStateType;
#endif

#ifndef SOAP_TYPE_rci__PT_USCORESTATUS
#define SOAP_TYPE_rci__PT_USCORESTATUS (643)
typedef unsigned int rci__PT_USCORESTATUS;
#endif

#ifndef SOAP_TYPE_rci__SystemCapabilitiesSupportedType
#define SOAP_TYPE_rci__SystemCapabilitiesSupportedType (644)
typedef unsigned char rci__SystemCapabilitiesSupportedType;
#endif

#ifndef SOAP_TYPE_rci__SpecialCommandsSupportedType
#define SOAP_TYPE_rci__SpecialCommandsSupportedType (645)
typedef unsigned short rci__SpecialCommandsSupportedType;
#endif

#ifndef SOAP_TYPE_rci__SystemFirmwareCapabilitiesType
#define SOAP_TYPE_rci__SystemFirmwareCapabilitiesType (646)
typedef unsigned int rci__SystemFirmwareCapabilitiesType;
#endif

#ifndef SOAP_TYPE_rci__OemDefinedCapabilitiesType
#define SOAP_TYPE_rci__OemDefinedCapabilitiesType (647)
typedef unsigned int rci__OemDefinedCapabilitiesType;
#endif

#ifndef SOAP_TYPE_rci__BootOptionsType
#define SOAP_TYPE_rci__BootOptionsType (650)
typedef unsigned short rci__BootOptionsType;
#endif

#ifndef SOAP_TYPE_rci__SpecialCommandParameterType
#define SOAP_TYPE_rci__SpecialCommandParameterType (651)
typedef unsigned short rci__SpecialCommandParameterType;
#endif

#ifndef SOAP_TYPE_rci__OemParametersType
#define SOAP_TYPE_rci__OemParametersType (652)
typedef unsigned short rci__OemParametersType;
#endif

#ifndef SOAP_TYPE_wcxs__ProfileNameType
#define SOAP_TYPE_wcxs__ProfileNameType (653)
typedef std::string wcxs__ProfileNameType;
#endif

#ifndef SOAP_TYPE_wcxs__ProfilePriorityType
#define SOAP_TYPE_wcxs__ProfilePriorityType (654)
typedef unsigned char wcxs__ProfilePriorityType;
#endif

#ifndef SOAP_TYPE_wcxs__RawKey64Type
#define SOAP_TYPE_wcxs__RawKey64Type (656)
typedef xsd__base64Binary wcxs__RawKey64Type;
#endif

#ifndef SOAP_TYPE_wcxs__RawKey128Type
#define SOAP_TYPE_wcxs__RawKey128Type (657)
typedef xsd__base64Binary wcxs__RawKey128Type;
#endif

#ifndef SOAP_TYPE_wcxs__RawKey256Type
#define SOAP_TYPE_wcxs__RawKey256Type (658)
typedef xsd__base64Binary wcxs__RawKey256Type;
#endif

#ifndef SOAP_TYPE_wcxs__PassPhrase5Type
#define SOAP_TYPE_wcxs__PassPhrase5Type (659)
typedef std::string wcxs__PassPhrase5Type;
#endif

#ifndef SOAP_TYPE_wcxs__PassPhraseWEP128Type
#define SOAP_TYPE_wcxs__PassPhraseWEP128Type (660)
typedef std::string wcxs__PassPhraseWEP128Type;
#endif

#ifndef SOAP_TYPE_wcxs__PassPhrase63Type
#define SOAP_TYPE_wcxs__PassPhrase63Type (661)
typedef std::string wcxs__PassPhrase63Type;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/

typedef enum sai__UserAclRealmType sai__UserAclRealmType;
typedef enum sai__RsaKeyEncodingType sai__RsaKeyEncodingType;
typedef enum sai__RsaCertificateEncodingType sai__RsaCertificateEncodingType;
typedef enum sai__RngKeyEncodingType sai__RngKeyEncodingType;
typedef enum sai__ProvisioningModeType sai__ProvisioningModeType;
typedef enum sai__AccessPermissionType sai__AccessPermissionType;
typedef enum sai__KerberosSpnProtocolType sai__KerberosSpnProtocolType;
typedef enum sai__KerberosEncryptionType sai__KerberosEncryptionType;
typedef enum sai__PowerStateType sai__PowerStateType;
typedef enum sai__EnabledInterfacesType sai__EnabledInterfacesType;
typedef enum sai__InterfaceType sai__InterfaceType;
typedef enum sai__TlsAthenticationType sai__TlsAthenticationType;
typedef enum sai__ProvisioningTLSModeType sai__ProvisioningTLSModeType;
typedef enum sai__HashTypeType sai__HashTypeType;
typedef enum sai__HTTPAuthOptionType sai__HTTPAuthOptionType;
typedef enum xcfg__CertNameOptionsType xcfg__CertNameOptionsType;
typedef enum net__DhcpModeType net__DhcpModeType;
typedef enum net__InterfaceModeType net__InterfaceModeType;
typedef enum stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE stra__ISVS_USCOREAPP_USCOREATTR_USCORETYPE;
typedef enum emi__EventSeverityType emi__EventSeverityType;
typedef enum emi__AlertAuthOptionsType emi__AlertAuthOptionsType;
typedef enum cb__CircuitBreakerFilterDirectionType cb__CircuitBreakerFilterDirectionType;
typedef enum cb__CircuitBreakerFilterIPAddressDirectionType cb__CircuitBreakerFilterIPAddressDirectionType;
typedef enum cb__CircuitBreakerProfileType cb__CircuitBreakerProfileType;
typedef enum cb__CircuitBreakerApplicationType cb__CircuitBreakerApplicationType;
typedef enum cb__HcbStateType cb__HcbStateType;
typedef enum cb__HcbTriggerReasonType cb__HcbTriggerReasonType;
typedef enum hwa__AssetTypeType hwa__AssetTypeType;
typedef enum apr__CbActionType apr__CbActionType;
typedef enum inf__ProvisioningModeType inf__ProvisioningModeType;
typedef enum inf__ProvisioningStateType inf__ProvisioningStateType;
typedef enum inf__PasswordModelType inf__PasswordModelType;
typedef enum inf__EnabledInterfacesType inf__EnabledInterfacesType;
typedef enum rci__RemoteControlCommandType rci__RemoteControlCommandType;
typedef enum rci__SpecialCommandType rci__SpecialCommandType;
typedef enum wcxs__KeyIndexType wcxs__KeyIndexType;
typedef enum wcxs__FeatureType wcxs__FeatureType;

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___apl__AgentWatchdogShutdown(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apl__AgentWatchdogShutdown *apl__AgentWatchdogShutdown, _apl__AgentWatchdogShutdownResponse *apl__AgentWatchdogShutdownResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apl__AgentWatchdogHeartbeat(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apl__AgentWatchdogHeartbeat *apl__AgentWatchdogHeartbeat, _apl__AgentWatchdogHeartbeatResponse *apl__AgentWatchdogHeartbeatResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apl__AgentWatchdogRegister(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apl__AgentWatchdogRegister *apl__AgentWatchdogRegister, _apl__AgentWatchdogRegisterResponse *apl__AgentWatchdogRegisterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogCreate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogCreate *apr__ConsoleWatchdogCreate, _apr__ConsoleWatchdogCreateResponse *apr__ConsoleWatchdogCreateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogDelete(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogDelete *apr__ConsoleWatchdogDelete, _apr__ConsoleWatchdogDeleteResponse *apr__ConsoleWatchdogDeleteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogEnumerate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogEnumerate *apr__ConsoleWatchdogEnumerate, _apr__ConsoleWatchdogEnumerateResponse *apr__ConsoleWatchdogEnumerateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogSetActions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogSetActions *apr__ConsoleWatchdogSetActions, _apr__ConsoleWatchdogSetActionsResponse *apr__ConsoleWatchdogSetActionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogGetActions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogGetActions *apr__ConsoleWatchdogGetActions, _apr__ConsoleWatchdogGetActionsResponse *apr__ConsoleWatchdogGetActionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogSetCbPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogSetCbPolicy *apr__ConsoleWatchdogSetCbPolicy, _apr__ConsoleWatchdogSetCbPolicyResponse *apr__ConsoleWatchdogSetCbPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogGetCbPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogGetCbPolicy *apr__ConsoleWatchdogGetCbPolicy, _apr__ConsoleWatchdogGetCbPolicyResponse *apr__ConsoleWatchdogGetCbPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___apr__ConsoleWatchdogQueryCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _apr__ConsoleWatchdogQueryCapabilities *apr__ConsoleWatchdogQueryCapabilities, _apr__ConsoleWatchdogQueryCapabilitiesResponse *apr__ConsoleWatchdogQueryCapabilitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyCreate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyCreate *cb__CbPolicyCreate, _cb__CbPolicyCreateResponse *cb__CbPolicyCreateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyGet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyGet *cb__CbPolicyGet, _cb__CbPolicyGetResponse *cb__CbPolicyGetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyDelete(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyDelete *cb__CbPolicyDelete, _cb__CbPolicyDeleteResponse *cb__CbPolicyDeleteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyEnumerate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyEnumerate *cb__CbPolicyEnumerate, _cb__CbPolicyEnumerateResponse *cb__CbPolicyEnumerateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyEnable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyEnable *cb__CbPolicyEnable, _cb__CbPolicyEnableResponse *cb__CbPolicyEnableResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyDisable(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyDisable *cb__CbPolicyDisable, _cb__CbPolicyDisableResponse *cb__CbPolicyDisableResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyGetEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyGetEnabled *cb__CbPolicyGetEnabled, _cb__CbPolicyGetEnabledResponse *cb__CbPolicyGetEnabledResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbPolicyGetActiveStatistics(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbPolicyGetActiveStatistics *cb__CbPolicyGetActiveStatistics, _cb__CbPolicyGetActiveStatisticsResponse *cb__CbPolicyGetActiveStatisticsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterCreate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterCreate *cb__CbFilterCreate, _cb__CbFilterCreateResponse *cb__CbFilterCreateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterGet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterGet *cb__CbFilterGet, _cb__CbFilterGetResponse *cb__CbFilterGetResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterDelete(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterDelete *cb__CbFilterDelete, _cb__CbFilterDeleteResponse *cb__CbFilterDeleteResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbFilterEnumerate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbFilterEnumerate *cb__CbFilterEnumerate, _cb__CbFilterEnumerateResponse *cb__CbFilterEnumerateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__CbQueryCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__CbQueryCapabilities *cb__CbQueryCapabilities, _cb__CbQueryCapabilitiesResponse *cb__CbQueryCapabilitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__SetHcbOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__SetHcbOptions *cb__SetHcbOptions, _cb__SetHcbOptionsResponse *cb__SetHcbOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__GetHcbOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__GetHcbOptions *cb__GetHcbOptions, _cb__GetHcbOptionsResponse *cb__GetHcbOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__ClearHcbState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__ClearHcbState *cb__ClearHcbState, _cb__ClearHcbStateResponse *cb__ClearHcbStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___cb__GetHcbState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _cb__GetHcbState *cb__GetHcbState, _cb__GetHcbStateResponse *cb__GetHcbStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateEventFilters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateEventFilters *emi__EnumerateEventFilters, _emi__EnumerateEventFiltersResponse *emi__EnumerateEventFiltersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetAlertSubscription(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetAlertSubscription *emi__GetAlertSubscription, _emi__GetAlertSubscriptionResponse *emi__GetAlertSubscriptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SetAlertCommunityString(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SetAlertCommunityString *emi__SetAlertCommunityString, _emi__SetAlertCommunityStringResponse *emi__SetAlertCommunityStringResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetAlertCommunityString(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetAlertCommunityString *emi__GetAlertCommunityString, _emi__GetAlertCommunityStringResponse *emi__GetAlertCommunityStringResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__AddEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__AddEventFilter *emi__AddEventFilter, _emi__AddEventFilterResponse *emi__AddEventFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SubscribeForAlert(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SubscribeForAlert *emi__SubscribeForAlert, _emi__SubscribeForAlertResponse *emi__SubscribeForAlertResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateAlertSubscriptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateAlertSubscriptions *emi__EnumerateAlertSubscriptions, _emi__EnumerateAlertSubscriptionsResponse *emi__EnumerateAlertSubscriptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateAlertPolicies(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateAlertPolicies *emi__EnumerateAlertPolicies, _emi__EnumerateAlertPoliciesResponse *emi__EnumerateAlertPoliciesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__CancelAlertSubscription(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__CancelAlertSubscription *emi__CancelAlertSubscription, _emi__CancelAlertSubscriptionResponse *emi__CancelAlertSubscriptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetEventFilter *emi__GetEventFilter, _emi__GetEventFilterResponse *emi__GetEventFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__UpdateEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__UpdateEventFilter *emi__UpdateEventFilter, _emi__UpdateEventFilterResponse *emi__UpdateEventFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__RemoveEventFilter(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__RemoveEventFilter *emi__RemoveEventFilter, _emi__RemoveEventFilterResponse *emi__RemoveEventFilterResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetEventLogStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetEventLogStatus *emi__GetEventLogStatus, _emi__GetEventLogStatusResponse *emi__GetEventLogStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__ReadEventLogRecords(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__ReadEventLogRecords *emi__ReadEventLogRecords, _emi__ReadEventLogRecordsResponse *emi__ReadEventLogRecordsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__ClearEventLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__ClearEventLog *emi__ClearEventLog, _emi__ClearEventLogResponse *emi__ClearEventLogResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__FreezeEventLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__FreezeEventLog *emi__FreezeEventLog, _emi__FreezeEventLogResponse *emi__FreezeEventLogResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SetEventLogTimestampClock(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SetEventLogTimestampClock *emi__SetEventLogTimestampClock, _emi__SetEventLogTimestampClockResponse *emi__SetEventLogTimestampClockResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetEventLogTimestampClock(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetEventLogTimestampClock *emi__GetEventLogTimestampClock, _emi__GetEventLogTimestampClockResponse *emi__GetEventLogTimestampClockResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateSensors(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateSensors *emi__EnumerateSensors, _emi__EnumerateSensorsResponse *emi__EnumerateSensorsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetSensorAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetSensorAttributes *emi__GetSensorAttributes, _emi__GetSensorAttributesResponse *emi__GetSensorAttributesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__SubscribeForGeneralAlert(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__SubscribeForGeneralAlert *emi__SubscribeForGeneralAlert, _emi__SubscribeForGeneralAlertResponse *emi__SubscribeForGeneralAlertResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__EnumerateGeneralAlertSubscriptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__EnumerateGeneralAlertSubscriptions *emi__EnumerateGeneralAlertSubscriptions, _emi__EnumerateGeneralAlertSubscriptionsResponse *emi__EnumerateGeneralAlertSubscriptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___emi__GetGeneralAlertSubscription(struct soap *soap, const char *soap_endpoint, const char *soap_action, _emi__GetGeneralAlertSubscription *emi__GetGeneralAlertSubscription, _emi__GetGeneralAlertSubscriptionResponse *emi__GetGeneralAlertSubscriptionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___hwa__EnumerateAssetTypes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _hwa__EnumerateAssetTypes *hwa__EnumerateAssetTypes, _hwa__EnumerateAssetTypesResponse *hwa__EnumerateAssetTypesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___hwa__GetAssetData(struct soap *soap, const char *soap_endpoint, const char *soap_action, _hwa__GetAssetData *hwa__GetAssetData, _hwa__GetAssetDataResponse *hwa__GetAssetDataResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___idr__SetRedirectionListenerState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _idr__SetRedirectionListenerState *idr__SetRedirectionListenerState, _idr__SetRedirectionListenerStateResponse *idr__SetRedirectionListenerStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___idr__GetRedirectionListenerState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _idr__GetRedirectionListenerState *idr__GetRedirectionListenerState, _idr__GetRedirectionListenerStateResponse *idr__GetRedirectionListenerStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___idr__GetIderSessionLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _idr__GetIderSessionLog *idr__GetIderSessionLog, _idr__GetIderSessionLogResponse *idr__GetIderSessionLogResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetCoreVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetCoreVersion *inf__GetCoreVersion, _inf__GetCoreVersionResponse *inf__GetCoreVersionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetCodeVersions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetCodeVersions *inf__GetCodeVersions, _inf__GetCodeVersionsResponse *inf__GetCodeVersionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetProvisioningMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetProvisioningMode *inf__GetProvisioningMode, _inf__GetProvisioningModeResponse *inf__GetProvisioningModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetProvisioningState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetProvisioningState *inf__GetProvisioningState, _inf__GetProvisioningStateResponse *inf__GetProvisioningStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetVlanParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetVlanParameters *inf__GetVlanParameters, _inf__GetVlanParametersResponse *inf__GetVlanParametersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetHostName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetHostName *inf__GetHostName, _inf__GetHostNameResponse *inf__GetHostNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetConfigServerInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetConfigServerInfo *inf__GetConfigServerInfo, _inf__GetConfigServerInfoResponse *inf__GetConfigServerInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetAdminAclEntryStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetAdminAclEntryStatus *inf__GetAdminAclEntryStatus, _inf__GetAdminAclEntryStatusResponse *inf__GetAdminAclEntryStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetAdminNetAclEntryStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetAdminNetAclEntryStatus *inf__GetAdminNetAclEntryStatus, _inf__GetAdminNetAclEntryStatusResponse *inf__GetAdminNetAclEntryStatusResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetPasswordModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetPasswordModel *inf__GetPasswordModel, _inf__GetPasswordModelResponse *inf__GetPasswordModelResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetEnabledInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetEnabledInterfaces *inf__GetEnabledInterfaces, _inf__GetEnabledInterfacesResponse *inf__GetEnabledInterfacesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetNetworkState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetNetworkState *inf__GetNetworkState, _inf__GetNetworkStateResponse *inf__GetNetworkStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetSecurityParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetSecurityParameters *inf__GetSecurityParameters, _inf__GetSecurityParametersResponse *inf__GetSecurityParametersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___inf__GetIderSessionLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, _inf__GetIderSessionLog *inf__GetIderSessionLog, _inf__GetIderSessionLogResponse *inf__GetIderSessionLogResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetHostName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetHostName *net__SetHostName, _net__SetHostNameResponse *net__SetHostNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetHostName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetHostName *net__GetHostName, _net__GetHostNameResponse *net__GetHostNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetDomainName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetDomainName *net__SetDomainName, _net__SetDomainNameResponse *net__SetDomainNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetDomainName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetDomainName *net__GetDomainName, _net__GetDomainNameResponse *net__GetDomainNameResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetTcpIpParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetTcpIpParameters *net__SetTcpIpParameters, _net__SetTcpIpParametersResponse *net__SetTcpIpParametersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetTcpIpParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetTcpIpParameters *net__GetTcpIpParameters, _net__GetTcpIpParametersResponse *net__GetTcpIpParametersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetVlanParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetVlanParameters *net__SetVlanParameters, _net__SetVlanParametersResponse *net__SetVlanParametersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetVlanParameters(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetVlanParameters *net__GetVlanParameters, _net__GetVlanParametersResponse *net__GetVlanParametersResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetPingResponse(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetPingResponse *net__SetPingResponse, _net__SetPingResponseResponse *net__SetPingResponseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetPingResponse(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetPingResponse *net__GetPingResponse, _net__GetPingResponseResponse *net__GetPingResponseResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__EnumerateInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__EnumerateInterfaces *net__EnumerateInterfaces, _net__EnumerateInterfacesResponse *net__EnumerateInterfacesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__GetInterfaceSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__GetInterfaceSettings *net__GetInterfaceSettings, _net__GetInterfaceSettingsResponse *net__GetInterfaceSettingsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__SetInterfaceSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__SetInterfaceSettings *net__SetInterfaceSettings, _net__SetInterfaceSettingsResponse *net__SetInterfaceSettingsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Set8021XWiredProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Set8021XWiredProfile *net__Set8021XWiredProfile, _net__Set8021XWiredProfileResponse *net__Set8021XWiredProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Get8021XWiredProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Get8021XWiredProfile *net__Get8021XWiredProfile, _net__Get8021XWiredProfileResponse *net__Get8021XWiredProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Set8021XActiveS0(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Set8021XActiveS0 *net__Set8021XActiveS0, _net__Set8021XActiveS0Response *net__Set8021XActiveS0Response);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Get8021XActiveS0(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Get8021XActiveS0 *net__Get8021XActiveS0, _net__Get8021XActiveS0Response *net__Get8021XActiveS0Response);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Set8021XPxeTimeout(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Set8021XPxeTimeout *net__Set8021XPxeTimeout, _net__Set8021XPxeTimeoutResponse *net__Set8021XPxeTimeoutResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___net__Get8021XPxeTimeout(struct soap *soap, const char *soap_endpoint, const char *soap_action, _net__Get8021XPxeTimeout *net__Get8021XPxeTimeout, _net__Get8021XPxeTimeoutResponse *net__Get8021XPxeTimeoutResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___rci__GetRemoteControlCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _rci__GetRemoteControlCapabilities *rci__GetRemoteControlCapabilities, _rci__GetRemoteControlCapabilitiesResponse *rci__GetRemoteControlCapabilitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___rci__RemoteControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _rci__RemoteControl *rci__RemoteControl, _rci__RemoteControlResponse *rci__RemoteControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___rci__GetSystemPowerState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _rci__GetSystemPowerState *rci__GetSystemPowerState, _rci__GetSystemPowerStateResponse *rci__GetSystemPowerStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__ResetFlashWearOutProtection(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__ResetFlashWearOutProtection *sai__ResetFlashWearOutProtection, _sai__ResetFlashWearOutProtectionResponse *sai__ResetFlashWearOutProtectionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetAdminAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetAdminAclEntry *sai__GetAdminAclEntry, _sai__GetAdminAclEntryResponse *sai__GetAdminAclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetAdminAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetAdminAclEntry *sai__SetAdminAclEntry, _sai__SetAdminAclEntryResponse *sai__SetAdminAclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddUserAclEntry *sai__AddUserAclEntry, _sai__AddUserAclEntryResponse *sai__AddUserAclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumerateUserAclEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumerateUserAclEntries *sai__EnumerateUserAclEntries, _sai__EnumerateUserAclEntriesResponse *sai__EnumerateUserAclEntriesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetUserAclEntry *sai__GetUserAclEntry, _sai__GetUserAclEntryResponse *sai__GetUserAclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__UpdateUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__UpdateUserAclEntry *sai__UpdateUserAclEntry, _sai__UpdateUserAclEntryResponse *sai__UpdateUserAclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__RemoveUserAclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__RemoveUserAclEntry *sai__RemoveUserAclEntry, _sai__RemoveUserAclEntryResponse *sai__RemoveUserAclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTlsEnabled(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTlsEnabled *sai__SetTlsEnabled, _sai__SetTlsEnabledResponse *sai__SetTlsEnabledResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetRngKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetRngKey *sai__SetRngKey, _sai__SetRngKeyResponse *sai__SetRngKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSKeyAndCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSKeyAndCertificate *sai__SetTLSKeyAndCertificate, _sai__SetTLSKeyAndCertificateResponse *sai__SetTLSKeyAndCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSCertificate *sai__SetTLSCertificate, _sai__SetTLSCertificateResponse *sai__SetTLSCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTLSCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTLSCertificate *sai__GetTLSCertificate, _sai__GetTLSCertificateResponse *sai__GetTLSCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__UpdateCoreFromUrl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__UpdateCoreFromUrl *sai__UpdateCoreFromUrl, _sai__UpdateCoreFromUrlResponse *sai__UpdateCoreFromUrlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningMode *sai__GetProvisioningMode, _sai__GetProvisioningModeResponse *sai__GetProvisioningModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetProvisioningMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetProvisioningMode *sai__SetProvisioningMode, _sai__SetProvisioningModeResponse *sai__SetProvisioningModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__Unprovision(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__Unprovision *sai__Unprovision, _sai__UnprovisionResponse *sai__UnprovisionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CommitChanges(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CommitChanges *sai__CommitChanges, _sai__CommitChangesResponse *sai__CommitChangesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetCoreVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetCoreVersion *sai__GetCoreVersion, _sai__GetCoreVersionResponse *sai__GetCoreVersionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddUserAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddUserAclEntryEx *sai__AddUserAclEntryEx, _sai__AddUserAclEntryExResponse *sai__AddUserAclEntryExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetUserAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetUserAclEntryEx *sai__GetUserAclEntryEx, _sai__GetUserAclEntryExResponse *sai__GetUserAclEntryExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__UpdateUserAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__UpdateUserAclEntryEx *sai__UpdateUserAclEntryEx, _sai__UpdateUserAclEntryExResponse *sai__UpdateUserAclEntryExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetAdminAclEntryEx(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetAdminAclEntryEx *sai__SetAdminAclEntryEx, _sai__SetAdminAclEntryExResponse *sai__SetAdminAclEntryExResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetDigestRealm(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetDigestRealm *sai__GetDigestRealm, _sai__GetDigestRealmResponse *sai__GetDigestRealmResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetKerberosOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetKerberosOptions *sai__SetKerberosOptions, _sai__SetKerberosOptionsResponse *sai__SetKerberosOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetKerberosOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetKerberosOptions *sai__GetKerberosOptions, _sai__GetKerberosOptionsResponse *sai__GetKerberosOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetEnabledInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetEnabledInterfaces *sai__SetEnabledInterfaces, _sai__SetEnabledInterfacesResponse *sai__SetEnabledInterfacesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetEnabledInterfaces(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetEnabledInterfaces *sai__GetEnabledInterfaces, _sai__GetEnabledInterfacesResponse *sai__GetEnabledInterfacesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTlsOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTlsOptions *sai__SetTlsOptions, _sai__SetTlsOptionsResponse *sai__SetTlsOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTlsOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTlsOptions *sai__GetTlsOptions, _sai__GetTlsOptionsResponse *sai__GetTlsOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddTrustedRootCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddTrustedRootCertificate *sai__AddTrustedRootCertificate, _sai__AddTrustedRootCertificateResponse *sai__AddTrustedRootCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTrustedRootCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTrustedRootCertificate *sai__GetTrustedRootCertificate, _sai__GetTrustedRootCertificateResponse *sai__GetTrustedRootCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__DeleteTrustedRootCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__DeleteTrustedRootCertificate *sai__DeleteTrustedRootCertificate, _sai__DeleteTrustedRootCertificateResponse *sai__DeleteTrustedRootCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumerateTrustedRootCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumerateTrustedRootCertificates *sai__EnumerateTrustedRootCertificates, _sai__EnumerateTrustedRootCertificatesResponse *sai__EnumerateTrustedRootCertificatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTrustedFqdnCN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTrustedFqdnCN *sai__SetTrustedFqdnCN, _sai__SetTrustedFqdnCNResponse *sai__SetTrustedFqdnCNResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTrustedFqdnCN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTrustedFqdnCN *sai__GetTrustedFqdnCN, _sai__GetTrustedFqdnCNResponse *sai__GetTrustedFqdnCNResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetCRL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetCRL *sai__SetCRL, _sai__SetCRLResponse *sai__SetCRLResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetCRL(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetCRL *sai__GetCRL, _sai__GetCRLResponse *sai__GetCRLResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetServerCertificateReq(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetServerCertificateReq *sai__GetServerCertificateReq, _sai__GetServerCertificateReqResponse *sai__GetServerCertificateReqResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetPkiCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetPkiCapabilities *sai__GetPkiCapabilities, _sai__GetPkiCapabilitiesResponse *sai__GetPkiCapabilitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetPowerSavingOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetPowerSavingOptions *sai__SetPowerSavingOptions, _sai__SetPowerSavingOptionsResponse *sai__SetPowerSavingOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetPowerSavingOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetPowerSavingOptions *sai__GetPowerSavingOptions, _sai__GetPowerSavingOptionsResponse *sai__GetPowerSavingOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSPSK(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSPSK *sai__SetTLSPSK, _sai__SetTLSPSKResponse *sai__SetTLSPSKResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__PartialUnprovision(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__PartialUnprovision *sai__PartialUnprovision, _sai__PartialUnprovisionResponse *sai__PartialUnprovisionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetMEBxPassword(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetMEBxPassword *sai__SetMEBxPassword, _sai__SetMEBxPasswordResponse *sai__SetMEBxPasswordResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetProvisioningServerOTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetProvisioningServerOTP *sai__SetProvisioningServerOTP, _sai__SetProvisioningServerOTPResponse *sai__SetProvisioningServerOTPResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningServerOTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningServerOTP *sai__GetProvisioningServerOTP, _sai__GetProvisioningServerOTPResponse *sai__GetProvisioningServerOTPResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumerateCertificateHashEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumerateCertificateHashEntries *sai__EnumerateCertificateHashEntries, _sai__EnumerateCertificateHashEntriesResponse *sai__EnumerateCertificateHashEntriesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetCertificateHashEntry *sai__GetCertificateHashEntry, _sai__GetCertificateHashEntryResponse *sai__GetCertificateHashEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__AddCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__AddCertificateHashEntry *sai__AddCertificateHashEntry, _sai__AddCertificateHashEntryResponse *sai__AddCertificateHashEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__DeleteCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__DeleteCertificateHashEntry *sai__DeleteCertificateHashEntry, _sai__DeleteCertificateHashEntryResponse *sai__DeleteCertificateHashEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnableCertificateHashEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnableCertificateHashEntry *sai__EnableCertificateHashEntry, _sai__EnableCertificateHashEntryResponse *sai__EnableCertificateHashEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetZeroTouchConfigurationMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetZeroTouchConfigurationMode *sai__GetZeroTouchConfigurationMode, _sai__GetZeroTouchConfigurationModeResponse *sai__GetZeroTouchConfigurationModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetZeroTouchConfigurationMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetZeroTouchConfigurationMode *sai__SetZeroTouchConfigurationMode, _sai__SetZeroTouchConfigurationModeResponse *sai__SetZeroTouchConfigurationModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningAuditRecord(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningAuditRecord *sai__GetProvisioningAuditRecord, _sai__GetProvisioningAuditRecordResponse *sai__GetProvisioningAuditRecordResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetProvisioningPID(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetProvisioningPID *sai__GetProvisioningPID, _sai__GetProvisioningPIDResponse *sai__GetProvisioningPIDResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__ExtendProvisioningPeriod(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__ExtendProvisioningPeriod *sai__ExtendProvisioningPeriod, _sai__ExtendProvisioningPeriodResponse *sai__ExtendProvisioningPeriodResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetRealmAuthOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetRealmAuthOptions *sai__GetRealmAuthOptions, _sai__GetRealmAuthOptionsResponse *sai__GetRealmAuthOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetRealmAuthOptions(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetRealmAuthOptions *sai__SetRealmAuthOptions, _sai__SetRealmAuthOptionsResponse *sai__SetRealmAuthOptionsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetEnvironmentDetection(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetEnvironmentDetection *sai__SetEnvironmentDetection, _sai__SetEnvironmentDetectionResponse *sai__SetEnvironmentDetectionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetEnvironmentDetection(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetEnvironmentDetection *sai__GetEnvironmentDetection, _sai__GetEnvironmentDetectionResponse *sai__GetEnvironmentDetectionResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnumeratePowerPackages(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnumeratePowerPackages *sai__EnumeratePowerPackages, _sai__EnumeratePowerPackagesResponse *sai__EnumeratePowerPackagesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetPowerPackage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetPowerPackage *sai__GetPowerPackage, _sai__GetPowerPackageResponse *sai__GetPowerPackageResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetActivePowerPackage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetActivePowerPackage *sai__GetActivePowerPackage, _sai__GetActivePowerPackageResponse *sai__GetActivePowerPackageResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetActivePowerPackage(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetActivePowerPackage *sai__SetActivePowerPackage, _sai__SetActivePowerPackageResponse *sai__SetActivePowerPackageResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetGlobalPowerPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetGlobalPowerPolicy *sai__SetGlobalPowerPolicy, _sai__SetGlobalPowerPolicyResponse *sai__SetGlobalPowerPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetGlobalPowerPolicy(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetGlobalPowerPolicy *sai__GetGlobalPowerPolicy, _sai__GetGlobalPowerPolicyResponse *sai__GetGlobalPowerPolicyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreAddKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreAddKey *sai__CertStoreAddKey, _sai__CertStoreAddKeyResponse *sai__CertStoreAddKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreEnumerateKeys(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreEnumerateKeys *sai__CertStoreEnumerateKeys, _sai__CertStoreEnumerateKeysResponse *sai__CertStoreEnumerateKeysResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreGetKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreGetKey *sai__CertStoreGetKey, _sai__CertStoreGetKeyResponse *sai__CertStoreGetKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreRemoveKey(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreRemoveKey *sai__CertStoreRemoveKey, _sai__CertStoreRemoveKeyResponse *sai__CertStoreRemoveKeyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreAddCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreAddCertificate *sai__CertStoreAddCertificate, _sai__CertStoreAddCertificateResponse *sai__CertStoreAddCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreGetCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreGetCertificate *sai__CertStoreGetCertificate, _sai__CertStoreGetCertificateResponse *sai__CertStoreGetCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreEnumerateCertificates(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreEnumerateCertificates *sai__CertStoreEnumerateCertificates, _sai__CertStoreEnumerateCertificatesResponse *sai__CertStoreEnumerateCertificatesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreRemoveCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreRemoveCertificate *sai__CertStoreRemoveCertificate, _sai__CertStoreRemoveCertificateResponse *sai__CertStoreRemoveCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreGetPKCS10Request(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreGetPKCS10Request *sai__CertStoreGetPKCS10Request, _sai__CertStoreGetPKCS10RequestResponse *sai__CertStoreGetPKCS10RequestResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__CertStoreUpdateCertificate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__CertStoreUpdateCertificate *sai__CertStoreUpdateCertificate, _sai__CertStoreUpdateCertificateResponse *sai__CertStoreUpdateCertificateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetTLSCredentials(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetTLSCredentials *sai__SetTLSCredentials, _sai__SetTLSCredentialsResponse *sai__SetTLSCredentialsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetTLSCredentials(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetTLSCredentials *sai__GetTLSCredentials, _sai__GetTLSCredentialsResponse *sai__GetTLSCredentialsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__EnableVpnRouting(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__EnableVpnRouting *sai__EnableVpnRouting, _sai__EnableVpnRoutingResponse *sai__EnableVpnRoutingResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetConfigurationServerFQDN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetConfigurationServerFQDN *sai__GetConfigurationServerFQDN, _sai__GetConfigurationServerFQDNResponse *sai__GetConfigurationServerFQDNResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetConfigurationServerFQDN(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetConfigurationServerFQDN *sai__SetConfigurationServerFQDN, _sai__SetConfigurationServerFQDNResponse *sai__SetConfigurationServerFQDNResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__SetAclEnabledState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__SetAclEnabledState *sai__SetAclEnabledState, _sai__SetAclEnabledStateResponse *sai__SetAclEnabledStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___sai__GetAclEnabledState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _sai__GetAclEnabledState *sai__GetAclEnabledState, _sai__GetAclEnabledStateResponse *sai__GetAclEnabledStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___str__ExecuteStorageOperation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _str__ExecuteStorageOperation *str__ExecuteStorageOperation, _str__ExecuteStorageOperationResponse *str__ExecuteStorageOperationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__GetGlobalStorageAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__GetGlobalStorageAttributes *stra__GetGlobalStorageAttributes, _stra__GetGlobalStorageAttributesResponse *stra__GetGlobalStorageAttributesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__SetGlobalStorageAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__SetGlobalStorageAttributes *stra__SetGlobalStorageAttributes, _stra__SetGlobalStorageAttributesResponse *stra__SetGlobalStorageAttributesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AdminGetRegisteredApplications(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AdminGetRegisteredApplications *stra__AdminGetRegisteredApplications, _stra__AdminGetRegisteredApplicationsResponse *stra__AdminGetRegisteredApplicationsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AdminGetApplicationAttributes(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AdminGetApplicationAttributes *stra__AdminGetApplicationAttributes, _stra__AdminGetApplicationAttributesResponse *stra__AdminGetApplicationAttributesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AdminRemoveApplication(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AdminRemoveApplication *stra__AdminRemoveApplication, _stra__AdminRemoveApplicationResponse *stra__AdminRemoveApplicationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AddStorageEaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AddStorageEaclEntry *stra__AddStorageEaclEntry, _stra__AddStorageEaclEntryResponse *stra__AddStorageEaclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__EnumerateStorageEaclEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__EnumerateStorageEaclEntries *stra__EnumerateStorageEaclEntries, _stra__EnumerateStorageEaclEntriesResponse *stra__EnumerateStorageEaclEntriesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__GetStorageEaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__GetStorageEaclEntry *stra__GetStorageEaclEntry, _stra__GetStorageEaclEntryResponse *stra__GetStorageEaclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__RemoveStorageEaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__RemoveStorageEaclEntry *stra__RemoveStorageEaclEntry, _stra__RemoveStorageEaclEntryResponse *stra__RemoveStorageEaclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__AddStorageFpaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__AddStorageFpaclEntry *stra__AddStorageFpaclEntry, _stra__AddStorageFpaclEntryResponse *stra__AddStorageFpaclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__EnumerateStorageAllocEntries(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__EnumerateStorageAllocEntries *stra__EnumerateStorageAllocEntries, _stra__EnumerateStorageAllocEntriesResponse *stra__EnumerateStorageAllocEntriesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__GetStorageAllocEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__GetStorageAllocEntry *stra__GetStorageAllocEntry, _stra__GetStorageAllocEntryResponse *stra__GetStorageAllocEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__UpdateStorageFpaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__UpdateStorageFpaclEntry *stra__UpdateStorageFpaclEntry, _stra__UpdateStorageFpaclEntryResponse *stra__UpdateStorageFpaclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___stra__RemoveStorageFpaclEntry(struct soap *soap, const char *soap_endpoint, const char *soap_action, _stra__RemoveStorageFpaclEntry *stra__RemoveStorageFpaclEntry, _stra__RemoveStorageFpaclEntryResponse *stra__RemoveStorageFpaclEntryResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___tim__GetLowAccuracyTimeSynch(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tim__GetLowAccuracyTimeSynch *tim__GetLowAccuracyTimeSynch, _tim__GetLowAccuracyTimeSynchResponse *tim__GetLowAccuracyTimeSynchResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___tim__SetHighAccuracyTimeSynch(struct soap *soap, const char *soap_endpoint, const char *soap_action, _tim__SetHighAccuracyTimeSynch *tim__SetHighAccuracyTimeSynch, _tim__SetHighAccuracyTimeSynchResponse *tim__SetHighAccuracyTimeSynchResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__AddWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__AddWirelessProfileRequest *wcxs__AddWirelessProfileRequest, _wcxs__AddWirelessProfileResponse *wcxs__AddWirelessProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__GetWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__GetWirelessProfileRequest *wcxs__GetWirelessProfileRequest, _wcxs__GetWirelessProfileResponse *wcxs__GetWirelessProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__RemoveWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__RemoveWirelessProfileRequest *wcxs__RemoveWirelessProfileRequest, _wcxs__RemoveWirelessProfileResponse *wcxs__RemoveWirelessProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__UpdateWirelessProfile(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__UpdateWirelessProfileRequest *wcxs__UpdateWirelessProfileRequest, _wcxs__UpdateWirelessProfileResponse *wcxs__UpdateWirelessProfileResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__EnumerateWirelessProfiles(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__EnumerateWirelessProfilesRequest *wcxs__EnumerateWirelessProfilesRequest, _wcxs__EnumerateWirelessProfilesResponse *wcxs__EnumerateWirelessProfilesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__GetWirelessCapabilities(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__GetWirelessCapabilitiesRequest *wcxs__GetWirelessCapabilitiesRequest, _wcxs__GetWirelessCapabilitiesResponse *wcxs__GetWirelessCapabilitiesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___wcxs__GetWirelessSettings(struct soap *soap, const char *soap_endpoint, const char *soap_action, _wcxs__GetWirelessSettingsRequest *wcxs__GetWirelessSettingsRequest, _wcxs__GetWirelessSettingsResponse *wcxs__GetWirelessSettingsResponse);

#endif

/* End of soapStub.h */
